cscope 15 /aenao-99/karyofyl/MultiCacheSim               0000599450
	@cache.cpp

24 
	~<ˇs£π
>

25 
	~<io°ªam
>

26 
	~<iom™ù
>

27 
	~<ôî©‹
>

28 
	~<f°ªam
>

30 
	~"misc.h
"

31 
	~"ˇche.h
"

35 
	gCache
::
	$Cache
(
num_löes
, 
assoc
Ë: 
	$maxSëSize
(
assoc
)

37 
	`as£π
(
num_löes
 % 
assoc
 == 0);

40 
£ts
.
	`ªsize
(
num_löes
 / 
assoc
);

41 
	}
}

45 
CacheSèã
 
	gCache
::
	$födTag
(
uöt64_t
 
£t
, uöt64_à
èg
) const

47 autÿ
ô
 = 
£ts
[
£t
].
	`cbegö
(); ià!£ts[£t].
	`˚nd
(); ++it) {

48 i‡(
ô
->
èg
 ==Åag) {

49  
ô
->
°©e
;

53  
CacheSèã
::
InvÆid
;

54 
	}
}

59 
	gCache
::
	$ch™geSèã
(
uöt64_t
 
£t
, uöt64_à
èg
, 
CacheSèã
 
°©e
)

61 autÿ
ô
 = 
£ts
[
£t
].
	`begö
(); ià!£ts[£t].
	`íd
(); ++it) {

62 i‡(
ô
->
èg
 ==Åag) {

63 i‡(
°©e
 =
CacheSèã
::
InvÆid
) {

64 
£ts
[
£t
].
	`îa£
(
ô
);

67 
ô
->
°©e
 = state;

72 
	}
}

78 
	gCache
::
	$upd©eLRU
(
uöt64_t
 
£t
, uöt64_à
èg
)

80 #ifde‡
DEBUG


81 
CacheSèã
 
foundSèã
 = 
	`födTag
(
£t
, 
èg
);

82 
	`as£π
(
foundSèã
 !
CacheSèã
::
InvÆid
);

85 
CacheLöe
 
ãmp
;

86 autÿ
ô
 = 
£ts
[
£t
].
	`begö
();

87 ; 
ô
 !
£ts
[
£t
].
	`íd
(); ++it) {

88 if(
ô
->
èg
 ==Åag) {

89 
ãmp
 = *
ô
;

94 
£ts
[
£t
].
	`îa£
(
ô
);

95 
£ts
[
£t
].
	`push_back
(
ãmp
);

96 
	}
}

101 
boﬁ
 
	gCache
::
	$checkWrôeback
(
uöt64_t
 
£t
, uöt64_t& 
èg
) const

103 i‡(
£ts
[
£t
].
	`size
(Ë< 
maxSëSize
) {

106  
Ál£
;

109 c⁄° 
CacheLöe
& 
evi˘
 = 
£ts
[
£t
].
	`‰⁄t
();

110 
èg
 = 
evi˘
.tag;

111  (
evi˘
.
°©e
 =
CacheSèã
::
Modifõd
 ||Évi˘.°©ê=CacheSèã::
Ow√d
);

112 
	}
}

116 
	gCache
::
ö£πLöe
(
uöt64_t
 
£t
, uöt64_à
èg
, 
CacheSèã
 
°©e
, 
°d
::
¨øy
<,64> 
d©a
)

118 i‡(
	g£ts
[
£t
].
size
(Ë=
maxSëSize
) {

119 
£ts
[
£t
].
p›_‰⁄t
();

123 
	g£ts
[
£t
].
em∂a˚_back
(
èg
, 
°©e
, 
d©a
);

126 
	gCache
::
	$¢≠shŸ
()

128 
way_cou¡
;

131 
uöt
 
i
=0; i<
£ts
.
	`size
(); i++) {

132 
way_cou¡
 = 0;

133 
°d
::
cout
 << "CachêLöê#" << 
i
 << " \n";

134 autÿ
ô
 = 
£ts
[
i
].
	`begö
(); ià!£ts[i].
	`íd
(); ++it) {

136 
°d
::
cout
 << "Way #" << 
way_cou¡
 << ", Tag: " << std::
hex
 << 
ô
->
èg
 << ", Data: ";

137 
j
=0; j<64; j++) {

138 
°d
::
cout
 << std::
hex
 << 
ô
->
d©a
[
j
] << " ";

141 
way_cou¡
++;

142 
°d
::
cout
 << "\n\n";

146 
°d
::
cout
 << "\n";

148 
	}
}

150 
	gCache
::
checkSimû¨ôy
(
°d
::
¨øy
<,64> 
löeD©a
, 
maskedBôs
, 
rw
)

152 
	g°d
::
¨øy
<,64> 
	gmaskedD©a
;

154 i‡(
	gmaskedBôs
 == 1) {

155 
i
=0; 
	gi
<64; i++) {

156 
	gmaskedD©a
[
i
] = 
löeD©a
[i];

157 i‡(
	gi
 % 8 == 7) {

158 
maskedD©a
[
i
] = 
löeD©a
[i] & 0xFE;

161 i‡(
	grw
 == 'W') {

162 
occuªn˚
.
ö£π
({
maskedD©a
,0});

164 i‡(
	grw
 == 'R') {

165 
occuªn˚
[
maskedD©a
]++;

168 i‡(
	gmaskedBôs
 == 2) {

169 
i
=0; 
	gi
<64; i++) {

170 
	gmaskedD©a
[
i
] = 
löeD©a
[i];

171 i‡(
	gi
 % 8 == 7) {

172 
maskedD©a
[
i
] = 
löeD©a
[i] & 0xFC;

175 i‡(
	grw
 == 'W') {

176 
occuªn˚
.
ö£π
({
maskedD©a
,0});

178 i‡(
	grw
 == 'R') {

179 
occuªn˚
[
maskedD©a
]++;

182 i‡(
	gmaskedBôs
 == 4) {

183 
i
=0; 
	gi
<64; i++) {

184 
	gmaskedD©a
[
i
] = 
löeD©a
[i];

185 i‡(
	gi
 % 8 == 7) {

186 
maskedD©a
[
i
] = 
löeD©a
[i] & 0xF0;

189 i‡(
	grw
 == 'W') {

190 
occuªn˚
.
ö£π
({
maskedD©a
,0});

192 i‡(
	grw
 == 'R') {

193 
occuªn˚
[
maskedD©a
]++;

196 i‡(
	gmaskedBôs
 == 8) {

197 
i
=0; 
	gi
<64; i++) {

198 
	gmaskedD©a
[
i
] = 
löeD©a
[i];

199 i‡(
	gi
 % 8 == 7) {

200 
maskedD©a
[
i
] = 0;

203 i‡(
	grw
 == 'W') {

204 
occuªn˚
.
ö£π
({
maskedD©a
,0});

206 i‡(
	grw
 == 'R') {

207 
occuªn˚
[
maskedD©a
]++;

210 i‡(
	gmaskedBôs
 == 16) {

211 
i
=0; 
	gi
<64; i++) {

212 
	gmaskedD©a
[
i
] = 
löeD©a
[i];

213 i‡(
	gi
 % 8 =6 || 
i
 % 8 == 7) {

214 
maskedD©a
[
i
] = 0;

217 i‡(
	grw
 == 'W') {

218 
occuªn˚
.
ö£π
({
maskedD©a
,0});

220 i‡(
	grw
 == 'R') {

221 
occuªn˚
[
maskedD©a
]++;

224 i‡(
	gmaskedBôs
 == 32) {

225 
i
=0; 
	gi
<64; i++) {

226 
	gmaskedD©a
[
i
] = 
löeD©a
[i];

227 i‡(
	gi
 % 8 =4 || 
i
 % 8 == 5 || i % 8 == 6 || i % 8 == 7) {

228 
maskedD©a
[
i
] = 0;

231 i‡(
	grw
 == 'W') {

232 
occuªn˚
.
ö£π
({
maskedD©a
,0});

234 i‡(
	grw
 == 'R') {

235 
occuªn˚
[
maskedD©a
]++;

239 i‡(
	grw
 == 'W') {

240 
occuªn˚
.
ö£π
({
löeD©a
,0});

242 i‡(
	grw
 == 'R') {

243 
occuªn˚
[
löeD©a
]++;

248 
	gCache
::
¥ötSimû¨ôy
(
bôs_ign‹ed
, 
°d
::
°rög
 
bíchm¨k
)

251 autÿ
°r_öt
 = 
°d
::
to_°rög
(
bôs_ign‹ed
);

252 
	g°d
::
°rög
 
fûe_∑th
 = "/´«o-99/k¨yofyl/ªsu…s/mcs/∑r£c/" + 
bíchm¨k
 + "/smÆl/" + 
°r_öt
 + "/similarity.out";

253 
	g°d
::
of°ªam
 
åa˚
(
fûe_∑th
.
c_°r
());

256 
	gÆl_ªads
 = 0;

258 autÿ
	gô
 = 
occuªn˚
.
begö
(); ià!occuªn˚.
íd
(); ++it) {

259 
	gÆl_ªads
 = 
Æl_ªads
 + 
ô
->
£c⁄d
;

262 
	gåa˚
 << 
	gÆl_ªads
 << "\n";

263 autÿ
	gô
 = 
occuªn˚
.
begö
(); ià!occuªn˚.
íd
(); ++it) {

264 
	g≥r˚¡age
 = ((
ô
->
£c⁄d
)/
Æl_ªads
)*100;

270 
	gåa˚
 << 
	gô
->
	g£c⁄d
 << " " << 
	g°d
::
fixed
 << 
°d
::
£çªcisi⁄
(2Ë<< 
≥r˚¡age
 << "\n";

272 
	gåa˚
.
˛o£
();

	@cache.h

24 #¥agm®
⁄˚


26 
	~<ve˘‹
>

27 
	~<¨øy
>

28 
	~<un‹dîed_m≠
>

29 
	~<deque
>

31 
	~"misc.h
"

33 
«me•a˚
 
	g°d


35 
	gãm∂©e
<
ty≥«me
 
	gT
, 
size_t
 
	gN
>

36 
	ghash
<
	g¨øy
<
	gT
, 
	gN
> >

38 
	g¨øy
<
	tT
, 
	tN
> 
	t¨gumít_ty≥
;

39 
size_t
 
	tªsu…_ty≥
;

41 
ªsu…_ty≥
 
›î©‹
()(c⁄° 
	g¨gumít_ty≥
& 
	ga
) const

43 
	ghash
<
	gT
> 
	ghashî
;

44 
ªsu…_ty≥
 
	gh
 = 0;

45 
ªsu…_ty≥
 
	gi
 = 0; i < 
	gN
; ++i)

47 
	gh
 = 
h
 * 31 + 
hashî
(
a
[
i
]);

49  
	gh
;

55 ˛as†
	cCache
 {

56 
	mpublic
:

59 
Cache
(
num_löes
, 
assoc
);

61 
CacheSèã
 
	$födTag
(
uöt64_t
 
£t
, uöt64_à
èg
) const;

62 
	`ch™geSèã
(
uöt64_t
 
£t
, uöt64_à
èg
, 
CacheSèã
 
°©e
);

64 
	`upd©eLRU
(
uöt64_t
 
£t
, uöt64_à
èg
);

66 
boﬁ
 
	$checkWrôeback
(
uöt64_t
 
£t
, uöt64_t& 
èg
) const;

69 
	`ö£πLöe
(
uöt64_t
 
£t
, uöt64_à
èg
, 
CacheSèã
 
°©e
, 
°d
::
¨øy
<,64> 
d©a
);

70 
	`¢≠shŸ
();

71 
	`checkSimû¨ôy
(
°d
::
¨øy
<,64> 
löeD©a
, 
maskedBôs
, 
rw
);

72 
	`¥ötSimû¨ôy
(
bôs_ign‹ed
, 
°d
::
°rög
 
bíchm¨k
);

73 
¥iv©e
:

74 
°d
::
ve˘‹
<°d::
deque
<
CacheLöe
>> 
£ts
;

75 
maxSëSize
;

76 
°d
::
un‹dîed_m≠
<°d::
¨øy
<,64>, > 
occuªn˚
;

	@main.cpp

24 
	~<io°ªam
>

25 
	~<f°ªam
>

26 
	~<ˇs£π
>

27 
	~<s°ªam
>

28 
	~<°rög
>

29 
	~"/´«o-99/k¨yofyl/z°r/§c/z°r.hµ
"

31 
	~"sy°em.h
"

33 
usög
 
«me•a˚
 
	g°d
;

35 
	$maö
(
¨gc
, * 
¨gv
[])

40 
¨r_m≠
[] = {0, 1};

41 
ve˘‹
<> 
	`tid_m≠
(
¨r_m≠
,árr_map +

42 (
¨r_m≠
) / ());

43 
°d
::
unique_±r
<
SeqPª„tch
> 
¥e„tch
 = std::
make_unique
<SeqPrefetch>();

52 
SögÀCacheSy°em
 
	`sys
(64, 16, 2, 
°d
::
	`move
(
¥e„tch
), 
Ál£
, false);

53 
rw
;

54 
uöt64_t
 
addªss
;

55 
löes
 = 0;

57 
°d
::
°rög
 
ty≥
;

58 
°d
::
°rög
 
bíchm¨k
 = 
¨gv
[2];

59 i‡(
bíchm¨k
 == "blackscholes" || benchmark == "bodytrack" || benchmark == "facesim" || benchmark == "ferret" || benchmark == "fluidanimate" || benchmark == "freqmine" || benchmark == "raytrace" ||

60 
bíchm¨k
 == "swaptions" || benchmark == "vips" || benchmark == "x264" || benchmark == "test") {

61 
ty≥
 = "apps";

63 i‡(
bíchm¨k
 == "canneal" || benchmark == "dedup" || benchmark == "streamcluster") {

64 
ty≥
 = "kernels";

66 
z°r
::
if°ªam
 
	`öfûe
("/´«o-99/k¨yofyl/ªsu…s/pö/pö©ø˚/∑r£c/" + 
bíchm¨k
 + "/smÆl/pkgs/" + 
ty≥
 + "/" + benchmark + "/run/trace.out.gz");

72 
°d
::
°rög
 
löe
;

73 
bôs_ign‹ed
 = 
	`©oi
(
¨gv
[1]);

75 !
öfûe
.
	`eof
())

78 
öfûe
.
	`ign‹e
(256, ':');

80 
öfûe
 >> 
rw
;

81 
	`as£π
(
rw
 == 'R' ||Ñw == 'W');

82 
Ac˚ssTy≥
 
ac˚ssTy≥
;

83 i‡(
rw
 == 'R') {

84 
ac˚ssTy≥
 = 
Ac˚ssTy≥
::
Ród
;

86 
ac˚ssTy≥
 = 
Ac˚ssTy≥
::
Wrôe
;

89 
öfûe
 >> 
hex
 >> 
addªss
;

92 
°d
::
¨øy
<,64> 
löeD©a
 = {0};

93 
vÆue
;

95 
i
=0; i<64; i++) {

96 
öfûe
 >> 
hex
 >> 
vÆue
;

97 
löeD©a
[
i
] = 
vÆue
;

100 if(
addªss
 != 0) {

103 
sys
.
	`memAc˚ss
(
addªss
, 
ac˚ssTy≥
, 
löeD©a
, 
löes
%2);

111 
sys
.
	`checkSimû¨ôy
(
löeD©a
,
bôs_ign‹ed
,
rw
);

113 ++
löes
;

116 
°d
::
cout
 << "Traditional Stats\n_________________\n\n";

118 
cout
 << "Ac˚s£s: " << 
löes
 << 
ídl
;

119 
cout
 << "Hôs: " << 
sys
.
°©s
.
hôs
 << 
ídl
;

120 
cout
 << "Mis£s: " << 
löes
 - 
sys
.
°©s
.
hôs
 << 
ídl
;

121 
cout
 << "Loˇ»ªads: " << 
sys
.
°©s
.
loˇl_ªads
 << 
ídl
;

122 
cout
 << "Loˇ»wrôes: " << 
sys
.
°©s
.
loˇl_wrôes
 << 
ídl
;

123 
cout
 << "RemŸêªads: " << 
sys
.
°©s
.
ªmŸe_ªads
 << 
ídl
;

124 
cout
 << "RemŸêwrôes: " << 
sys
.
°©s
.
ªmŸe_wrôes
 << 
ídl
;

125 
cout
 << "Othî-ˇchêªads: " << 
sys
.
°©s
.
Ÿhîˇche_ªads
 << 
ídl
;

128 
sys
.
	`¥ötSimû¨ôy
(
bôs_ign‹ed
, 
bíchm¨k
);

133 
	}
}

	@misc.h

24 #¥agm®
⁄˚


26 
	~<c°döt
>

27 
	~<ve˘‹
>

28 
	~<¨øy
>

30 
	#PAGE_SIZE_4KB


	)

32 #ifde‡
PAGE_SIZE_4KB


33 
c⁄°ex¥
 
uöt64_t
 
	g∑geMask
 = 0xFFFFFFFFFFFFF000;

34 
c⁄°ex¥
 
uöt32_t
 
	g∑geShi·
 = 12;

35 #ñi‡
deföed
 
PAGE_SIZE_2MB


36 
c⁄°ex¥
 
uöt64_t
 
	g∑geMask
 = 0xFFFFFFFFFFE00000;

37 
c⁄°ex¥
 
uöt32_t
 
	g∑geShi·
 = 21;

42 ˛as†
	cCacheSèã
 {
	mModifõd
, 
	mOw√d
, 
	mEx˛usive
, 
	mSh¨ed
, 
	mInvÆid
};

44 ˛as†
	cAc˚ssTy≥
 {
	mRód
, 
	mWrôe
, 
	mPª„tch
};

46 
	sCacheLöe
{

47 
uöt64_t
 
	mèg
{0};

48 
CacheSèã
 
	m°©e
{
	mCacheSèã
::
InvÆid
};

49 
	m°d
::
¨øy
<,64> 
	md©a
;

51 
CacheLöe
(
uöt64_t
 
èg
 = 0, 
CacheSèã
 
°©e
 = CacheSèã::
InvÆid
, 
°d
::
¨øy
<,64> 
d©a
 = {0}) :

52 
èg
—ag), 
°©e
(°©e), 
d©a
(data) {}

53 
boﬁ
 
	m›î©‹
<(c⁄° 
	mCacheLöe
& 
	mrhs
) const

54 {  
	mèg
 < 
	mrhs
.tag; }

55 
boﬁ
 
	m›î©‹
==(c⁄° 
CacheLöe
& 
rhs
) const

56 {  
èg
 =
rhs
.tag; }

	@prefetch.cpp

24 
	~"¥e„tch.h
"

25 
	~"sy°em.h
"

27 
	gAdjPª„tch
::
¥e„tchMiss
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
)

29 
	gsys
.
memAc˚ss
(
addªss
 + (1 << 
sys
.
£tShi·
), 
Ac˚ssTy≥
::
Pª„tch
, 
d©a
, 
tid
);

34 
	gSeqPª„tch
::
¥e„tchMiss
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
)

36 
uöt64_t
 
	g£t
 = (
addªss
 & 
sys
.
£tMask
Ë>> sys.
£tShi·
;

37 
uöt64_t
 
	gèg
 = 
addªss
 & 
sys
.
ègMask
;

38 
uöt64_t
 
	gœ°Së
 = (
œ°Miss
 & 
sys
.
£tMask
Ë>> sys.
£tShi·
;

39 
uöt64_t
 
	gœ°Tag
 = 
œ°Miss
 & 
sys
.
ègMask
;

40 
	g¥e„tched
 = 0;

42 if(
	gèg
 =
œ°Tag
 && (
œ°Së
+1Ë=
£t
) {

43 
uöt64_t
 
i
=0; 
	gi
 < 
	g¥e„tchNum
; i++) {

44 
	g¥e„tched
++;

48 
	gsys
.
memAc˚ss
(
addªss
 + ((1 << 
sys
.
£tShi·
Ë* (
i
+1)), 
Ac˚ssTy≥
::
Pª„tch
, 
d©a
, 
tid
);

51 
	gœ°Pª„tch
 = 
addªss
 + (1 << 
sys
.
£tShi·
);

54 
	gœ°Miss
 = 
addªss
;

55  
	g¥e„tched
;

58 
	gAdjPª„tch
::
¥e„tchHô
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
)

60 
	gsys
.
memAc˚ss
(
addªss
 + (1 << 
sys
.
£tShi·
), 
Ac˚ssTy≥
::
Pª„tch
, 
d©a
, 
tid
);

65 
	gSeqPª„tch
::
¥e„tchHô
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
)

67 
uöt64_t
 
	g£t
 = (
addªss
 & 
sys
.
£tShi·
) >> sys.setShift;

68 
uöt64_t
 
	gèg
 = 
addªss
 & 
sys
.
ègMask
;

69 
uöt64_t
 
	gœ°Së
 = (
œ°Pª„tch
 & 
sys
.
£tMask
)

70 >> 
sys
.
£tShi·
;

71 
uöt64_t
 
	gœ°Tag
 = 
œ°Pª„tch
 & 
sys
.
ègMask
;

73 if(
	gèg
 =
œ°Tag
 && 
œ°Së
 =
£t
) {

77 
sys
.
memAc˚ss
(
addªss
 + ((1 << sys.
£tShi·
Ë* 
¥e„tchNum
), 
Ac˚ssTy≥
::
Pª„tch
, 
d©a
, 
tid
);

78 
	gœ°Pª„tch
 = 
œ°Pª„tch
 + (1 << 
sys
.
£tShi·
);

	@prefetch.h

24 #¥agm®
⁄˚


26 
	~<c°döt
>

27 
	~<¨øy
>

29 
˛ass
 
	gSy°em
;

31 ˛as†
	cPª„tch
 {

32 
	mpublic
:

33 
vútuÆ
 
¥e„tchMiss
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
) = 0;

34 
vútuÆ
 
¥e„tchHô
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
) = 0;

40 ˛as†
	cSeqPª„tch
 : 
public
 
Pª„tch
 {

41 
public
:

42 
¥e„tchMiss
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
Ë
	movîride
;

43 
¥e„tchHô
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
Ë
	movîride
;

44 
	m¥iv©e
:

45 
uöt64_t
 
œ°Miss
{0};

46 
uöt64_t
 
	gœ°Pª„tch
{0};

47 
c⁄°ex¥
 
	g¥e„tchNum
 = 3;

51 ˛as†
	cAdjPª„tch
 : 
public
 
Pª„tch
 {

52 
public
:

53 
¥e„tchMiss
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
Ë
	movîride
;

54 
¥e„tchHô
(
uöt64_t
 
addªss
, 
tid
, 
°d
::
¨øy
<,64> 
d©a
, 
Sy°em
& 
sys
Ë
	movîride
;

	@system.cpp

24 
	~<ˇs£π
>

25 
	~<cm©h
>

26 
	~<c°dlib
>

28 
	~"misc.h
"

29 
	~"ˇche.h
"

30 
	~"sy°em.h
"

32 
	gSy°em
::
Sy°em
(

33 
löe_size
, 
num_löes
, 
assoc
,

34 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
,

35 
boﬁ
 
cou¡_compuls‹y
 ,

36 
boﬁ
 
do_addr_å™s
 ) :

37 
¥e„tchî
(
°d
::
move
(prefetcher)),

38 
cou¡Compuls‹y
(
cou¡_compuls‹y
),

39 
	$doAddrTøns
(
do_addr_å™s
)

41 
	`as£π
(
num_löes
 % 
assoc
 == 0);

43 
löeMask
 = ((
uöt64_t
Ë
löe_size
)-1;

44 
£tShi·
 = 
	`log2
(
löe_size
);

45 
£tMask
 = ((
num_löes
 / 
assoc
Ë- 1Ë<< 
£tShi·
;

46 
ègMask
 = ~(
£tMask
 | 
löeMask
);

47 
	}
}

49 
	gSy°em
::
	$checkCompuls‹y
(
uöt64_t
 
löe
)

51 if(!
£íLöes
.
	`cou¡
(
löe
)) {

52 
°©s
.
compuls‹y
++;

53 
£íLöes
.
	`ö£π
(
löe
);

55 
	}
}

57 
uöt64_t
 
	gSy°em
::
	$vútToPhys
(
uöt64_t
 
addªss
)

59 
uöt64_t
 
phys_addr
 = 
addªss
 & (~
∑geMask
);

60 
uöt64_t
 
vút_∑ge
 = 
addªss
 & 
∑geMask
;

61 autÿ
ô
 = 
vútToPhysM≠
.
	`föd
(
vút_∑ge
);

63 if(
ô
 !
vútToPhysM≠
.
	`íd
()) {

64 
uöt64_t
 
phys_∑ge
 = 
ô
->
£c⁄d
;

65 
phys_addr
 |
phys_∑ge
;

68 
uöt64_t
 
phys_∑ge
 = 
√xtPage
 << 
∑geShi·
;

69 
phys_addr
 |
phys_∑ge
;

70 
vútToPhysM≠
.
	`ö£π
(
°d
::
	`make_∑ú
(
vút_∑ge
, 
phys_∑ge
));

71 ++
√xtPage
;

74  
phys_addr
;

75 
	}
}

77 
	gMu…iCacheSy°em
::
	$checkRemŸeSèãs
(
uöt64_t
 
£t
,

78 
uöt64_t
 
èg
, 
CacheSèã
& 
°©e
, 
loˇl
)

80 
CacheSèã
 
curSèã
 = CacheSèã::
InvÆid
;

81 
°©e
 = 
CacheSèã
::
InvÆid
;

82 
ªmŸe
 = 0;

84 
i
=0; i<
ˇches
.
	`size
(); ++i) {

85 if(
i
 =
loˇl
) {

89 
curSèã
 = 
ˇches
[
i
]->
	`födTag
(
£t
, 
èg
);

90 
curSèã
)

92 
CacheSèã
::
Ow√d
:

93 
°©e
 = 
CacheSèã
::
Ow√d
;

94  
i
;

96 
CacheSèã
::
Sh¨ed
:

100 
°©e
 = 
CacheSèã
::
Sh¨ed
;

101 
ªmŸe
 = 
i
;

103 
CacheSèã
::
Ex˛usive
:

104 
°©e
 = 
CacheSèã
::
Ex˛usive
;

105  
i
;

107 
CacheSèã
::
Modifõd
:

108 
°©e
 = 
CacheSèã
::
Modifõd
;

109  
i
;

116  
ªmŸe
;

117 
	}
}

119 
	gMu…iCacheSy°em
::
	$£tRemŸeSèãs
(
uöt64_t
 
£t
,

120 
uöt64_t
 
èg
, 
CacheSèã
 
°©e
, 
loˇl
)

122 
i
=0; i < 
ˇches
.
	`size
(); ++i) {

123 if(
i
 !
loˇl
) {

124 
ˇches
[
i
]->
	`ch™geSèã
(
£t
, 
èg
, 
°©e
);

127 
	}
}

130 
	gMu…iCacheSy°em
::
	$evi˘Tøffic
(
uöt64_t
 
£t
,

131 
uöt64_t
 
èg
, 
loˇl
)

133 
uöt64_t
 
∑ge
 = ((
£t
 << 
£tShi·
Ë| 
èg
Ë& 
∑geMask
;

135 #ifde‡
DEBUG


136 c⁄°áutÿ
ô
 = 
∑geLi°
.
	`föd
(
∑ge
);

137 
	`as£π
(
ô
 !
∑geLi°
.
	`íd
());

140 
domaö
 = 
∑geToDomaö
[
∑ge
];

141 if(
domaö
 =
loˇl
) {

142 
°©s
.
loˇl_wrôes
++;

144 
°©s
.
ªmŸe_wrôes
++;

146 
	}
}

148 
boﬁ
 
	gMu…iCacheSy°em
::
	$isLoˇl
(
uöt64_t
 
addªss
, 
loˇl
)

150 
uöt64_t
 
∑ge
 = 
addªss
 & 
∑geMask
;

152 #ifde‡
DEBUG


153 c⁄°áutÿ
ô
 = 
∑geLi°
.
	`föd
(
∑ge
);

154 
	`as£π
(
ô
 !
∑geLi°
.
	`íd
());

157 
domaö
 = 
∑geToDomaö
[
∑ge
];

158  (
domaö
 =
loˇl
);

159 
	}
}

162 
CacheSèã
 
	gMu…iCacheSy°em
::
	$¥o˚ssMOESI
(
uöt64_t
 
£t
,

163 
uöt64_t
 
èg
, 
CacheSèã
 
ªmŸe_°©e
, 
Ac˚ssTy≥
 
ac˚ssTy≥
,

164 
boﬁ
 
loˇl_åaffic
, 
loˇl
,

165 
ªmŸe
)

167 
CacheSèã
 
√w_°©e
 = CacheSèã::
InvÆid
;

168 
boﬁ
 
is_¥e„tch
 = (
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Pª„tch
);

170 i‡(
ªmŸe_°©e
 =
CacheSèã
::
InvÆid
 && 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Ród
) {

171 
√w_°©e
 = 
CacheSèã
::
Ex˛usive
;

173 i‡(
loˇl_åaffic
 && !
is_¥e„tch
) {

174 
°©s
.
loˇl_ªads
++;

175 } i‡(!
is_¥e„tch
) {

176 
°©s
.
ªmŸe_ªads
++;

179 i‡(
ªmŸe_°©e
 =
CacheSèã
::
InvÆid
 && 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Wrôe
) {

180 
√w_°©e
 = 
CacheSèã
::
Modifõd
;

182 i‡(
loˇl_åaffic
 && !
is_¥e„tch
) {

183 
°©s
.
loˇl_ªads
++;

184 } i‡(!
is_¥e„tch
) {

185 
°©s
.
ªmŸe_ªads
++;

188 i‡(
ªmŸe_°©e
 =
CacheSèã
::
Sh¨ed
 && 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Ród
) {

189 
√w_°©e
 = 
CacheSèã
::
Sh¨ed
;

191 i‡(
loˇl_åaffic
 && !
is_¥e„tch
) {

192 
°©s
.
loˇl_ªads
++;

193 } i‡(!
is_¥e„tch
) {

194 
°©s
.
ªmŸe_ªads
++;

197 i‡(
ªmŸe_°©e
 =
CacheSèã
::
Sh¨ed
 && 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Wrôe
) {

198 
√w_°©e
 = 
CacheSèã
::
Modifõd
;

199 
	`£tRemŸeSèãs
(
£t
, 
èg
, 
CacheSèã
::
InvÆid
, 
loˇl
);

201 i‡(!
is_¥e„tch
) {

202 
°©s
.
Ÿhîˇche_ªads
++;

205 i‡((
ªmŸe_°©e
 =
CacheSèã
::
Modifõd
 ||

206 
ªmŸe_°©e
 =
CacheSèã
::
Ow√d
Ë&& 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Ród
) {

207 
√w_°©e
 = 
CacheSèã
::
Sh¨ed
;

208 
ˇches
[
ªmŸe
]->
	`ch™geSèã
(
£t
, 
èg
, 
CacheSèã
::
Ow√d
);

210 i‡(!
is_¥e„tch
) {

211 
°©s
.
Ÿhîˇche_ªads
++;

214 i‡((
ªmŸe_°©e
 =
CacheSèã
::
Modifõd
 ||

215 
ªmŸe_°©e
 =
CacheSèã
::
Ow√d
 ||

216 
ªmŸe_°©e
 =
CacheSèã
::
Ex˛usive
)

217 && 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Wrôe
) {

218 
√w_°©e
 = 
CacheSèã
::
Modifõd
;

219 
	`£tRemŸeSèãs
(
£t
, 
èg
, 
CacheSèã
::
InvÆid
, 
loˇl
);

221 i‡(!
is_¥e„tch
) {

222 
°©s
.
Ÿhîˇche_ªads
++;

225 i‡(
ªmŸe_°©e
 =
CacheSèã
::
Ex˛usive
 && 
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Ród
) {

226 
√w_°©e
 = 
CacheSèã
::
Sh¨ed
;

227 
ˇches
[
ªmŸe
]->
	`ch™geSèã
(
£t
, 
èg
, 
CacheSèã
::
Sh¨ed
);

229 i‡(!
is_¥e„tch
) {

230 
°©s
.
Ÿhîˇche_ªads
++;

234 #ifde‡
DEBUG


235 
	`as£π
(
√w_°©e
 !
CacheSèã
::
InvÆid
);

238  
√w_°©e
;

239 
	}
}

241 
	gMu…iCacheSy°em
::
memAc˚ss
(
uöt64_t
 
addªss
, 
Ac˚ssTy≥
 
ac˚ssTy≥
, 
°d
::
¨øy
<,64> 
d©a
, 
tid
)

243 i‡(
	gdoAddrTøns
) {

244 
	gaddªss
 = 
vútToPhys
(
addªss
);

247 i‡(
	gac˚ssTy≥
 !
Ac˚ssTy≥
::
Pª„tch
) {

248 
°©s
.
ac˚s£s
++;

251 
	gloˇl
 = 
tidToDomaö
[
tid
];

252 
upd©ePageToDomaö
(
addªss
, 
loˇl
);

254 
uöt64_t
 
	g£t
 = (
addªss
 & 
£tMask
Ë>> 
£tShi·
;

255 
uöt64_t
 
	gèg
 = 
addªss
 & 
ègMask
;

256 
CacheSèã
 
	g°©e
 = 
ˇches
[
loˇl
]->
födTag
(
£t
, 
èg
);

257 
boﬁ
 
	ghô
 = (
°©e
 !
CacheSèã
::
InvÆid
);

259 i‡(
	gcou¡Compuls‹y
 && 
	gac˚ssTy≥
 !
Ac˚ssTy≥
::
Pª„tch
) {

260 
checkCompuls‹y
(
addªss
 & (~
löeMask
));

264 i‡(
	gac˚ssTy≥
 =
Ac˚ssTy≥
::
Wrôe
 && 
hô
) {

265 
ˇches
[
loˇl
]->
ch™geSèã
(
£t
, 
èg
, 
CacheSèã
::
Modifõd
);

266 
£tRemŸeSèãs
(
£t
, 
èg
, 
CacheSèã
::
InvÆid
, 
loˇl
);

269 i‡(
	ghô
) {

270 
	gˇches
[
loˇl
]->
upd©eLRU
(
£t
, 
èg
);

272 i‡(
	gac˚ssTy≥
 !
Ac˚ssTy≥
::
Pª„tch
) {

273 
°©s
.
hôs
++;

274 i‡(
	g¥e„tchî
) {

275 
	g°©s
.
	g¥e„tched
 +
¥e„tchî
->
¥e„tchHô
(
addªss
, 
tid
, 
d©a
, *
this
);

282 
CacheSèã
 
	gªmŸe_°©e
;

283 
	gªmŸe
 = 
checkRemŸeSèãs
(
£t
, 
èg
, 
ªmŸe_°©e
, 
loˇl
);

285 
uöt64_t
 
	gevi˘ed_èg
;

286 
boﬁ
 
	gwrôeback
 = 
ˇches
[
loˇl
]->
checkWrôeback
(
£t
, 
evi˘ed_èg
);

288 i‡(
	gwrôeback
) {

289 
evi˘Tøffic
(
£t
, 
evi˘ed_èg
, 
loˇl
);

292 
boﬁ
 
	gloˇl_åaffic
 = 
isLoˇl
(
addªss
, 
loˇl
);

293 
CacheSèã
 
	g√w_°©e
 = 
¥o˚ssMOESI
(
£t
, 
èg
, 
ªmŸe_°©e
, 
ac˚ssTy≥
,

294 
loˇl_åaffic
, 
loˇl
, 
ªmŸe
);

295 
	gˇches
[
loˇl
]->
ö£πLöe
(
£t
, 
èg
, 
√w_°©e
, 
d©a
);

297 i‡(
	gac˚ssTy≥
 =
Ac˚ssTy≥
::
Pª„tch
 && 
¥e„tchî
) {

298 
°©s
.
¥e„tched
 +
¥e„tchî
->
¥e„tchMiss
(
addªss
, 
tid
, 
d©a
, *
this
);

305 
	gMu…iCacheSy°em
::
	$upd©ePageToDomaö
(
uöt64_t
 
addªss
,

306 
curDomaö
)

308 
uöt64_t
 
∑ge
 = 
addªss
 & 
∑geMask
;

310 c⁄°áutÿ
ô
 = 
∑geToDomaö
.
	`föd
(
∑ge
);

311 if(
ô
 =
∑geToDomaö
.
	`íd
()) {

312 
∑geToDomaö
[
∑ge
] = 
curDomaö
;

314 
	}
}

316 
	gMu…iCacheSy°em
::
Mu…iCacheSy°em
(
°d
::
ve˘‹
<>& 
tid_to_domaö
,

317 
löe_size
, 
num_löes
, 
assoc
,

318 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
, 
boﬁ
 
cou¡_compuls‹y
 ,

319 
boﬁ
 
do_addr_å™s
 , 
num_domaös
) :

320 
Sy°em
(
löe_size
, 
num_löes
, 
assoc
, 
°d
::
move
(
¥e„tchî
),

321 
cou¡_compuls‹y
, 
do_addr_å™s
),

322 
	$tidToDomaö
(
tid_to_domaö
)

324 
ˇches
.
	`ª£rve
(
num_domaös
);

326 
i
=0; i<
num_domaös
; ++i) {

327 
ˇches
.
	`push_back
(
°d
::
make_unique
<
Cache
>(
num_löes
, 
assoc
));

329 
	}
}

331 
	gSögÀCacheSy°em
::
memAc˚ss
(
uöt64_t
 
addªss
, 
Ac˚ssTy≥
 
ac˚ssTy≥
, 
°d
::
¨øy
<,64> 
d©a
, 
tid
)

333 
boﬁ
 
	gis_¥e„tch
 = (
ac˚ssTy≥
 =
Ac˚ssTy≥
::
Pª„tch
);

335 i‡(
	gdoAddrTøns
) {

336 
	gaddªss
 = 
vútToPhys
(
addªss
);

339 i‡(!
	gis_¥e„tch
) {

340 
	g°©s
.
	gac˚s£s
++;

343 
uöt64_t
 
	g£t
 = (
addªss
 & 
£tMask
Ë>> 
£tShi·
;

344 
uöt64_t
 
	gèg
 = 
addªss
 & 
ègMask
;

345 
CacheSèã
 
	g°©e
 = 
ˇche
->
födTag
(
£t
, 
èg
);

346 
boﬁ
 
	ghô
 = (
°©e
 !
CacheSèã
::
InvÆid
);

348 i‡(
	gcou¡Compuls‹y
 && !
	gis_¥e„tch
) {

349 
checkCompuls‹y
(
addªss
 & ~
löeMask
);

353 i‡(
	gac˚ssTy≥
 =
Ac˚ssTy≥
::
Wrôe
 && 
hô
) {

354 
ˇche
->
ch™geSèã
(
£t
, 
èg
, 
CacheSèã
::
Modifõd
);

357 i‡(
	ghô
) {

358 
	gˇche
->
upd©eLRU
(
£t
, 
èg
);

360 i‡(!
	gis_¥e„tch
) {

361 
	g°©s
.
	ghôs
++;

362 i‡(
	g¥e„tchî
) {

363 
	g°©s
.
	g¥e„tched
 +
¥e„tchî
->
¥e„tchHô
(
addªss
, 
tid
, 
d©a
, *
this
);

370 
CacheSèã
 
	g√w_°©e
 = CacheSèã::
InvÆid
;

371 
uöt64_t
 
	gevi˘ed_èg
;

372 
boﬁ
 
	gwrôeback
 = 
ˇche
->
checkWrôeback
(
£t
, 
evi˘ed_èg
);

374 i‡(
	gwrôeback
) {

375 
	g°©s
.
	gloˇl_wrôes
++;

378 i‡(
	gac˚ssTy≥
 =
Ac˚ssTy≥
::
Ród
) {

379 
√w_°©e
 = 
CacheSèã
::
Ex˛usive
;

381 
	g√w_°©e
 = 
CacheSèã
::
Modifõd
;

384 i‡(!
	gis_¥e„tch
) {

385 
	g°©s
.
	gloˇl_ªads
++;

388 
	gˇche
->
ö£πLöe
(
£t
, 
èg
, 
√w_°©e
, 
d©a
);

389 i‡(!
	gis_¥e„tch
 && 
	g¥e„tchî
) {

390 
	g°©s
.
	g¥e„tched
 +
¥e„tchî
->
¥e„tchMiss
(
addªss
, 
tid
, 
d©a
, *
this
);

394 
	gSögÀCacheSy°em
::
	$¢≠shŸ
()

396 
ˇche
->
	`¢≠shŸ
();

397 
	}
}

399 
	gSögÀCacheSy°em
::
checkSimû¨ôy
(
°d
::
¨øy
<,64> 
löeD©a
, 
maskedBôs
, 
rw
)

401 
	gˇche
->
checkSimû¨ôy
(
löeD©a
, 
maskedBôs
, 
rw
);

404 
	gSögÀCacheSy°em
::
¥ötSimû¨ôy
(
bôs_ign‹ed
, 
°d
::
°rög
 
bíchm¨k
)

406 
ˇche
->
¥ötSimû¨ôy
(
bôs_ign‹ed
, 
bíchm¨k
);

409 
	gSögÀCacheSy°em
::
SögÀCacheSy°em
(

410 
löe_size
, 
num_löes
, 
assoc
,

411 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
,

412 
boﬁ
 
cou¡_compuls‹y
 ,

413 
boﬁ
 
do_addr_å™s
 ) :

414 
Sy°em
(
löe_size
, 
num_löes
, 
assoc
,

415 
°d
::
move
(
¥e„tchî
), 
cou¡_compuls‹y
, 
do_addr_å™s
),

416 
ˇche
(
°d
::
make_unique
<
Cache
>(
num_löes
, 
assoc
))

	@system.h

24 #¥agm®
⁄˚


26 
	~<ve˘‹
>

27 
	~<¨øy
>

28 
	~<un‹dîed_£t
>

29 
	~<un‹dîed_m≠
>

30 
	~<mem‹y
>

31 
	~<c°döt
>

33 
	~"misc.h
"

34 
	~"ˇche.h
"

35 
	~"¥e„tch.h
"

38 
	sSy°emSèts
 {

39 
uöt64_t
 
	mac˚s£s
{0};

40 
uöt64_t
 
	mhôs
{0};

41 
uöt64_t
 
	mloˇl_ªads
{0};

42 
uöt64_t
 
	mªmŸe_ªads
{0};

43 
uöt64_t
 
	mŸhîˇche_ªads
{0};

44 
uöt64_t
 
	mloˇl_wrôes
{0};

45 
uöt64_t
 
	mªmŸe_wrôes
{0};

46 
uöt64_t
 
	mcompuls‹y
{0};

47 
uöt64_t
 
	m¥e„tched
{0};

50 ˛as†
	cSy°em
 {

51 
	m¥Ÿe˘ed
:

52 
‰õnd
 
˛ass
 
Pª„tch
;

53 
‰õnd
 
˛ass
 
	mAdjPª„tch
;

54 
‰õnd
 
˛ass
 
	mSeqPª„tch
;

55 
	m°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
;

56 
uöt64_t
 
	m£tMask
;

57 
uöt64_t
 
	mègMask
;

58 
uöt64_t
 
	mlöeMask
;

59 
uöt32_t
 
	m£tShi·
;

62 
	m°d
::
un‹dîed_£t
<
uöt64_t
> 
£íLöes
;

64 
	m°d
::
un‹dîed_m≠
<
uöt64_t
, 
	muöt64_t
> 
	mvútToPhysM≠
;

66 
uöt64_t
 
	m√xtPage
{0};

67 
boﬁ
 
	gcou¡Compuls‹y
;

68 
boﬁ
 
	gdoAddrTøns
;

70 
uöt64_t
 
vútToPhys
(uöt64_à
addªss
);

71 
checkCompuls‹y
(
uöt64_t
 
löe
);

72 
	gpublic
:

73 
vútuÆ
 ~
Sy°em
() = ;

74 
Sy°em
(
löe_size
, 
num_löes
, 
assoc
,

75 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
, 
boﬁ
 
cou¡_compuls‹y
=
Ál£
,

76 
boﬁ
 
do_addr_å™s
=
Ál£
);

77 
vútuÆ
 
memAc˚ss
(
uöt64_t
 
addªss
, 
Ac˚ssTy≥
 
ty≥
, 
°d
::
¨øy
<,64> 
d©a
, 
tid
) = 0;

78 
Sy°emSèts
 
	g°©s
;

82 ˛as†
	cMu…iCacheSy°em
 : 
public
 
Sy°em
 {

83 
¥iv©e
:

85 
°d
::
un‹dîed_m≠
<
uöt64_t
, > 
	m∑geToDomaö
;

86 
	m°d
::
ve˘‹
<
°d
::
unique_±r
<
Cache
>> 
ˇches
;

87 
	m°d
::
ve˘‹
<>& 
tidToDomaö
;

89 
checkRemŸeSèãs
(
uöt64_t
 
£t
, uöt64_à
èg
,

90 
CacheSèã
& 
°©e
, 
loˇl
);

91 
upd©ePageToDomaö
(
uöt64_t
 
addªss
, 
curDomaö
);

92 
£tRemŸeSèãs
(
uöt64_t
 
£t
, uöt64_à
èg
,

93 
CacheSèã
 
°©e
, 
loˇl
);

94 
evi˘Tøffic
(
uöt64_t
 
£t
, uöt64_à
èg
,

95 
loˇl
);

96 
boﬁ
 
isLoˇl
(
uöt64_t
 
addªss
, 
loˇl
);

97 
CacheSèã
 
¥o˚ssMOESI
(
uöt64_t
 
£t
, uöt64_à
èg
,

98 
CacheSèã
 
ªmŸe_°©e
, 
Ac˚ssTy≥
 
ac˚ssTy≥
,

99 
boﬁ
 
loˇl_åaffic
, 
loˇl
, 
ªmŸe
);

100 
	mpublic
:

101 
Mu…iCacheSy°em
(
°d
::
ve˘‹
<>& 
tid_to_domaö
,

102 
löe_size
, 
num_löes
, 
assoc
,

103 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
, 
boﬁ
 
cou¡_compuls‹y
=
Ál£
,

104 
boﬁ
 
do_addr_å™s
=
Ál£
, 
num_domaös
=1);

106 
memAc˚ss
(
uöt64_t
 
addªss
, 
Ac˚ssTy≥
 
ty≥
, 
°d
::
¨øy
<,64> 
d©a
, 
tid
Ë
	movîride
;

111 ˛as†
	cSögÀCacheSy°em
 : 
public
 
Sy°em
 {

112 
public
:

113 
SögÀCacheSy°em
(
löe_size
, 
num_löes
, 
assoc
,

114 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tchî
, 
boﬁ
 
cou¡_compuls‹y
=
Ál£
,

115 
boﬁ
 
do_addr_å™s
=
Ál£
);

117 
memAc˚ss
(
uöt64_t
 
addªss
, 
Ac˚ssTy≥
 
ty≥
, 
°d
::
¨øy
<,64> 
d©a
, 
tid
Ë
	movîride
;

118 
¢≠shŸ
();

119 
checkSimû¨ôy
(
°d
::
¨øy
<,64> 
löeD©a
, 
maskedBôs
, 
rw
);

120 
¥ötSimû¨ôy
(
bôs_ign‹ed
, 
°d
::
°rög
 
bíchm¨k
);

121 
	m¥iv©e
:

122 
°d
::
unique_±r
<
Cache
> 
ˇche
;

	@tests/random.cpp

24 
	~<io°ªam
>

25 
	~<°rög
>

26 
	~<øndom
>

27 
	~<chr⁄o
>

29 
	~"sy°em.h
"

31 
usög
 
«me•a˚
 
	g°d
;

33 
	$ußge
() {

34 
cout
 << "Usage: ./random <# cacheÜines> <associativity ways> "

37 << " <# iãøti⁄s> <di°ributi⁄ 'unif‹m'|'n‹mÆ'> <di°ributi⁄Ñ™ge>" << 
ídl
;

38 
	}
}

40 
	sAc˚ssD©a
 {

41 
uöt64_t
 
	maddªss
;

42 
	mtid
;

43 
Ac˚ssTy≥
 
	mac˚ssTy≥
;

46 
	$maö
(
¨gc
, * 
¨gv
[]) {

47 i‡(
¨gc
 != 10) {

48 
	`ußge
();

52 
ˇche_löe_size
 = 64;

53 
ˇche_löes
 = 
	`°oi
(
¨gv
[1]);

54 
way_cou¡
 = 
	`°oi
(
¨gv
[2]);

55 
°rög
 
	`¥e„tchî_choi˚
(
¨gv
[3]);

56 
°rög
 
	`compuls‹y_choi˚
(
¨gv
[4]);

57 
num_ˇches
 = 
	`°oi
(
¨gv
[5]);

58 
num_thªads
 = 
	`°oi
(
¨gv
[6]);

59 
ôî©i⁄s
 = 
	`°oi
(
¨gv
[7]);

60 
°rög
 
	`di°ributi⁄_choi˚
(
¨gv
[8]);

61 
uöt64_t
 
ønge
 = 
	`°ouŒ
(
¨gv
[9]);

66 
ve˘‹
<> 
	`tid_m≠
(
num_thªads
);

67 
i
=0; i<
num_thªads
; ++i) {

68 
tid_m≠
[
i
] = i % 
num_ˇches
;

71 
boﬁ
 
compuls‹y
;

72 i‡(
compuls‹y_choi˚
 == "y") {

73 
compuls‹y
 = 
åue
;

74 } i‡(
compuls‹y_choi˚
 == "n") {

75 
compuls‹y
 = 
Ál£
;

77 
	`ußge
();

81 i‡(
di°ributi⁄_choi˚
 != "uniform" && distribution_choice != "normal") {

82 
	`ußge
();

86 
°d
::
unique_±r
<
Pª„tch
> 
¥e„tch
;

87 i‡(
¥e„tchî_choi˚
 == "none") {

88 
¥e„tch
 = 
nuŒ±r
;

89 } i‡(
¥e„tchî_choi˚
 == "adjacent") {

90 
¥e„tch
 = 
°d
::
make_unique
<
AdjPª„tch
>();

91 } i‡(
¥e„tchî_choi˚
 == "sequential") {

92 
¥e„tch
 = 
°d
::
make_unique
<
SeqPª„tch
>();

94 
	`ußge
();

98 
unique_±r
<
Sy°em
> 
sys
;

99 i‡(
num_ˇches
 == 1) {

100 
sys
 = 
make_unique
<
SögÀCacheSy°em
>(
ˇche_löe_size
, 
ˇche_löes
, 
way_cou¡
,

101 
°d
::
	`move
(
¥e„tch
),

102 
compuls‹y
, 
Ál£
);

104 
sys
 = 
make_unique
<
Mu…iCacheSy°em
>(
tid_m≠
, 
ˇche_löe_size
, 
ˇche_löes
, 
way_cou¡
,

105 
°d
::
	`move
(
¥e„tch
),

106 
compuls‹y
, 
Ál£
, 
num_ˇches
);

109 
¨øy
<
Ac˚ssD©a
, 2000> 
ac˚ss_buf„r
;

110 
deÁu…_øndom_ígöe
 
	`ígöe
(0);

111 
unif‹m_öt_di°ributi⁄
<> 
	`tid_gíî©‹
(0, 
num_thªads
);

112 
unif‹m_öt_di°ributi⁄
<> 
	`rw_gíî©‹
(0, 1);

113 
unif‹m_öt_di°ributi⁄
<
uöt64_t
> 
	`addr_unif‹m
(0, 
ønge
);

114 
n‹mÆ_di°ributi⁄
<> 
	`addr_n‹mÆ
(1000000000.0, ()
ønge
);

116 
chr⁄o
::
duøti⁄
<> 
run_time
;

118 
i
=0; i<
ôî©i⁄s
; ++i) {

119 
j
=0; j<2000; ++j) {

120 
ac˚ss_buf„r
[
j
].
ac˚ssTy≥
 = 
	`rw_gíî©‹
(
ígöe
) == 0 ?

121 
Ac˚ssTy≥
::
Ród
 :

122 
Ac˚ssTy≥
::
Wrôe
;

123 
ac˚ss_buf„r
[
j
].
tid
 = 
	`tid_gíî©‹
(
ígöe
);

124 i‡(
di°ributi⁄_choi˚
 == "uniform") {

125 
ac˚ss_buf„r
[
j
].
addªss
 = 
	`addr_unif‹m
(
ígöe
);

127 
ac˚ss_buf„r
[
j
].
addªss
 = (
uöt64_t
)
	`addr_n‹mÆ
(
ígöe
);

129 
ac˚ss_buf„r
[
j
].
addªss
 <<= 6;

132 autÿ
°¨t
 = 
chr⁄o
::
high_ªsﬁuti⁄_˛ock
::
	`now
();

133 
j
=0; j<2000; ++j) {

136 autÿ
íd
 = 
chr⁄o
::
high_ªsﬁuti⁄_˛ock
::
	`now
();

137 
run_time
 +
chr⁄o
::
duøti⁄_ˇ°
<chr⁄o::
duøti⁄
<>>(
íd
 - 
°¨t
);

140 
uöt64_t
 
ac˚s£s
 = 2000LLU*
ôî©i⁄s
;

141 
cout
 << "Executi⁄Åime: " << 
run_time
.
	`cou¡
(Ë<< 
ídl
;

142 
cout
 << "Ac˚s£s: " << 
ac˚s£s
 << 
ídl
;

143 
cout
 << "Hôs: " << 
sys
->
°©s
.
hôs
 << 
ídl
;

144 
cout
 << "Mis£s: " << 
ac˚s£s
 - 
sys
->
°©s
.
hôs
 << 
ídl
;

145 
cout
 << "Loˇ»ªads: " << 
sys
->
°©s
.
loˇl_ªads
 << 
ídl
;

146 
cout
 << "Loˇ»wrôes: " << 
sys
->
°©s
.
loˇl_wrôes
 << 
ídl
;

147 
cout
 << "RemŸêªads: " << 
sys
->
°©s
.
ªmŸe_ªads
 << 
ídl
;

148 
cout
 << "RemŸêwrôes: " << 
sys
->
°©s
.
ªmŸe_wrôes
 << 
ídl
;

149 
cout
 << "Othî-ˇchêªads: " << 
sys
->
°©s
.
Ÿhîˇche_ªads
 << 
ídl
;

150 
cout
 << "Compuls‹y Mis£s: " << 
sys
->
°©s
.
compuls‹y
 << 
ídl
;

151 
cout
 << "Pª„tched: " << 
sys
->
°©s
.
¥e„tched
 << 
ídl
;

154 
	}
}

	@tests/unit.cpp

24 
	~<io°ªam
>

26 
	~"sy°em.h
"

28 
	#CATCH_CONFIG_MAIN


	)

29 
	~"ã°s/ˇtch.hµ
"

31 
TEST_CASE
("Single cacheÅests", "[cache]") {

32 
	gˇche_löe_size
 = 64;

33 
	gˇche_löes
 = 128;

34 
	gway_cou¡
 = 4;

35 
boﬁ
 
	gcompuls‹y
 = 
Ál£
;

42 
	g°d
::
unique_±r
<
Sy°em
> 
sys
 = 
°d
::
make_unique
<
SögÀCacheSy°em
>(
ˇche_löe_size
,

43 
	gˇche_löes
, 
	gway_cou¡
,

44 
	gnuŒ±r
,

45 
	gcompuls‹y
);

47 
	g°d
::
¨øy
<,64> 
	gd©a
 = {0};

49 
SECTION
("Simple miss-hit sequence") {

50 
REQUIRE
(
sys
->
°©s
.
ac˚s£s
 == 0);

51 
REQUIRE
(
sys
->
°©s
.
hôs
 == 0);

52 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 0);

53 
REQUIRE
(
sys
->
°©s
.
loˇl_wrôes
 == 0);

55 
	gsys
->
memAc˚ss
(0x0000000000000000ULL, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

56 
REQUIRE
(
sys
->
°©s
.
ac˚s£s
 == 1);

57 
REQUIRE
(
sys
->
°©s
.
hôs
 == 0);

58 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 1);

60 
	gsys
->
memAc˚ss
(0x0000000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

61 
REQUIRE
(
sys
->
°©s
.
ac˚s£s
 == 2);

62 
REQUIRE
(
sys
->
°©s
.
hôs
 == 1);

63 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 1);

65 
SECTION
("Set fill") {

66 
	gsys
->
memAc˚ss
(0x0001000000000000ULL, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

67 
	gsys
->
memAc˚ss
(0x0002000000000000ULL, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

68 
	gsys
->
memAc˚ss
(0x0003000000000000ULL, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

70 
REQUIRE
(
sys
->
°©s
.
ac˚s£s
 == 5);

71 
REQUIRE
(
sys
->
°©s
.
hôs
 == 1);

72 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 4);

74 
SECTION
("Other sets fill") {

75 
uöt64_t
 
	gèg
 = 0x0001000000000000ULL;

77 
uöt64_t
 
	gi
 = 1; i < 32; ++i) {

78 
uöt64_t
 
	gaddr
 = 
èg
 | (
i
 << 6);

79 
	gsys
->
memAc˚ss
(
addr
, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

82 
REQUIRE
(
sys
->
°©s
.
ac˚s£s
 == 36);

83 
REQUIRE
(
sys
->
°©s
.
hôs
 == 1);

84 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 35);

87 
	gsys
->
memAc˚ss
(0x0000000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

88 
	gsys
->
memAc˚ss
(0x0001000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

89 
	gsys
->
memAc˚ss
(0x0002000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

90 
	gsys
->
memAc˚ss
(0x0003000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

91 
REQUIRE
(
sys
->
°©s
.
hôs
 == 5);

94 
SECTION
("Set hits") {

95 
	gsys
->
memAc˚ss
(0x0001000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

96 
	gsys
->
memAc˚ss
(0x0002000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

97 
	gsys
->
memAc˚ss
(0x0003000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

99 
REQUIRE
(
sys
->
°©s
.
ac˚s£s
 == 8);

100 
REQUIRE
(
sys
->
°©s
.
hôs
 == 4);

101 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 4);

104 
SECTION
("Evict") {

105 
	gsys
->
memAc˚ss
(0x0004000000000000ULL, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

106 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 5);

107 
REQUIRE
(
sys
->
°©s
.
hôs
 == 1);

109 
	gsys
->
memAc˚ss
(0x0000000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

110 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 6);

111 
REQUIRE
(
sys
->
°©s
.
hôs
 == 1);

114 
SECTION
("Evict LRU") {

115 
	gsys
->
memAc˚ss
(0x0000000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

116 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 4);

117 
REQUIRE
(
sys
->
°©s
.
hôs
 == 2);

119 
	gsys
->
memAc˚ss
(0x0004000000000000ULL, 
Ac˚ssTy≥
::
Wrôe
, 
d©a
, 0);

120 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 5);

121 
REQUIRE
(
sys
->
°©s
.
hôs
 == 2);

123 
	gsys
->
memAc˚ss
(0x0000000000000000ULL, 
Ac˚ssTy≥
::
Ród
, 
d©a
, 0);

124 
REQUIRE
(
sys
->
°©s
.
loˇl_ªads
 == 5);

125 
REQUIRE
(
sys
->
°©s
.
hôs
 == 3);

	@/aenao-99/karyofyl/zstr/src/zstr.hpp

9 #i‚de‡
__ZSTR_HPP


10 
	#__ZSTR_HPP


	)

12 
	~<ˇs£π
>

13 
	~<f°ªam
>

14 
	~<s°ªam
>

15 
	~<zlib.h
>

16 
	~"°ri˘_f°ªam.hµ
"

18 
«me•a˚
 
	gz°r


22 ˛as†
	cEx˚±i⁄


23 : 
public
 
°d
::
ex˚±i⁄


25 
public
:

26 
Ex˚±i⁄
(
z_°ªam
 * 
z°rm_p
, 
ªt
)

27 : 
_msg
("zlib: ")

29 
ªt
)

31 
Z_STREAM_ERROR
:

32 
_msg
 += "Z_STREAM_ERROR: ";

34 
	gZ_DATA_ERROR
:

35 
_msg
 += "Z_DATA_ERROR: ";

37 
	gZ_MEM_ERROR
:

38 
_msg
 += "Z_MEM_ERROR: ";

40 
	gZ_VERSION_ERROR
:

41 
_msg
 += "Z_VERSION_ERROR: ";

43 
	gZ_BUF_ERROR
:

44 
_msg
 += "Z_BUF_ERROR: ";

47 
°d
::
o°rög°ªam
 
oss
;

48 
	goss
 << 
	gªt
;

49 
	g_msg
 +"[" + 
oss
.
°r
() + "]: ";

52 
	g_msg
 +
z°rm_p
->
msg
;

54 
Ex˚±i⁄
(c⁄° 
°d
::
°rög
 
msg
Ë: 
_msg
(msg) {}

55 c⁄° * 
wh©
(Ëc⁄° 
n€x˚±
 {  
_msg
.
c_°r
(); }

56 
	g¥iv©e
:

57 
°d
::
°rög
 
_msg
;

60 
«me•a˚
 
	gdëaû


63 ˛as†
	cz_°ªam_wøµî


64 : 
public
 
z_°ªam


66 
public
:

67 
z_°ªam_wøµî
(
boﬁ
 
_is_öput
 = 
åue
, 
_Àvñ
 = 
Z_DEFAULT_COMPRESSION
)

68 : 
is_öput
(
_is_öput
)

70 
this
->
zÆloc
 = 
Z_NULL
;

71 
	gthis
->
	gz‰ì
 = 
Z_NULL
;

72 
	gthis
->
	g›aque
 = 
Z_NULL
;

73 
	gªt
;

74 i‡(
	gis_öput
)

76 
	gthis
->
	gavaû_ö
 = 0;

77 
	gthis
->
	g√xt_ö
 = 
Z_NULL
;

78 
	gªt
 = 
öÊ©eInô2
(
this
, 15+32);

82 
	gªt
 = 
deÊ©eInô2
(
this
, 
_Àvñ
, 
Z_DEFLATED
, 15+16, 8, 
Z_DEFAULT_STRATEGY
);

84 i‡(
	gªt
 !
Z_OK
Ë
throw
 
Ex˚±i⁄
(
this
, 
ªt
);

86 ~
z_°ªam_wøµî
()

88 i‡(
	gis_öput
)

90 
öÊ©eEnd
(
this
);

94 
deÊ©eEnd
(
this
);

97 
	g¥iv©e
:

98 
boﬁ
 
is_öput
;

103 ˛as†
	ci°ªambuf


104 : 
public
 
°d
::
°ªambuf


106 
public
:

107 
i°ªambuf
(
°d
::
°ªambuf
 * 
_sbuf_p
,

108 
°d
::
size_t
 
_buff_size
 = 
deÁu…_buff_size
, 
boﬁ
 
_auto_dëe˘
 = 
åue
)

109 : 
sbuf_p
(
_sbuf_p
),

110 
z°rm_p
(
nuŒ±r
),

111 
buff_size
(
_buff_size
),

112 
auto_dëe˘
(
_auto_dëe˘
),

113 
auto_dëe˘_run
(
Ál£
),

114 
is_ãxt
(
Ál£
)

116 
as£π
(
sbuf_p
);

117 
	gö_buff
 = 
√w
 [
buff_size
];

118 
	gö_buff_°¨t
 = 
ö_buff
;

119 
	gö_buff_íd
 = 
ö_buff
;

120 
	gout_buff
 = 
√w
 [
buff_size
];

121 
£tg
(
out_buff
, out_buff, out_buff);

124 
i°ªambuf
(c⁄° i°ªambu‡&Ë
dñëe
;

125 
i°ªambuf
(istreambuf &&) = ;

126 
	gi°ªambuf
 & 
	g›î©‹
 = (c⁄° 
i°ªambuf
 &Ë
dñëe
;

127 
	gi°ªambuf
 & 
	g›î©‹
 = (
i°ªambuf
 &&) = ;

129 
	gvútuÆ
 ~
i°ªambuf
()

131 
	gdñëe
 [] 
	gö_buff
;

132 
	gdñëe
 [] 
	gout_buff
;

133 i‡(
	gz°rm_p
Ë
dñëe
 zstrm_p;

136 
vútuÆ
 
	g°d
::
°ªambuf
::
öt_ty≥
 
undîÊow
()

138 i‡(
this
->
g±r
(Ë=this->
eg±r
())

141 * 
out_buff_‰ì_°¨t
 = 
out_buff
;

145 i‡(
	gö_buff_°¨t
 =
ö_buff_íd
)

148 
ö_buff_°¨t
 = 
ö_buff
;

149 
	g°d
::
°ªamsize
 
sz
 = 
sbuf_p
->
sgën
(
ö_buff
, 
buff_size
);

150 
	gö_buff_íd
 = 
ö_buff
 + 
sz
;

151 i‡(
	gö_buff_íd
 =
ö_buff_°¨t
) ;

154 i‡(
	gauto_dëe˘
 && ! 
	gauto_dëe˘_run
)

156 
	gauto_dëe˘_run
 = 
åue
;

157 
	gb0
 = *
ªöãΩªt_ˇ°
< * >(
ö_buff_°¨t
);

158 
	gb1
 = *
ªöãΩªt_ˇ°
< * >(
ö_buff_°¨t
 + 1);

162 
	gis_ãxt
 = ! (
ö_buff_°¨t
 + 2 <
ö_buff_íd


163 && ((
b0
 =0x1F && 
b1
 == 0x8B)

164 || (
b0
 =0x78 && (
b1
 == 0x01

165 || 
b1
 == 0x9C

166 || 
b1
 == 0xDA))));

168 i‡(
	gis_ãxt
)

171 
as£π
(
ö_buff_°¨t
 =
ö_buff
);

172 
	g°d
::
sw≠
(
ö_buff
, 
out_buff
);

173 
	gout_buff_‰ì_°¨t
 = 
ö_buff_íd
;

174 
	gö_buff_°¨t
 = 
ö_buff
;

175 
	gö_buff_íd
 = 
ö_buff
;

180 i‡(! 
	gz°rm_p
Ëz°rm_∞
√w
 
dëaû
::
z_°ªam_wøµî
(
åue
);

181 
	gz°rm_p
->
	g√xt_ö
 = 
ªöãΩªt_ˇ°
< 
de˛ty≥
(
z°rm_p
->
√xt_ö
Ë>(
ö_buff_°¨t
);

182 
	gz°rm_p
->
	gavaû_ö
 = 
ö_buff_íd
 - 
ö_buff_°¨t
;

183 
	gz°rm_p
->
	g√xt_out
 = 
ªöãΩªt_ˇ°
< 
de˛ty≥
(
z°rm_p
->
√xt_out
Ë>(
out_buff_‰ì_°¨t
);

184 
	gz°rm_p
->
	gavaû_out
 = (
out_buff
 + 
buff_size
Ë- 
out_buff_‰ì_°¨t
;

185 
	gªt
 = 
öÊ©e
(
z°rm_p
, 
Z_NO_FLUSH
);

187 i‡(
	gªt
 !
Z_OK
 && 
ªt
 !
Z_STREAM_END
Ë
throw
 
Ex˚±i⁄
(
z°rm_p
,Ñet);

189 
	gö_buff_°¨t
 = 
ªöãΩªt_ˇ°
< 
de˛ty≥
(
ö_buff_°¨t
Ë>(
z°rm_p
->
√xt_ö
);

190 
	gö_buff_íd
 = 
ö_buff_°¨t
 + 
z°rm_p
->
avaû_ö
;

191 
	gout_buff_‰ì_°¨t
 = 
ªöãΩªt_ˇ°
< 
de˛ty≥
(
out_buff_‰ì_°¨t
Ë>(
z°rm_p
->
√xt_out
);

192 
as£π
(
out_buff_‰ì_°¨t
 + 
z°rm_p
->
avaû_out
 =
out_buff
 + 
buff_size
);

194 i‡(
	gªt
 =
Z_STREAM_END
)

196 
dñëe
 
z°rm_p
;

197 
	gz°rm_p
 = 
nuŒ±r
;

200 } 
	gout_buff_‰ì_°¨t
 =
out_buff
);

204 
	gthis
->
£tg
(
out_buff
, out_buff, 
out_buff_‰ì_°¨t
);

206  
	gthis
->
g±r
(Ë=
this
->
eg±r
()

207 ? 
åaôs_ty≥
::
eof
()

208 : 
åaôs_ty≥
::
to_öt_ty≥
(*
this
->
g±r
());

210 
	g¥iv©e
:

211 
°d
::
°ªambuf
 * 
sbuf_p
;

212 * 
	gö_buff
;

213 * 
	gö_buff_°¨t
;

214 * 
	gö_buff_íd
;

215 * 
	gout_buff
;

216 
	gdëaû
::
z_°ªam_wøµî
 * 
z°rm_p
;

217 
	g°d
::
size_t
 
buff_size
;

218 
boﬁ
 
	gauto_dëe˘
;

219 
boﬁ
 
	gauto_dëe˘_run
;

220 
boﬁ
 
	gis_ãxt
;

222 c⁄° 
	g°d
::
size_t
 
deÁu…_buff_size
 = (
°d
::size_t)1 << 20;

225 ˛as†
	co°ªambuf


226 : 
public
 
°d
::
°ªambuf


228 
public
:

229 
o°ªambuf
(
°d
::
°ªambuf
 * 
_sbuf_p
,

230 
°d
::
size_t
 
_buff_size
 = 
deÁu…_buff_size
, 
_Àvñ
 = 
Z_DEFAULT_COMPRESSION
)

231 : 
sbuf_p
(
_sbuf_p
),

232 
z°rm_p
(
√w
 
dëaû
::
z_°ªam_wøµî
(
Ál£
, 
_Àvñ
)),

233 
buff_size
(
_buff_size
)

235 
as£π
(
sbuf_p
);

236 
	gö_buff
 = 
√w
 [
buff_size
];

237 
	gout_buff
 = 
√w
 [
buff_size
];

238 
£ç
(
ö_buff
, in_buf‡+ 
buff_size
);

241 
o°ªambuf
(c⁄° o°ªambu‡&Ë
dñëe
;

242 
o°ªambuf
(ostreambuf &&) = ;

243 
	go°ªambuf
 & 
	g›î©‹
 = (c⁄° 
o°ªambuf
 &Ë
dñëe
;

244 
	go°ªambuf
 & 
	g›î©‹
 = (
o°ªambuf
 &&) = ;

246 
deÊ©e_lo›
(
Êush
)

248 
	gåue
)

250 
	gz°rm_p
->
	g√xt_out
 = 
ªöãΩªt_ˇ°
< 
de˛ty≥
(
z°rm_p
->
√xt_out
Ë>(
out_buff
);

251 
	gz°rm_p
->
	gavaû_out
 = 
buff_size
;

252 
	gªt
 = 
deÊ©e
(
z°rm_p
, 
Êush
);

253 i‡(
	gªt
 !
Z_OK
 && 
ªt
 !
Z_STREAM_END
 &&Ñë !
Z_BUF_ERROR
Ë
throw
 
Ex˚±i⁄
(
z°rm_p
,Ñet);

254 
	g°d
::
°ªamsize
 
sz
 = 
sbuf_p
->
•uä
(
out_buff
, 
ªöãΩªt_ˇ°
< 
de˛ty≥
(out_buffË>(
z°rm_p
->
√xt_out
) - out_buff);

255 i‡(
	gsz
 !
ªöãΩªt_ˇ°
< 
de˛ty≥
(
out_buff
Ë>(
z°rm_p
->
√xt_out
) - out_buff)

260 i‡(
	gªt
 =
Z_STREAM_END
 || 
ªt
 =
Z_BUF_ERROR
 || 
sz
 == 0)

268 
	gvútuÆ
 ~
o°ªambuf
()

278 
sync
();

279 
	gdñëe
 [] 
	gö_buff
;

280 
	gdñëe
 [] 
	gout_buff
;

281 
dñëe
 
	gz°rm_p
;

283 
vútuÆ
 
	g°d
::
°ªambuf
::
öt_ty≥
 
ovîÊow
(
°d
::°ªambuf::öt_ty≥ 
c
 = 
åaôs_ty≥
::
eof
())

285 
z°rm_p
->
√xt_ö
 = 
ªöãΩªt_ˇ°
< 
de˛ty≥
(z°rm_p->√xt_öË>(
pba£
());

286 
	gz°rm_p
->
	gavaû_ö
 = 
µå
(Ë- 
pba£
();

287 
	gz°rm_p
->
	gavaû_ö
 > 0)

289 
	gr
 = 
deÊ©e_lo›
(
Z_NO_FLUSH
);

290 i‡(
	gr
 != 0)

292 
£ç
(
nuŒ±r
,Çullptr);

293  
	gåaôs_ty≥
::
eof
();

296 
£ç
(
ö_buff
, in_buf‡+ 
buff_size
);

297  
	gåaôs_ty≥
::
eq_öt_ty≥
(
c
, 
åaôs_ty≥
::
eof
()Ë?Åøôs_ty≥::eof(Ë: 
•utc
(c);

299 
vútuÆ
 
sync
()

302 
ovîÊow
();

303 i‡(! 
µå
())  -1;

305 
	gz°rm_p
->
	g√xt_ö
 = 
nuŒ±r
;

306 
	gz°rm_p
->
	gavaû_ö
 = 0;

307 i‡(
deÊ©e_lo›
(
Z_FINISH
) != 0)  -1;

308 
deÊ©eRe£t
(
z°rm_p
);

311 
	g¥iv©e
:

312 
°d
::
°ªambuf
 * 
sbuf_p
;

313 * 
	gö_buff
;

314 * 
	gout_buff
;

315 
	gdëaû
::
z_°ªam_wøµî
 * 
z°rm_p
;

316 
	g°d
::
size_t
 
buff_size
;

318 c⁄° 
	g°d
::
size_t
 
deÁu…_buff_size
 = (
°d
::size_t)1 << 20;

321 ˛as†
	ci°ªam


322 : 
public
 
°d
::
i°ªam


324 
public
:

325 
i°ªam
(
°d
::i°ªam & 
is
)

326 : 
°d
::
i°ªam
(
√w
 
i°ªambuf
(
is
.
rdbuf
()))

328 
ex˚±i⁄s
(
°d
::
ios_ba£
::
badbô
);

330 
ex∂icô
 
i°ªam
(
°d
::
°ªambuf
 * 
sbuf_p
)

331 : 
°d
::
i°ªam
(
√w
 
i°ªambuf
(
sbuf_p
))

333 
ex˚±i⁄s
(
°d
::
ios_ba£
::
badbô
);

335 
	gvútuÆ
 ~
i°ªam
()

337 
dñëe
 
rdbuf
();

341 ˛as†
	co°ªam


342 : 
public
 
°d
::
o°ªam


344 
public
:

345 
o°ªam
(
°d
::o°ªam & 
os
)

346 : 
°d
::
o°ªam
(
√w
 
o°ªambuf
(
os
.
rdbuf
()))

348 
ex˚±i⁄s
(
°d
::
ios_ba£
::
badbô
);

350 
ex∂icô
 
o°ªam
(
°d
::
°ªambuf
 * 
sbuf_p
)

351 : 
°d
::
o°ªam
(
√w
 
o°ªambuf
(
sbuf_p
))

353 
ex˚±i⁄s
(
°d
::
ios_ba£
::
badbô
);

355 
	gvútuÆ
 ~
o°ªam
()

357 
dñëe
 
rdbuf
();

361 
«me•a˚
 
	gdëaû


364 
	gãm∂©e
 < 
ty≥«me
 
	gFSåóm_Ty≥
 >

365 
	s°ri˘_f°ªam_hﬁdî


367 
°ri˘_f°ªam_hﬁdî
(c⁄° 
°d
::
°rög
& 
fûíame
, std::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
)

368 : 
_fs
(
fûíame
, 
mode
)

370 
FSåóm_Ty≥
 
	g_fs
;

375 
˛ass
 
	gif°ªam


376 : 
¥iv©e
 
dëaû
::
°ri˘_f°ªam_hﬁdî
< 
°ri˘_f°ªam
::
if°ªam
 >,

377 
public
 
	g°d
::
i°ªam


379 
public
:

380 
ex∂icô
 
if°ªam
(c⁄° 
°d
::
°rög
& 
fûíame
, std::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
)

381 : 
dëaû
::
°ri˘_f°ªam_hﬁdî
< 
°ri˘_f°ªam
::
if°ªam
 >(
fûíame
, 
	gmode
),

382 
	g°d
::
i°ªam
(
√w
 
i°ªambuf
(
_fs
.
rdbuf
()))

384 
ex˚±i⁄s
(
°d
::
ios_ba£
::
badbô
);

386 
	gvútuÆ
 ~
if°ªam
()

388 i‡(
rdbuf
()Ë
dñëe
Ñdbuf();

392 
˛ass
 
	gof°ªam


393 : 
¥iv©e
 
dëaû
::
°ri˘_f°ªam_hﬁdî
< 
°ri˘_f°ªam
::
of°ªam
 >,

394 
public
 
	g°d
::
o°ªam


396 
public
:

397 
ex∂icô
 
of°ªam
(c⁄° 
°d
::
°rög
& 
fûíame
, std::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
out
)

398 : 
dëaû
::
°ri˘_f°ªam_hﬁdî
< 
°ri˘_f°ªam
::
of°ªam
 >(
fûíame
, 
	gmode
 | 
	g°d
::
ios_ba£
::
bö¨y
),

399 
	g°d
::
o°ªam
(
√w
 
o°ªambuf
(
_fs
.
rdbuf
()))

401 
ex˚±i⁄s
(
°d
::
ios_ba£
::
badbô
);

403 
	gvútuÆ
 ~
of°ªam
()

405 i‡(
rdbuf
()Ë
dñëe
Ñdbuf();

	@tests/catch.hpp

11 #i‚de‡
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED


12 
	#TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED


	)

16 
	#CATCH_VERSION_MAJOR
 2

	)

17 
	#CATCH_VERSION_MINOR
 3

	)

18 
	#CATCH_VERSION_PATCH
 0

	)

20 #ifde‡
__˛™g__


21 #¥agm®
˛™g
 
sy°em_hódî


22 #ñi‡
deföed
 
__GNUC__


23 #¥agm®
GCC
 
sy°em_hódî


28 #ifde‡
__˛™g__


29 #ifde‡
__ICC


30 #¥agm®
w¨nög
(
push
)

31 #¥agm®
w¨nög
(
dißbÀ
: 161 1682)

33 #¥agm®
˛™g
 
dügno°ic
 
push


34 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

35 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wswitch-enum"

36 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wcovered-switch-default"

38 #ñi‡
deföed
 
__GNUC__


42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wparentheses"

43 #¥agm®
GCC
 
dügno°ic
 
push


44 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-variable"

45 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpadded"

48 #i‡
deföed
(
CATCH_CONFIG_MAIN
Ë|| deföed(
CATCH_CONFIG_RUNNER
)

49 
	#CATCH_IMPL


	)

50 
	#CATCH_CONFIG_ALL_PARTS


	)

55 #i‡
deföed
(
CATCH_CONFIG_ALL_PARTS
)

56 
	#CATCH_CONFIG_EXTERNAL_INTERFACES


	)

57 #i‡
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

58 #unde‡
CATCH_CONFIG_DISABLE_MATCHERS


60 #i‡!
deföed
(
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
)

61 
	#CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER


	)

65 #i‡!
deföed
(
CATCH_CONFIG_IMPL_ONLY
)

68 #ifde‡
__APPLE__


69 
	~<T¨gëC⁄dôi⁄Æs.h
>

70 #i‡
TARGET_OS_OSX
 == 1

71 
	#CATCH_PLATFORM_MAC


	)

72 #ñi‡
TARGET_OS_IPHONE
 == 1

73 
	#CATCH_PLATFORM_IPHONE


	)

76 #ñi‡
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
)

77 
	#CATCH_PLATFORM_LINUX


	)

79 #ñi‡
deföed
(
WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
_WIN32
Ë|| deföed(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

80 
	#CATCH_PLATFORM_WINDOWS


	)

85 #ifde‡
CATCH_IMPL


86 #i‚de‡
CLARA_CONFIG_MAIN


87 
	#CLARA_CONFIG_MAIN_NOT_DEFINED


	)

88 
	#CLARA_CONFIG_MAIN


	)

94 
«me•a˚
 
	gC©ch
 {

95 
∫gSìd
();

121 #ifde‡
__˝lu•lus


123 #i‡
__˝lu•lus
 >= 201402L

124 
	#CATCH_CPP14_OR_GREATER


	)

127 #i‡
__˝lu•lus
 >= 201703L

128 
	#CATCH_CPP17_OR_GREATER


	)

133 #i‡
deföed
(
CATCH_CPP17_OR_GREATER
)

134 
	#CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS


	)

137 #ifde‡
__˛™g__


139 
	#CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

140 
	`_Pøgma
( "clang diagnosticÖush" ) \

141 
	`_Pøgma
( "clang diagnostic ignored \"-Wexit-time-destructors\"" ) \

142 
	`_Pøgma
–"˛™g dügno°i¯ign‹ed \"-WglobÆ-c⁄°ru˘‹s\"")

	)

143 
	#CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 \

144 
	`_Pøgma
–"˛™g dügno°i¯p›" )

	)

146 
	#CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
 \

147 
	`_Pøgma
( "clang diagnosticÖush" ) \

148 
	`_Pøgma
–"˛™g dügno°i¯ign‹ed \"-W∑ª¡he£s\"" )

	)

149 
	#CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS
 \

150 
	`_Pøgma
–"˛™g dügno°i¯p›" )

	)

152 
	#CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS
 \

153 
	`_Pøgma
( "clang diagnosticÖush" ) \

154 
	`_Pøgma
–"˛™g dügno°i¯ign‹ed \"-Wunu£d-v¨übÀ\"" )

	)

155 
	#CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS
 \

156 
	`_Pøgma
–"˛™g dügno°i¯p›" )

	)

162 #i‡!
deföed
(
CATCH_PLATFORM_WINDOWS
)

163 
	#CATCH_INTERNAL_CONFIG_POSIX_SIGNALS


	)

168 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__QNX__
Ë|| deföed(
__EMSCRIPTEN__
Ë|| deföed(
__DJGPP__
)

169 
	#CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS


	)

172 #ifde‡
__OS400__


173 
	#CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS


	)

174 
	#CATCH_CONFIG_COLOUR_NONE


	)

179 #i‡
deföed
(
__ANDROID__
)

180 
	#CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING


	)

185 #i‡
deföed
(
__MINGW32__
)

186 
	#CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH


	)

191 #i‡
deföed
(
__ORBIS__
)

192 
	#CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE


	)

197 #ifde‡
__CYGWIN__


201 
	#_BSD_SOURCE


	)

207 #ifde‡
_MSC_VER


209 #i‡
_MSC_VER
 >= 1900

210 
	#CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS


	)

215 #i‡
deföed
(
WINAPI_FAMILY
Ë&& (WINAPI_FAMILY =
WINAPI_FAMILY_APP
)

216 
	#CATCH_CONFIG_COLOUR_NONE


	)

218 
	#CATCH_INTERNAL_CONFIG_WINDOWS_SEH


	)

226 #ifde‡
__DJGPP__


227 
	#CATCH_INTERNAL_CONFIG_NO_WCHAR


	)

237 #i‡–!
deföed
(
__JETBRAINS_IDE__
) || __JETBRAINS_IDE__ >= 20170300L )

238 
	#CATCH_INTERNAL_CONFIG_COUNTER


	)

241 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_COUNTER
Ë&& !deföed(
CATCH_CONFIG_NO_COUNTER
Ë&& !deföed(
CATCH_CONFIG_COUNTER
)

242 
	#CATCH_CONFIG_COUNTER


	)

244 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_WINDOWS_SEH
Ë&& !deföed(
CATCH_CONFIG_NO_WINDOWS_SEH
Ë&& !deföed(
CATCH_CONFIG_WINDOWS_SEH
Ë&& !deföed(
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH
)

245 
	#CATCH_CONFIG_WINDOWS_SEH


	)

248 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_POSIX_SIGNALS
Ë&& !deföed(
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS
Ë&& !deföed(
CATCH_CONFIG_NO_POSIX_SIGNALS
Ë&& !deföed(
CATCH_CONFIG_POSIX_SIGNALS
)

249 
	#CATCH_CONFIG_POSIX_SIGNALS


	)

252 #i‡!
deföed
(
CATCH_INTERNAL_CONFIG_NO_WCHAR
Ë&& !deföed(
CATCH_CONFIG_NO_WCHAR
Ë&& !deföed(
CATCH_CONFIG_WCHAR
)

253 
	#CATCH_CONFIG_WCHAR


	)

256 #i‡!
deföed
(
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING
Ë&& !deföed(
CATCH_CONFIG_NO_CPP11_TO_STRING
Ë&& !deföed(
CATCH_CONFIG_CPP11_TO_STRING
)

257 
	#CATCH_CONFIG_CPP11_TO_STRING


	)

260 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
Ë&& !deföed(
CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS
Ë&& !deföed(
CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
)

261 
	#CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS


	)

264 #i‡
deföed
(
CATCH_CONFIG_EXPERIMENTAL_REDIRECT
)

265 
	#CATCH_INTERNAL_CONFIG_NEW_CAPTURE


	)

268 #i‡
deföed
(
CATCH_INTERNAL_CONFIG_NEW_CAPTURE
Ë&& !deföed(
CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE
Ë&& !deföed(
CATCH_CONFIG_NO_NEW_CAPTURE
Ë&& !deföed(
CATCH_CONFIG_NEW_CAPTURE
)

269 
	#CATCH_CONFIG_NEW_CAPTURE


	)

272 #i‡!
deföed
(
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
)

273 
	#CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS


	)

274 
	#CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS


	)

276 #i‡!
deföed
(
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
)

277 
	#CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS


	)

278 
	#CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS


	)

280 #i‡!
deföed
(
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS
)

281 
	#CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS


	)

282 
	#CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS


	)

286 
	#INTERNAL_CATCH_UNIQUE_NAME_LINE2
–
«me
, 
löe
 )Çame##
	)
line

287 
	#INTERNAL_CATCH_UNIQUE_NAME_LINE
–
«me
, 
löe
 ) 
	`INTERNAL_CATCH_UNIQUE_NAME_LINE2
–«me,Üöê)

	)

288 #ifde‡
CATCH_CONFIG_COUNTER


289 
	#INTERNAL_CATCH_UNIQUE_NAME
–
«me
 ) 
	`INTERNAL_CATCH_UNIQUE_NAME_LINE
–«me, 
__COUNTER__
 )

	)

291 
	#INTERNAL_CATCH_UNIQUE_NAME
–
«me
 ) 
	`INTERNAL_CATCH_UNIQUE_NAME_LINE
–«me, 
__LINE__
 )

	)

294 
	~<iosfwd
>

295 
	~<°rög
>

296 
	~<c°döt
>

298 
«me•a˚
 
	gC©ch
 {

300 
	sCa£Sísôive
 { 
	eChoi˚
 {

301 
	gYes
,

302 
	gNo


305 ˛as†
	cN⁄C›yabÀ
 {

306 
N⁄C›yabÀ
–N⁄C›yabÀ c⁄°& ) = 
dñëe
;

307 
N⁄C›yabÀ
–N⁄C›yabÀ && ) = 
dñëe
;

308 
	gN⁄C›yabÀ
& 
	g›î©‹
 = ( 
N⁄C›yabÀ
 c⁄°& ) = 
dñëe
;

309 
	gN⁄C›yabÀ
& 
	g›î©‹
 = ( 
N⁄C›yabÀ
 && ) = 
dñëe
;

311 
	g¥Ÿe˘ed
:

312 
N⁄C›yabÀ
();

313 
	gvútuÆ
 ~
N⁄C›yabÀ
();

316 
	sSour˚LöeInfo
 {

318 
Sour˚LöeInfo
(Ë
dñëe
;

319 
Sour˚LöeInfo
–c⁄°* 
_fûe
, 
°d
::
size_t
 
_löe
 ) 
n€x˚±


320 : 
fûe
–
_fûe
 ),

321 
löe
–
_löe
 )

324 
Sour˚LöeInfo
–Sour˚LöeInfÿc⁄°& 
Ÿhî
 ) = ;

325 
Sour˚LöeInfo
( SourceLineInfo && ) = ;

326 
	gSour˚LöeInfo
& 
	g›î©‹
 = ( 
Sour˚LöeInfo
 const& ) = ;

327 
	gSour˚LöeInfo
& 
	g›î©‹
 = ( 
Sour˚LöeInfo
 && ) = ;

329 
boﬁ
 
em±y
(Ëc⁄° 
	gn€x˚±
;

330 
boﬁ
 
	g›î©‹
 =–
Sour˚LöeInfo
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
;

331 
boﬁ
 
	g›î©‹
 < ( 
Sour˚LöeInfo
 c⁄°& 
	gŸhî
 ) c⁄° 
	gn€x˚±
;

333 c⁄°* 
	gfûe
;

334 
	g°d
::
size_t
 
löe
;

337 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Sour˚LöeInfo
 c⁄°& 
	göfo
 );

343 
	sSåómEndSt›
 {

344 
	g°d
::
°rög
 
›î©‹
+() const;

346 
	gãm∂©e
<
ty≥«me
 
	gT
>

347 
T
 c⁄°& 
	g›î©‹
 + ( T c⁄°& 
	gvÆue
, 
	gSåómEndSt›
 ) {

348  
	gvÆue
;

352 
	#CATCH_INTERNAL_LINEINFO
 \

353 ::
C©ch
::
	`Sour˚LöeInfo
–
__FILE__
, 
°©ic_ˇ°
<
°d
::
size_t
>–
__LINE__
 ) )

	)

356 
«me•a˚
 
	gC©ch
 {

358 
	sRegi°ørF‹TagAlü£s
 {

359 
Regi°ørF‹TagAlü£s
–c⁄°* 
Æüs
, c⁄°* 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

364 
	#CATCH_REGISTER_TAG_ALIAS
–
Æüs
, 
•ec
 ) \

365 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

366 
«me•a˚
{ 
C©ch
::
Regi°ørF‹TagAlü£s
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
AutoRegi°îTagAlüs
 )–
Æüs
, 
•ec
, 
CATCH_INTERNAL_LINEINFO
 ); } \

367 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS


	)

374 
	~<ve˘‹
>

375 
	~<mem‹y
>

377 
«me•a˚
 
	gC©ch
 {

379 
˛ass
 
	gTe°S≥c
;

381 
	sITe°Invokî
 {

382 
vútuÆ
 
övoke
 () const = 0;

383 
	gvútuÆ
 ~
ITe°Invokî
();

386 
usög
 
	gITe°Ca£På
 = 
°d
::
sh¨ed_±r
<
ITe°Invokî
>;

388 
˛ass
 
	gTe°Ca£
;

389 
	gIC⁄fig
;

391 
	sITe°Ca£Regi°ry
 {

392 
	gvútuÆ
 ~
ITe°Ca£Regi°ry
();

393 
vútuÆ
 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°s
() const = 0;

394 
vútuÆ
 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) const = 0;

397 
boﬁ
 
m©chTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 );

398 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãrTe°s
–
°d
::ve˘‹<Te°Ca£> c⁄°& 
ã°Ca£s
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 );

399 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°Ca£sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 );

406 
	~<c°ddef
>

407 
	~<°rög
>

408 
	~<iosfwd
>

410 
«me•a˚
 
	gC©ch
 {

412 
˛ass
 
	gSåögD©a
;

421 ˛as†
	cSåögRef
 {

422 
	gpublic
:

423 
usög
 
size_ty≥
 = 
°d
::
size_t
;

425 
	g¥iv©e
:

426 
‰õnd
 
SåögRefTe°Ac˚ss
;

428 c⁄°* 
	gm_°¨t
;

429 
size_ty≥
 
	gm_size
;

431 * 
	gm_d©a
 = 
nuŒ±r
;

433 
èkeOw√rshù
();

435 
c⁄°ex¥
 c⁄°* c⁄° 
	gs_em±y
 = "";

437 
	gpublic
:

438 
SåögRef
(Ë
n€x˚±


439 : 
SåögRef
–
s_em±y
, 0 )

442 
SåögRef
–SåögRe‡c⁄°& 
Ÿhî
 ) 
	gn€x˚±


443 : 
m_°¨t
–
Ÿhî
.m_start ),

444 
m_size
–
Ÿhî
.m_size )

447 
SåögRef
–SåögRef&& 
Ÿhî
 ) 
	gn€x˚±


448 : 
m_°¨t
–
Ÿhî
.m_start ),

449 
m_size
–
Ÿhî
.m_size ),

450 
m_d©a
–
Ÿhî
.m_data )

452 
	gŸhî
.
	gm_d©a
 = 
nuŒ±r
;

455 
SåögRef
–c⁄°* 
øwCh¨s
 ) 
	gn€x˚±
;

457 
SåögRef
–c⁄°* 
øwCh¨s
, 
size_ty≥
 
size
 ) 
	gn€x˚±


458 : 
m_°¨t
–
øwCh¨s
 ),

459 
m_size
–
size
 )

462 
SåögRef
–
°d
::
°rög
 c⁄°& 
°dSåög
 ) 
n€x˚±


463 : 
m_°¨t
–
°dSåög
.
c_°r
() ),

464 
m_size
–
°dSåög
.
size
() )

467 ~
SåögRef
(Ë
	gn€x˚±
 {

468 
	gdñëe
[] 
	gm_d©a
;

471 autÿ
	g›î©‹
 = ( 
SåögRef
 c⁄° &
Ÿhî
 ) 
n€x˚±
 -> StringRef& {

472 
dñëe
[] 
m_d©a
;

473 
	gm_d©a
 = 
nuŒ±r
;

474 
	gm_°¨t
 = 
Ÿhî
.
m_°¨t
;

475 
	gm_size
 = 
Ÿhî
.
m_size
;

476  *
	gthis
;

479 
›î©‹
 
	g°d
::
°rög
() const;

481 
sw≠
–
SåögRef
& 
Ÿhî
 ) 
	gn€x˚±
;

483 
	gpublic
:

484 autÿ
›î©‹
 =–
SåögRef
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
 -> 
boﬁ
;

485 autÿ
	g›î©‹
 !–
SåögRef
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
 -> 
boﬁ
;

487 autÿ
	g›î©‹
[] ( 
size_ty≥
 
	gödex
 ) c⁄° 
	gn€x˚±
 -> ;

489 
	gpublic
:

490 autÿ
em±y
(Ëc⁄° 
n€x˚±
 -> 
boﬁ
 {

491  
m_size
 == 0;

493 autÿ
size
(Ëc⁄° 
	gn€x˚±
 -> 
	gsize_ty≥
 {

494  
	gm_size
;

497 autÿ
numbîOfCh¨a˘îs
(Ëc⁄° 
	gn€x˚±
 -> 
	gsize_ty≥
;

498 autÿ
c_°r
() const -> const*;

500 
	gpublic
:

501 autÿ
sub°r
–
size_ty≥
 
°¨t
, size_ty≥ 
size
 ) c⁄° 
	gn€x˚±
 -> 
	gSåögRef
;

505 autÿ
cuºítD©a
(Ëc⁄° 
	gn€x˚±
 -> const*;

507 
	g¥iv©e
:

508 autÿ
isOw√d
(Ëc⁄° 
n€x˚±
 -> 
boﬁ
;

509 autÿ
isSub°rög
(Ëc⁄° 
	gn€x˚±
 -> 
	gboﬁ
;

512 autÿ
	g›î©‹
 + ( 
SåögRef
 c⁄°& 
	glhs
, SåögRe‡c⁄°& 
	grhs
 ) -> 
	g°d
::
°rög
;

513 autÿ
	g›î©‹
 + ( 
SåögRef
 c⁄°& 
	glhs
, c⁄°* 
	grhs
 ) -> 
	g°d
::
°rög
;

514 autÿ
	g›î©‹
 + ( c⁄°* 
	glhs
, 
SåögRef
 c⁄°& 
	grhs
 ) -> 
	g°d
::
°rög
;

516 autÿ
	g›î©‹
 +–
°d
::
°rög
& 
lhs
, 
SåögRef
 c⁄°& 
	g§
 ) -> 
	g°d
::string&;

517 autÿ
	g›î©‹
 << ( 
	g°d
::
o°ªam
& 
os
, 
SåögRef
 c⁄°& 
	g§
 ) -> std::ostream&;

519 
ölöe
áutÿ
	g›î©‹
 "" 
_§
–c⁄°* 
øwCh¨s
, 
°d
::
size_t
 
size
 ) 
n€x˚±
 -> 
SåögRef
 {

520  
SåögRef
–
øwCh¨s
, 
size
 );

526 
«me•a˚
 
	gC©ch
 {

528 
	gãm∂©e
<
ty≥«me
 
	gC
>

529 ˛as†
	cTe°InvokîAsMëhod
 : 
public
 
ITe°Invokî
 {

530 (
C
::*
m_ã°AsMëhod
)();

531 
	gpublic
:

532 
Te°InvokîAsMëhod
–(
C
::*
ã°AsMëhod
)(ËË
n€x˚±
 : 
m_ã°AsMëhod
(ÅestAsMethod ) {}

534 
övoke
(Ëc⁄° 
ovîride
 {

535 
C
 
obj
;

536 (
	gobj
.*
	gm_ã°AsMëhod
)();

540 autÿ
makeTe°Invokî
–(*
ã°AsFun˘i⁄
)(ËË
n€x˚±
 -> 
ITe°Invokî
*;

542 
ãm∂©e
<
ty≥«me
 
C
>

543 autÿ
	`makeTe°Invokî
–(
C
::*
ã°AsMëhod
)(ËË
n€x˚±
 -> 
ITe°Invokî
* {

544  
	`√w
(
°d
::
nŸhrow
Ë
Te°InvokîAsMëhod
<
C
>–
ã°AsMëhod
 );

545 
	}
}

547 
	sNameAndTags
 {

548 
NameAndTags
–
SåögRef
 c⁄°& 
«me_
 = SåögRef(), SåögRe‡c⁄°& 
ègs_
 = SåögRef(ËË
n€x˚±
;

549 
SåögRef
 
	g«me
;

550 
SåögRef
 
	gègs
;

553 
	gAutoReg
 : 
N⁄C›yabÀ
 {

554 
AutoReg
–
ITe°Invokî
* 
övokî
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
, 
SåögRef
 c⁄°& 
˛assOrMëhod
, 
NameAndTags
 c⁄°& 
«meAndTags
 ) 
	gn€x˚±
;

555 ~
AutoReg
();

560 
	#INTERNAL_CATCH_EXPAND1
(
∑øm
Ë
	`INTERNAL_CATCH_EXPAND2
’¨am)

	)

561 
	#INTERNAL_CATCH_EXPAND2
(...Ë
INTERNAL_CATCH_NO
## 
__VA_ARGS__


	)

562 
	#INTERNAL_CATCH_DEF
(...Ë
INTERNAL_CATCH_DEF
 
__VA_ARGS__


	)

563 
	#INTERNAL_CATCH_NOINTERNAL_CATCH_DEF


	)

565 #i‡
deföed
(
CATCH_CONFIG_DISABLE
)

566 
	#INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
–
Te°Name
, ... ) \

567 
	`Te°Name
()

	)

568 
	#INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION
–
Te°Name
, 
CœssName
, ... ) \

569 
«me•a˚
{ \

570 
Te°Name
 : 
	`INTERNAL_CATCH_EXPAND1
(
INTERNAL_CATCH_DEF
 
CœssName
) { \

571 
	`ã°
(); \

574 
Te°Name
::
	`ã°
()

	)

579 
	#INTERNAL_CATCH_TESTCASE2
–
Te°Name
, ... ) \

580 
	`Te°Name
(); \

581 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

582 
«me•a˚
{ 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–C©ch::
	`makeTe°Invokî
–&
Te°Name
 ), 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`SåögRef
(), C©ch::
NameAndTags
{ 
__VA_ARGS__
 } ); } \

583 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 \

584 
	`Te°Name
()

	)

585 
	#INTERNAL_CATCH_TESTCASE
( ... ) \

586 
	`INTERNAL_CATCH_TESTCASE2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), 
__VA_ARGS__
 )

	)

589 
	#INTERNAL_CATCH_METHOD_AS_TEST_CASE
–
QuÆifõdMëhod
, ... ) \

590 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

591 
«me•a˚
{ 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–C©ch::
	`makeTe°Invokî
–&
QuÆifõdMëhod
 ), 
CATCH_INTERNAL_LINEINFO
, "&" #QuÆifõdMëhod, C©ch::
NameAndTags
{ 
__VA_ARGS__
 } ); } \

592 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS


	)

595 
	#INTERNAL_CATCH_TEST_CASE_METHOD2
–
Te°Name
, 
CœssName
, ... )\

596 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

597 
«me•a˚
{ \

598 
Te°Name
 : 
	`INTERNAL_CATCH_EXPAND1
(
INTERNAL_CATCH_DEF
 
CœssName
) { \

599 
	`ã°
(); \

601 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 ) ( C©ch::
	`makeTe°Invokî
–&
Te°Name
::
ã°
 ), 
CATCH_INTERNAL_LINEINFO
, #CœssName, C©ch::
NameAndTags
{ 
__VA_ARGS__
 } ); \

603 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 \

604 
Te°Name
::
	`ã°
()

	)

605 
	#INTERNAL_CATCH_TEST_CASE_METHOD
–
CœssName
, ... ) \

606 
	`INTERNAL_CATCH_TEST_CASE_METHOD2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), 
CœssName
, 
__VA_ARGS__
 )

	)

609 
	#INTERNAL_CATCH_REGISTER_TESTCASE
–
Fun˘i⁄
, ... ) \

610 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

611 
C©ch
::
AutoReg
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
autoRegi°ør
 )–C©ch::
	`makeTe°Invokî
–
Fun˘i⁄
 ), 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`SåögRef
(), C©ch::
NameAndTags
{ 
__VA_ARGS__
 } ); \

612 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS


	)

623 
«me•a˚
 
	gC©ch
 {

626 
	sResu…Was
 { 
	eOfTy≥
 {

627 
	gUnknown
 = -1,

628 
	gOk
 = 0,

629 
	gInfo
 = 1,

630 
	gW¨nög
 = 2,

632 
	gFaûuªBô
 = 0x10,

634 
	gEx¥essi⁄Faûed
 = 
FaûuªBô
 | 1,

635 
	gEx∂icôFaûuª
 = 
FaûuªBô
 | 2,

637 
	gEx˚±i⁄
 = 0x100 | 
FaûuªBô
,

639 
	gThªwEx˚±i⁄
 = 
Ex˚±i⁄
 | 1,

640 
	gDid¡ThrowEx˚±i⁄
 = 
Ex˚±i⁄
 | 2,

642 
	gF©ÆEº‹C⁄dôi⁄
 = 0x200 | 
FaûuªBô


646 
boﬁ
 
isOk
–
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
 );

647 
boﬁ
 
isJu°Info
–
Êags
 );

650 
	sResu…Di•osôi⁄
 { 
	eFœgs
 {

651 
	gN‹mÆ
 = 0x01,

653 
	gC⁄töueOnFaûuª
 = 0x02,

654 
	gFÆ£Te°
 = 0x04,

655 
	gSuµªssFaû
 = 0x08

658 
	gResu…Di•osôi⁄
::
Fœgs
 
›î©‹
 | ( 
Resu…Di•osôi⁄
::Fœg†
lhs
, Resu…Di•osôi⁄::Fœg†
rhs
 );

660 
boﬁ
 
shouldC⁄töueOnFaûuª
–
Êags
 );

661 
ölöe
 
boﬁ
 
isFÆ£Te°
–
Êags
 ) {  ( 
	gÊags
 & 
	gResu…Di•osôi⁄
::
FÆ£Te°
 ) != 0; }

662 
boﬁ
 
shouldSuµªssFaûuª
–
Êags
 );

667 
«me•a˚
 
	gC©ch
 {

669 
	sAs£πi⁄Info


671 
SåögRef
 
	gma¸oName
;

672 
Sour˚LöeInfo
 
	glöeInfo
;

673 
SåögRef
 
	gˇ±uªdEx¥essi⁄
;

674 
	gResu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
;

688 
	~<ve˘‹
>

689 
	~<c°ddef
>

690 
	~<ty≥_åaôs
>

691 
	~<°rög
>

694 
	~<iosfwd
>

695 
	~<c°ddef
>

696 
	~<o°ªam
>

698 
«me•a˚
 
	gC©ch
 {

700 
	g°d
::
o°ªam
& 
cout
();

701 
	g°d
::
o°ªam
& 
˚º
();

702 
	g°d
::
o°ªam
& 
˛og
();

704 
˛ass
 
	gSåögRef
;

706 
	sISåóm
 {

707 
	gvútuÆ
 ~
ISåóm
();

708 
vútuÆ
 
	g°d
::
o°ªam
& 
°ªam
() const = 0;

711 autÿ
makeSåóm
–
SåögRef
 c⁄° &
fûíame
 ) -> 
ISåóm
 const*;

713 ˛as†
	cReußbÀSåögSåóm
 {

714 
	g°d
::
size_t
 
m_ödex
;

715 
	g°d
::
o°ªam
* 
m_oss
;

716 
	gpublic
:

717 
ReußbÀSåögSåóm
();

718 ~
ReußbÀSåögSåóm
();

720 autÿ
°r
(Ëc⁄° -> 
	g°d
::
°rög
;

722 
	gãm∂©e
<
ty≥«me
 
	gT
>

723 autÿ
	g›î©‹
 << ( 
T
 c⁄°& 
	gvÆue
 ) -> 
	gReußbÀSåögSåóm
& {

724 *
	gm_oss
 << 
	gvÆue
;

725  *
	gthis
;

727 autÿ
gë
(Ë-> 
	g°d
::
o°ªam
& {  *
m_oss
; }

729 
˛ónup
();

735 #ifde‡
__OBJC__


738 #imp‹à<
Found©i⁄
/Found©i⁄.
h
>

740 #ifde‡
__has_„©uª


741 
	#CATCH_ARC_ENABLED
 
	`__has_„©uª
(
objc_¨c
)

	)

743 
	#CATCH_ARC_ENABLED
 0

	)

746 
¨cSa„Rñó£
–
NSObje˘
* 
obj
 );

747 
id
 
≥rf‹mO±i⁄ÆSñe˘‹
–id 
obj
, 
SEL
 
£l
 );

749 #i‡!
CATCH_ARC_ENABLED


750 
ölöe
 
	$¨cSa„Rñó£
–
NSObje˘
* 
obj
 ) {

751 [
obj
 
ªÀa£
];

752 
	}
}

753 
ölöe
 
id
 
	$≥rf‹mO±i⁄ÆSñe˘‹
–
id
 
obj
, 
SEL
 
£l
 ) {

754 if–[
obj
 
ª•⁄dsToSñe˘‹
: 
£l
] )

755  [
obj
 
≥rf‹mSñe˘‹
: 
£l
];

756  
nû
;

757 
	}
}

758 
	#CATCH_UNSAFE_UNRETAINED


	)

759 
	#CATCH_ARC_STRONG


	)

761 
ölöe
 
	$¨cSa„Rñó£
–
NSObje˘
* ){
	}
}

762 
ölöe
 
id
 
	$≥rf‹mO±i⁄ÆSñe˘‹
–
id
 
obj
, 
SEL
 
£l
 ) {

763 #ifde‡
__˛™g__


764 #¥agm®
˛™g
 
dügno°ic
 
push


765 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Warc-performSelector-leaks"

767 if–[
obj
 
ª•⁄dsToSñe˘‹
: 
£l
] )

768  [
obj
 
≥rf‹mSñe˘‹
: 
£l
];

769 #ifde‡
__˛™g__


770 #¥agm®
˛™g
 
dügno°ic
 
p›


772  
nû
;

773 
	}
}

774 
	#CATCH_UNSAFE_UNRETAINED
 
__unß„_uƒëaöed


	)

775 
	#CATCH_ARC_STRONG
 
__°r⁄g


	)

781 #ifde‡
_MSC_VER


782 #¥agm®
w¨nög
(
push
)

783 #¥agm®
w¨nög
(
dißbÀ
:4180)

787 
	sC©ch_globÆ_«me•a˚_dummy
 {};

788 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam&, 
	gC©ch_globÆ_«me•a˚_dummy
);

790 
«me•a˚
 
	gC©ch
 {

792 
	gusög
 ::
›î©‹
<<;

794 
«me•a˚
 
	gDëaû
 {

796 c⁄° 
°d
::
°rög
 
u≈röèbÀSåög
;

798 
	g°d
::
°rög
 
øwMem‹yToSåög
–c⁄° *
obje˘
, 
°d
::
size_t
 
size
 );

800 
	gãm∂©e
<
ty≥«me
 
	gT
>

801 
	g°d
::
°rög
 
øwMem‹yToSåög
–c⁄° 
T
& 
obje˘
 ) {

802  
øwMem‹yToSåög
–&
obje˘
, (object) );

805 
	gãm∂©e
<
ty≥«me
 
	gT
>

806 ˛as†
	cIsSåómIn£πabÀ
 {

807 
	gãm∂©e
<
ty≥«me
 
	gSS
,Åy≥«mê
	gTT
>

808 autÿ
ã°
()

809 -> 
de˛ty≥
(
°d
::
de˛vÆ
<
SS
&>(Ë<< std::de˛vÆ<
TT
>(), std::
åue_ty≥
());

811 
	gãm∂©e
<
	gty≥«me
,Åypename>

812 autÿ
ã°
(...)->
	g°d
::
Ál£_ty≥
;

814 
	gpublic
:

815 c⁄° 
boﬁ
 
vÆue
 = 
de˛ty≥
(
ã°
<
°d
::
o°ªam
, c⁄° 
T
&>(0))::value;

818 
	gãm∂©e
<
ty≥«me
 
	gE
>

819 
	g°d
::
°rög
 
c⁄vîtUnknownEnumToSåög
–
E
 
e
 );

821 
	gãm∂©e
<
ty≥«me
 
	gT
>

822 
ty≥«me
 
	g°d
::
íabÀ_if
<

823 !
°d
::
is_íum
<
T
>::
vÆue
 && !°d::
is_ba£_of
<°d::
ex˚±i⁄
, 
	gT
>::value,

824 
	g°d
::
°rög
>::
ty≥
 
c⁄vîtUn°ªamabÀ
–
T
 const& ) {

825  
Dëaû
::
u≈röèbÀSåög
;

827 
	gãm∂©e
<
ty≥«me
 
	gT
>

828 
ty≥«me
 
	g°d
::
íabÀ_if
<

829 !
°d
::
is_íum
<
T
>::
vÆue
 && std::
is_ba£_of
<°d::
ex˚±i⁄
, 
	gT
>::value,

830 
	g°d
::
°rög
>::
ty≥
 
c⁄vîtUn°ªamabÀ
(
T
 c⁄°& 
ex
) {

831  
ex
.
wh©
();

834 
	gãm∂©e
<
ty≥«me
 
	gT
>

835 
ty≥«me
 
	g°d
::
íabÀ_if
<

836 
°d
::
is_íum
<
T
>::
vÆue


837 , 
	g°d
::
°rög
>::
ty≥
 
c⁄vîtUn°ªamabÀ
–
T
 c⁄°& 
vÆue
 ) {

838  
c⁄vîtUnknownEnumToSåög
–
vÆue
 );

841 #i‡
deföed
(
_MANAGED
)

843 
	gãm∂©e
<
ty≥«me
 
	gT
>

844 
	g°d
::
°rög
 
˛rRe„ªn˚ToSåög
–
T
^ 
ªf
 ) {

845 i‡(
ªf
 =
nuŒ±r
)

846  
°d
::
°rög
("null");

847 autÿ
	gbyãs
 = 
Sy°em
::
Text
::
Encodög
::
UTF8
->
GëByãs
(
ªf
->
ToSåög
());

848 
	g˛i
::
pö_±r
<
Sy°em
::
Byã
> 
p
 = &
byãs
[0];

849  
	g°d
::
°rög
(
ªöãΩªt_ˇ°
<c⁄° *>(
p
), 
byãs
->
Lígth
);

856 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 = >

857 
	sSåögMakî
 {

858 
ãm∂©e
 <
ty≥«me
 
Fake
 = 
T
>

860 
ty≥«me
 
°d
::
íabÀ_if
<::
C©ch
::
Dëaû
::
IsSåómIn£πabÀ
<
Fake
>::
vÆue
, 
	g°d
::
°rög
>::
ty≥


861 
c⁄vît
(c⁄° 
Fake
& 
vÆue
) {

862 
ReußbÀSåögSåóm
 
rss
;

865 
	grss
.
	g›î©‹
<<(
	gvÆue
);

866  
	grss
.
°r
();

869 
	gãm∂©e
 <
ty≥«me
 
	gFake
 = 
T
>

871 
ty≥«me
 
°d
::
íabÀ_if
<!::
C©ch
::
Dëaû
::
IsSåómIn£πabÀ
<
Fake
>::
vÆue
, 
	g°d
::
°rög
>::
ty≥


872 
c⁄vît
–c⁄° 
Fake
& 
vÆue
 ) {

873 #i‡!
deföed
(
CATCH_CONFIG_FALLBACK_STRINGIFIER
)

874  
Dëaû
::
c⁄vîtUn°ªamabÀ
(
vÆue
);

876  
CATCH_CONFIG_FALLBACK_STRINGIFIER
(
vÆue
);

881 
«me•a˚
 
	gDëaû
 {

885 
	gãm∂©e
 <
ty≥«me
 
	gT
>

886 
	g°d
::
°rög
 
°rögify
(c⁄° 
T
& 
e
) {

887  ::
C©ch
::
SåögMakî
<
ty≥«me
 
°d
::
ªmove_cv
<ty≥«mê°d::
ªmove_ª„ªn˚
<
T
>::
ty≥
>::ty≥>::
c⁄vît
(
e
);

890 
	gãm∂©e
<
ty≥«me
 
	gE
>

891 
	g°d
::
°rög
 
c⁄vîtUnknownEnumToSåög
–
E
 
e
 ) {

892  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<
ty≥«me
 
°d
::
undîlyög_ty≥
<
E
>::
ty≥
>(
e
));

895 #i‡
deföed
(
_MANAGED
)

896 
	gãm∂©e
 <
ty≥«me
 
	gT
>

897 
	g°d
::
°rög
 
°rögify
–
T
^ 
e
 ) {

898  ::
C©ch
::
SåögMakî
<
T
^>::
c⁄vît
(
e
);

906 
	gãm∂©e
<>

907 
	gSåögMakî
<
	g°d
::
°rög
> {

908 
°d
::
°rög
 
c⁄vît
(c⁄° std::°rög& 
°r
);

910 #ifde‡
CATCH_CONFIG_WCHAR


911 
	gãm∂©e
<>

912 
	gSåögMakî
<
	g°d
::
w°rög
> {

913 
°d
::
°rög
 
c⁄vît
(c⁄° std::
w°rög
& 
w°r
);

917 
	gãm∂©e
<>

918 
	gSåögMakî
<const *> {

919 
	g°d
::
°rög
 
c⁄vît
(c⁄° * 
°r
);

921 
	gãm∂©e
<>

922 
	gSåögMakî
<*> {

923 
	g°d
::
°rög
 
c⁄vît
(* 
°r
);

926 #ifde‡
CATCH_CONFIG_WCHAR


927 
	gãm∂©e
<>

928 
	gSåögMakî
<
wch¨_t
 const *> {

929 
	g°d
::
°rög
 
c⁄vît
(
wch¨_t
 c⁄° * 
°r
);

931 
	gãm∂©e
<>

932 
	gSåögMakî
<
	gwch¨_t
 *> {

933 
	g°d
::
°rög
 
c⁄vît
(
wch¨_t
 * 
°r
);

939 
	gãm∂©e
<
	gSZ
>

940 
	gSåögMakî
<[
SZ
]> {

941 
	g°d
::
°rög
 
c⁄vît
(c⁄°* 
°r
) {

942  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
°rög
{ 
°r
 });

945 
	gãm∂©e
<
	gSZ
>

946 
	gSåögMakî
<sig√d [
SZ
]> {

947 
	g°d
::
°rög
 
c⁄vît
(sig√d c⁄°* 
°r
) {

948  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
°rög
{ 
ªöãΩªt_ˇ°
<c⁄° *>(
°r
) });

951 
	gãm∂©e
<
	gSZ
>

952 
	gSåögMakî
<[
SZ
]> {

953 
	g°d
::
°rög
 
c⁄vît
(c⁄°* 
°r
) {

954  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
°rög
{ 
ªöãΩªt_ˇ°
<c⁄° *>(
°r
) });

958 
	gãm∂©e
<>

959 
	gSåögMakî
<> {

960 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

962 
	gãm∂©e
<>

963 
	gSåögMakî
<> {

964 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

966 
	gãm∂©e
<>

967 
	gSåögMakî
<> {

968 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

970 
	gãm∂©e
<>

971 
	gSåögMakî
<> {

972 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

974 
	gãm∂©e
<>

975 
	gSåögMakî
<> {

976 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

978 
	gãm∂©e
<>

979 
	gSåögMakî
<> {

980 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

983 
	gãm∂©e
<>

984 
	gSåögMakî
<
	gboﬁ
> {

985 
	g°d
::
°rög
 
c⁄vît
(
boﬁ
 
b
);

988 
	gãm∂©e
<>

989 
	gSåögMakî
<> {

990 
	g°d
::
°rög
 
c⁄vît
(
c
);

992 
	gãm∂©e
<>

993 
	gSåögMakî
<signed > {

994 
	g°d
::
°rög
 
c⁄vît
(sig√d 
c
);

996 
	gãm∂©e
<>

997 
	gSåögMakî
<> {

998 
	g°d
::
°rög
 
c⁄vît
(
c
);

1001 
	gãm∂©e
<>

1002 
	gSåögMakî
<
	g°d
::
nuŒ±r_t
> {

1003 
°d
::
°rög
 
c⁄vît
(°d::
nuŒ±r_t
);

1006 
	gãm∂©e
<>

1007 
	gSåögMakî
<> {

1008 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

1010 
	gãm∂©e
<>

1011 
	gSåögMakî
<> {

1012 
	g°d
::
°rög
 
c⁄vît
(
vÆue
);

1015 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1016 
	gSåögMakî
<
	gT
*> {

1017 
	gãm∂©e
 <
ty≥«me
 
	gU
>

1018 
	g°d
::
°rög
 
c⁄vît
(
U
* 
p
) {

1019 i‡(
p
) {

1020  ::
C©ch
::
Dëaû
::
øwMem‹yToSåög
(
p
);

1027 
	gãm∂©e
 <
ty≥«me
 
	gR
,Åy≥«mê
	gC
>

1028 
	gSåögMakî
<
R
 
	gC
::*> {

1029 
°d
::
°rög
 
c⁄vît
(
R
 
C
::* 
p
) {

1030 i‡(
p
) {

1031  ::
C©ch
::
Dëaû
::
øwMem‹yToSåög
(
p
);

1038 #i‡
	$deföed
(
_MANAGED
)

1039 
ãm∂©e
 <
ty≥«me
 
T
>

1040 
SåögMakî
<
T
^> {

1041 
°d
::
°rög
 
	`c⁄vît
–
T
^ 
ªf
 ) {

1042  ::
C©ch
::
Dëaû
::
	`˛rRe„ªn˚ToSåög
(
ªf
);

1044 
	}
};

1047 
«me•a˚
 
	gDëaû
 {

1048 
	gãm∂©e
<
ty≥«me
 
	gI≈utIãøt‹
>

1049 
	g°d
::
°rög
 
øngeToSåög
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
) {

1050 
ReußbÀSåögSåóm
 
	grss
;

1051 
	grss
 << "{ ";

1052 i‡(
	gfú°
 !
œ°
) {

1053 
rss
 << ::
C©ch
::
Dëaû
::
°rögify
(*
fú°
);

1054 ++
	gfú°
; fú° !
œ°
; ++first)

1055 
	grss
 << ", " << ::
C©ch
::
Dëaû
::
°rögify
(*
fú°
);

1057 
	grss
 << " }";

1058  
	grss
.
°r
();

1062 #ifde‡
__OBJC__


1063 
	gãm∂©e
<>

1064 
	gSåögMakî
<
	gNSSåög
*> {

1065 
	g°d
::
°rög
 
c⁄vît
(
NSSåög
 * 
ns°rög
) {

1066 i‡(!
ns°rög
)

1068  
	g°d
::
°rög
("@"Ë+ [
ns°rög
 
UTF8Såög
];

1071 
	gãm∂©e
<>

1072 
	gSåögMakî
<
	gNSObje˘
*> {

1073 
	g°d
::
°rög
 
c⁄vît
(
NSObje˘
* 
nsObje˘
) {

1074  ::
C©ch
::
Dëaû
::
°rögify
([
nsObje˘
 
des¸ùti⁄
]);

1078 
«me•a˚
 
	gDëaû
 {

1079 
ölöe
 
	g°d
::
°rög
 
°rögify
–
NSSåög
* 
ns°rög
 ) {

1080  
SåögMakî
<
NSSåög
*>::
c⁄vît
–
ns°rög
 );

1092 #i‡
deföed
(
CATCH_CONFIG_ENABLE_ALL_STRINGMAKERS
)

1093 
	#CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER


	)

1094 
	#CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER


	)

1095 
	#CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER


	)

1099 #i‡
deföed
(
CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER
)

1100 
	~<utûôy
>

1101 
«me•a˚
 
	gC©ch
 {

1102 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1103 
	gSåögMakî
<
	g°d
::
∑ú
<
T1
, 
	gT2
> > {

1104 
	g°d
::
°rög
 
c⁄vît
(c⁄° 
°d
::
∑ú
<
T1
, 
T2
>&Öair) {

1105 
ReußbÀSåögSåóm
 
	grss
;

1106 
	grss
 << "{ "

1107 << ::
C©ch
::
Dëaû
::
°rögify
(
∑ú
.
fú°
)

1109 << ::
C©ch
::
Dëaû
::
°rögify
(
∑ú
.
£c⁄d
)

1111  
	grss
.
°r
();

1118 #i‡
deföed
(
CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER
)

1119 
	~<tu∂e
>

1120 
«me•a˚
 
	gC©ch
 {

1121 
«me•a˚
 
	gDëaû
 {

1122 
	gãm∂©e
<

1123 
ty≥«me
 
	gTu∂e
,

1124 
	g°d
::
size_t
 
N
 = 0,

1125 
	gboﬁ
 = (
N
 < 
°d
::
tu∂e_size
<
Tu∂e
>::
vÆue
)

1127 
	sTu∂eEÀmítPröãr
 {

1128 
¥öt
(c⁄° 
Tu∂e
& 
tu∂e
, 
°d
::
o°ªam
& 
os
) {

1129 
os
 << (
N
 ? ", " : " ")

1130 << ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
gë
<
N
>(
tu∂e
));

1131 
	gTu∂eEÀmítPröãr
<
	gTu∂e
, 
	gN
 + 1>::
¥öt
(
tu∂e
, 
os
);

1135 
	gãm∂©e
<

1136 
ty≥«me
 
	gTu∂e
,

1137 
	g°d
::
size_t
 
N


1139 
Tu∂eEÀmítPröãr
<
Tu∂e
, 
	gN
, 
	gÁl£
> {

1140 
¥öt
(c⁄° 
Tu∂e
&, 
°d
::
o°ªam
&) {}

1145 
	gãm∂©e
<
	gty≥«me
 ...
	gTy≥s
>

1146 
	gSåögMakî
<
	g°d
::
tu∂e
<
Ty≥s
...>> {

1147 
°d
::
°rög
 
c⁄vît
(c⁄° std::
tu∂e
<
Ty≥s
...>&Åuple) {

1148 
ReußbÀSåögSåóm
 
rss
;

1149 
	grss
 << '{';

1150 
	gDëaû
::
Tu∂eEÀmítPröãr
<
°d
::
tu∂e
<
Ty≥s
...>>::
¥öt
—u∂e, 
rss
.
gë
());

1151 
	grss
 << " }";

1152  
	grss
.
°r
();

1158 
«me•a˚
 
	gC©ch
 {

1159 
	snŸ_this_⁄e
 {};

1162 
usög
 
	g°d
::
begö
;

1163 
usög
 
	g°d
::
íd
;

1165 
nŸ_this_⁄e
 
begö
( ... );

1166 
nŸ_this_⁄e
 
íd
( ... );

1168 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1169 
	sis_ønge
 {

1170 c⁄° 
boﬁ
 
	gvÆue
 =

1171 !
°d
::
is_ßme
<
de˛ty≥
(
begö
(°d::
de˛vÆ
<
T
>())), 
	gnŸ_this_⁄e
>::
vÆue
 &&

1172 !
°d
::
is_ßme
<
de˛ty≥
(
íd
(°d::
de˛vÆ
<
T
>())), 
	gnŸ_this_⁄e
>::
vÆue
;

1175 #i‡
deföed
(
_MANAGED
)

1176 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1177 
	gis_ønge
<
	gT
^> {

1178 c⁄° 
boﬁ
 
	gvÆue
 = 
Ál£
;

1182 
	gãm∂©e
<
ty≥«me
 
	gR™ge
>

1183 
	g°d
::
°rög
 
øngeToSåög
–
R™ge
 c⁄°& 
ønge
 ) {

1184  ::
C©ch
::
Dëaû
::
øngeToSåög
–
begö
–
ønge
 ), 
íd
(Ñange ) );

1188 
	gãm∂©e
<
ty≥«me
 
	gAŒoˇt‹
>

1189 
	g°d
::
°rög
 
øngeToSåög
–
°d
::
ve˘‹
<
boﬁ
, 
AŒoˇt‹
> c⁄°& 
v
 ) {

1190 
ReußbÀSåögSåóm
 
	grss
;

1191 
	grss
 << "{ ";

1192 
boﬁ
 
	gfú°
 = 
åue
;

1193  
boﬁ
 
	gb
 : 
v
 ) {

1194 if–
fú°
 )

1195 
fú°
 = 
Ál£
;

1197 
	grss
 << ", ";

1198 
	grss
 << ::
C©ch
::
Dëaû
::
°rögify
–
b
 );

1200 
	grss
 << " }";

1201  
	grss
.
°r
();

1204 
	gãm∂©e
<
ty≥«me
 
	gR
>

1205 
	gSåögMakî
<
	gR
, 
ty≥«me
 
	g°d
::
íabÀ_if
<
is_ønge
<
R
>::
vÆue
 && !::
C©ch
::
Dëaû
::
IsSåómIn£πabÀ
<R>::vÆue>::
ty≥
> {

1206 
°d
::
°rög
 
c⁄vît
–
R
 c⁄°& 
ønge
 ) {

1207  
øngeToSåög
–
ønge
 );

1211 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gSZ
>

1212 
	gSåögMakî
<
	gT
[
SZ
]> {

1213 
	g°d
::
°rög
 
c⁄vît
(
T
 c⁄°(&
¨r
)[
SZ
]) {

1214  
øngeToSåög
(
¨r
);

1221 #i‡
deföed
(
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
)

1222 
	~<˘ime
>

1223 
	~<øtio
>

1224 
	~<chr⁄o
>

1226 
«me•a˚
 
	gC©ch
 {

1228 
	gãm∂©e
 <
˛ass
 
	gR©io
>

1229 
	søtio_°rög
 {

1230 
	g°d
::
°rög
 
symbﬁ
();

1233 
	gãm∂©e
 <
˛ass
 
	gR©io
>

1234 
	g°d
::
°rög
 
øtio_°rög
<
R©io
>::
symbﬁ
() {

1235 
C©ch
::
ReußbÀSåögSåóm
 
rss
;

1236 
	grss
 << '[' << 
	gR©io
::
num
 << '/'

1237 << 
R©io
::
dí
 << ']';

1238  
	grss
.
°r
();

1240 
	gãm∂©e
 <>

1241 
	gøtio_°rög
<
	g°d
::
©to
> {

1242 
°d
::
°rög
 
symbﬁ
();

1244 
	gãm∂©e
 <>

1245 
	gøtio_°rög
<
	g°d
::
„mto
> {

1246 
°d
::
°rög
 
symbﬁ
();

1248 
	gãm∂©e
 <>

1249 
	gøtio_°rög
<
	g°d
::
pico
> {

1250 
°d
::
°rög
 
symbﬁ
();

1252 
	gãm∂©e
 <>

1253 
	gøtio_°rög
<
	g°d
::
«no
> {

1254 
°d
::
°rög
 
symbﬁ
();

1256 
	gãm∂©e
 <>

1257 
	gøtio_°rög
<
	g°d
::
mi¸o
> {

1258 
°d
::
°rög
 
symbﬁ
();

1260 
	gãm∂©e
 <>

1261 
	gøtio_°rög
<
	g°d
::
mûli
> {

1262 
°d
::
°rög
 
symbﬁ
();

1267 
	gãm∂©e
<
ty≥«me
 
	gVÆue
,Åy≥«mê
	gR©io
>

1268 
	gSåögMakî
<
	g°d
::
chr⁄o
::
duøti⁄
<
VÆue
, 
	gR©io
>> {

1269 
	g°d
::
°rög
 
c⁄vît
(
°d
::
chr⁄o
::
duøti⁄
<
VÆue
, 
R©io
> const& duration) {

1270 
ReußbÀSåögSåóm
 
	grss
;

1271 
	grss
 << 
	gduøti⁄
.
cou¡
(Ë<< ' ' << 
	gøtio_°rög
<
	gR©io
>::
symbﬁ
() << 's';

1272  
	grss
.
°r
();

1275 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

1276 
	gSåögMakî
<
	g°d
::
chr⁄o
::
duøti⁄
<
VÆue
, std::
øtio
<1>>> {

1277 
°d
::
°rög
 
c⁄vît
(°d::
chr⁄o
::
duøti⁄
<
VÆue
, std::
øtio
<1>> const& duration) {

1278 
ReußbÀSåögSåóm
 
rss
;

1279 
	grss
 << 
	gduøti⁄
.
cou¡
() << " s";

1280  
	grss
.
°r
();

1283 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

1284 
	gSåögMakî
<
	g°d
::
chr⁄o
::
duøti⁄
<
VÆue
, std::
øtio
<60>>> {

1285 
°d
::
°rög
 
c⁄vît
(°d::
chr⁄o
::
duøti⁄
<
VÆue
, std::
øtio
<60>> const& duration) {

1286 
ReußbÀSåögSåóm
 
rss
;

1287 
	grss
 << 
	gduøti⁄
.
cou¡
() << " m";

1288  
	grss
.
°r
();

1291 
	gãm∂©e
<
ty≥«me
 
	gVÆue
>

1292 
	gSåögMakî
<
	g°d
::
chr⁄o
::
duøti⁄
<
VÆue
, std::
øtio
<3600>>> {

1293 
°d
::
°rög
 
c⁄vît
(°d::
chr⁄o
::
duøti⁄
<
VÆue
, std::
øtio
<3600>> const& duration) {

1294 
ReußbÀSåögSåóm
 
rss
;

1295 
	grss
 << 
	gduøti⁄
.
cou¡
() << " h";

1296  
	grss
.
°r
();

1303 
	gãm∂©e
<
ty≥«me
 
	gClock
,Åy≥«mê
	gDuøti⁄
>

1304 
	gSåögMakî
<
	g°d
::
chr⁄o
::
time_poöt
<
Clock
, 
	gDuøti⁄
>> {

1305 
	g°d
::
°rög
 
c⁄vît
(
°d
::
chr⁄o
::
time_poöt
<
Clock
, 
Duøti⁄
> const&Åime_point) {

1306  ::
C©ch
::
Dëaû
::
°rögify
(
time_poöt
.
time_sö˚_ïoch
()) + " sinceÉpoch";

1310 
	gãm∂©e
<
ty≥«me
 
	gDuøti⁄
>

1311 
	gSåögMakî
<
	g°d
::
chr⁄o
::
time_poöt
<
°d
::chr⁄o::
sy°em_˛ock
, 
	gDuøti⁄
>> {

1312 
	g°d
::
°rög
 
c⁄vît
(
°d
::
chr⁄o
::
time_poöt
<°d::chr⁄o::
sy°em_˛ock
, 
Duøti⁄
> const&Åime_point) {

1313 autÿ
	gc⁄vîãd
 = 
°d
::
chr⁄o
::
sy°em_˛ock
::
to_time_t
(
time_poöt
);

1315 #ifde‡
_MSC_VER


1316 
	g°d
::
tm
 
timeInfo
 = {};

1317 
gmtime_s
(&
timeInfo
, &
c⁄vîãd
);

1319 
	g°d
::
tm
* 
timeInfo
 = 
°d
::
gmtime
(&
c⁄vîãd
);

1322 autÿc⁄° 
	gtimeSèmpSize
 = ("2017-01-16T17:06:45Z");

1323 
	gtimeSèmp
[
timeSèmpSize
];

1324 c⁄° * c⁄° 
	gfmt
 = "%Y-%m-%dT%H:%M:%SZ";

1326 #ifde‡
_MSC_VER


1327 
	g°d
::
°r·ime
(
timeSèmp
, 
timeSèmpSize
, 
fmt
, &
timeInfo
);

1329 
	g°d
::
°r·ime
(
timeSèmp
, 
timeSèmpSize
, 
fmt
, 
timeInfo
);

1331  
	g°d
::
°rög
(
timeSèmp
);

1337 #ifde‡
_MSC_VER


1338 #¥agm®
w¨nög
(
p›
)

1342 
	~<iosfwd
>

1344 #ifde‡
_MSC_VER


1345 #¥agm®
w¨nög
(
push
)

1346 #¥agm®
w¨nög
(
dißbÀ
:4389)

1347 #¥agm®
w¨nög
(
dißbÀ
:4018)

1348 #¥agm®
w¨nög
(
dißbÀ
:4312)

1349 #¥agm®
w¨nög
(
dißbÀ
:4180)

1352 
«me•a˚
 
	gC©ch
 {

1354 
	sITønsõ¡Ex¥essi⁄
 {

1355 autÿ
isBö¨yEx¥essi⁄
(Ëc⁄° -> 
	gboﬁ
 {  
	gm_isBö¨yEx¥essi⁄
; }

1356 autÿ
gëResu…
(Ëc⁄° -> 
	gboﬁ
 {  
	gm_ªsu…
; }

1357 
vútuÆ
 
°ªamRec⁄°ru˘edEx¥essi⁄
–
°d
::
o°ªam
 &
os
 ) const = 0;

1359 
ITønsõ¡Ex¥essi⁄
–
boﬁ
 
isBö¨yEx¥essi⁄
, boﬁ 
ªsu…
 )

1360 : 
m_isBö¨yEx¥essi⁄
–
isBö¨yEx¥essi⁄
 ),

1361 
m_ªsu…
–
ªsu…
 )

1366 
	gvútuÆ
 ~
ITønsõ¡Ex¥essi⁄
();

1368 
boﬁ
 
	gm_isBö¨yEx¥essi⁄
;

1369 
boﬁ
 
	gm_ªsu…
;

1373 
f‹m©Rec⁄°ru˘edEx¥essi⁄
–
°d
::
o°ªam
 &
os
, std::
°rög
 c⁄°& 
lhs
, 
SåögRef
 
›
, std::°rög c⁄°& 
rhs
 );

1375 
	gãm∂©e
<
ty≥«me
 
	gLhsT
,Åy≥«mê
	gRhsT
>

1376 ˛as†
	cBö¨yEx¥
 : 
public
 
ITønsõ¡Ex¥essi⁄
 {

1377 
LhsT
 
m_lhs
;

1378 
SåögRef
 
	gm_›
;

1379 
RhsT
 
	gm_rhs
;

1381 
°ªamRec⁄°ru˘edEx¥essi⁄
–
°d
::
o°ªam
 &
os
 ) c⁄° 
ovîride
 {

1382 
f‹m©Rec⁄°ru˘edEx¥essi⁄


1383 –
os
, 
	gC©ch
::
Dëaû
::
°rögify
–
m_lhs
 ), 
	gm_›
, C©ch::Dëaû::°rögify–
m_rhs
 ) );

1386 
	gpublic
:

1387 
Bö¨yEx¥
–
boﬁ
 
com∑ris⁄Resu…
, 
LhsT
 
lhs
, 
SåögRef
 
›
, 
RhsT
 
rhs
 )

1388 : 
ITønsõ¡Ex¥essi⁄
{ 
åue
, 
	gcom∑ris⁄Resu…
 },

1389 
m_lhs
–
lhs
 ),

1390 
m_›
–
›
 ),

1391 
m_rhs
–
rhs
 )

1395 
	gãm∂©e
<
ty≥«me
 
	gLhsT
>

1396 ˛as†
	cU«ryEx¥
 : 
public
 
ITønsõ¡Ex¥essi⁄
 {

1397 
LhsT
 
m_lhs
;

1399 
°ªamRec⁄°ru˘edEx¥essi⁄
–
°d
::
o°ªam
 &
os
 ) c⁄° 
ovîride
 {

1400 
os
 << 
C©ch
::
Dëaû
::
°rögify
–
m_lhs
 );

1403 
	gpublic
:

1404 
ex∂icô
 
U«ryEx¥
–
LhsT
 
lhs
 )

1405 : 
ITønsõ¡Ex¥essi⁄
{ 
Ál£
, 
	glhs
 ? 
	gåue
 : false },

1406 
m_lhs
–
lhs
 )

1411 
	gãm∂©e
<
ty≥«me
 
	gLhsT
,Åy≥«mê
	gRhsT
>

1412 autÿ
com∑ªEquÆ
–
LhsT
 c⁄°& 
lhs
, 
RhsT
 c⁄°& 
rhs
 ) -> 
	gboﬁ
 {  
	g°©ic_ˇ°
<boﬁ>(
	glhs
 ==Ñhs); }

1413 
	gãm∂©e
<
ty≥«me
 
	gT
>

1414 autÿ
com∑ªEquÆ
–
T
* c⁄°& 
lhs
, 
rhs
 ) -> 
	gboﬁ
 {  
	glhs
 =
ªöãΩªt_ˇ°
<const*>(Ñhs ); }

1415 
	gãm∂©e
<
ty≥«me
 
	gT
>

1416 autÿ
com∑ªEquÆ
–
T
* c⁄°& 
lhs
, 
rhs
 ) -> 
	gboﬁ
 {  
	glhs
 =
ªöãΩªt_ˇ°
<const*>(Ñhs ); }

1417 
	gãm∂©e
<
ty≥«me
 
	gT
>

1418 autÿ
com∑ªEquÆ
–
lhs
, 
T
* c⁄°& 
rhs
 ) -> 
	gboﬁ
 {  
	gªöãΩªt_ˇ°
<c⁄°*>–
	glhs
 ) ==Ñhs; }

1419 
	gãm∂©e
<
ty≥«me
 
	gT
>

1420 autÿ
com∑ªEquÆ
–
lhs
, 
T
* c⁄°& 
rhs
 ) -> 
	gboﬁ
 {  
	gªöãΩªt_ˇ°
<c⁄°*>–
	glhs
 ) ==Ñhs; }

1422 
	gãm∂©e
<
ty≥«me
 
	gLhsT
,Åy≥«mê
	gRhsT
>

1423 autÿ
com∑ªNŸEquÆ
–
LhsT
 c⁄°& 
lhs
, 
RhsT
&& 
rhs
 ) -> 
	gboﬁ
 {  
	g°©ic_ˇ°
<boﬁ>(
	glhs
 !=Ñhs); }

1424 
	gãm∂©e
<
ty≥«me
 
	gT
>

1425 autÿ
com∑ªNŸEquÆ
–
T
* c⁄°& 
lhs
, 
rhs
 ) -> 
	gboﬁ
 {  
	glhs
 !
ªöãΩªt_ˇ°
<const*>(Ñhs ); }

1426 
	gãm∂©e
<
ty≥«me
 
	gT
>

1427 autÿ
com∑ªNŸEquÆ
–
T
* c⁄°& 
lhs
, 
rhs
 ) -> 
	gboﬁ
 {  
	glhs
 !
ªöãΩªt_ˇ°
<const*>(Ñhs ); }

1428 
	gãm∂©e
<
ty≥«me
 
	gT
>

1429 autÿ
com∑ªNŸEquÆ
–
lhs
, 
T
* c⁄°& 
rhs
 ) -> 
	gboﬁ
 {  
	gªöãΩªt_ˇ°
<c⁄°*>–
	glhs
 ) !=Ñhs; }

1430 
	gãm∂©e
<
ty≥«me
 
	gT
>

1431 autÿ
com∑ªNŸEquÆ
–
lhs
, 
T
* c⁄°& 
rhs
 ) -> 
	gboﬁ
 {  
	gªöãΩªt_ˇ°
<c⁄°*>–
	glhs
 ) !=Ñhs; }

1433 
	gãm∂©e
<
ty≥«me
 
	gLhsT
>

1434 ˛as†
	cEx¥Lhs
 {

1435 
LhsT
 
	gm_lhs
;

1436 
	gpublic
:

1437 
ex∂icô
 
Ex¥Lhs
–
LhsT
 
lhs
 ) : 
m_lhs
(Ühs ) {}

1439 
ãm∂©e
<
ty≥«me
 
RhsT
>

1440 autÿ
›î©‹
 =–
RhsT
 c⁄°& 
rhs
 ) -> 
Bö¨yEx¥
<
LhsT
, RhsT const&> const {

1441  { 
com∑ªEquÆ
–
m_lhs
, 
rhs
 ), 
	gm_lhs
, "==", 
	grhs
 };

1443 autÿ
	g›î©‹
 =–
boﬁ
 
rhs
 ) -> 
Bö¨yEx¥
<
LhsT
, 
	gboﬁ
> const {

1444  { 
	gm_lhs
 =
rhs
, m_lhs, "==", 
	grhs
 };

1447 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1448 autÿ
	g›î©‹
 !–
RhsT
 c⁄°& 
rhs
 ) -> 
Bö¨yEx¥
<
LhsT
, RhsT const&> const {

1449  { 
com∑ªNŸEquÆ
–
m_lhs
, 
rhs
 ), 
	gm_lhs
, "!=", 
	grhs
 };

1451 autÿ
	g›î©‹
 !–
boﬁ
 
rhs
 ) -> 
Bö¨yEx¥
<
LhsT
, 
	gboﬁ
> const {

1452  { 
	gm_lhs
 !
rhs
, m_lhs, "!=", 
	grhs
 };

1455 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1456 autÿ
	g›î©‹
 > ( 
RhsT
 c⁄°& 
	grhs
 ) -> 
	gBö¨yEx¥
<
	gLhsT
, RhsT const&> const {

1457  { 
	g°©ic_ˇ°
<
	gboﬁ
>(
	gm_lhs
 > 
	grhs
), m_lhs, ">",Ñhs };

1459 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1460 autÿ
	g›î©‹
 < ( 
RhsT
 c⁄°& 
	grhs
 ) -> 
	gBö¨yEx¥
<
	gLhsT
, RhsT const&> const {

1461  { 
	g°©ic_ˇ°
<
	gboﬁ
>(
	gm_lhs
 < 
	grhs
), m_lhs, "<",Ñhs };

1463 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1464 autÿ
	g›î©‹
 >–
RhsT
 c⁄°& 
rhs
 ) -> 
Bö¨yEx¥
<
LhsT
, RhsT const&> const {

1465  { 
	g°©ic_ˇ°
<
	gboﬁ
>(
	gm_lhs
 >
rhs
), m_lhs, ">=", 
	grhs
 };

1467 
	gãm∂©e
<
ty≥«me
 
	gRhsT
>

1468 autÿ
	g›î©‹
 <–
RhsT
 c⁄°& 
rhs
 ) -> 
Bö¨yEx¥
<
LhsT
, RhsT const&> const {

1469  { 
	g°©ic_ˇ°
<
	gboﬁ
>(
	gm_lhs
 <
rhs
), m_lhs, "<=", 
	grhs
 };

1472 autÿ
makeU«ryEx¥
(Ëc⁄° -> 
	gU«ryEx¥
<
	gLhsT
> {

1473  
	gU«ryEx¥
<
	gLhsT
>{ 
	gm_lhs
 };

1477 
h™dÀEx¥essi⁄
–
ITønsõ¡Ex¥essi⁄
 c⁄°& 
ex¥
 );

1479 
	gãm∂©e
<
ty≥«me
 
	gT
>

1480 
h™dÀEx¥essi⁄
–
Ex¥Lhs
<
T
> c⁄°& 
ex¥
 ) {

1481 
h™dÀEx¥essi⁄
–
ex¥
.
makeU«ryEx¥
() );

1484 
	sDecompo£r
 {

1485 
	gãm∂©e
<
ty≥«me
 
	gT
>

1486 autÿ
	g›î©‹
 <–
T
 c⁄°& 
lhs
 ) -> 
Ex¥Lhs
<T const&> {

1487  
Ex¥Lhs
<
T
 c⁄°&>{ 
lhs
 };

1490 autÿ
	g›î©‹
 <=–
boﬁ
 
vÆue
 ) -> 
Ex¥Lhs
<bool> {

1491  
Ex¥Lhs
<
boﬁ
>{ 
vÆue
 };

1497 #ifde‡
_MSC_VER


1498 #¥agm®
w¨nög
(
p›
)

1504 
	~<°rög
>

1506 
«me•a˚
 
	gC©ch
 {

1508 
˛ass
 
	gAs£πi⁄Resu…
;

1509 
	gAs£πi⁄Info
;

1510 
	gSe˘i⁄Info
;

1511 
	gSe˘i⁄EndInfo
;

1512 
	gMesßgeInfo
;

1513 
	gCou¡s
;

1514 
	gBíchm¨kInfo
;

1515 
	gBíchm¨kSèts
;

1516 
	gAs£πi⁄Ró˘i⁄
;

1518 
	gITønsõ¡Ex¥essi⁄
;

1520 
	sIResu…C≠tuª
 {

1522 
	gvútuÆ
 ~
IResu…C≠tuª
();

1524 
vútuÆ
 
boﬁ
 
£˘i⁄Sèπed
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
,

1525 
Cou¡s
& 
as£πi⁄s
 ) = 0;

1526 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) = 0;

1527 
vútuÆ
 
£˘i⁄EndedE¨ly
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) = 0;

1529 
vútuÆ
 
bíchm¨kSèπög
–
Bíchm¨kInfo
 c⁄°& 
öfo
 ) = 0;

1530 
vútuÆ
 
bíchm¨kEnded
–
Bíchm¨kSèts
 c⁄°& 
°©s
 ) = 0;

1532 
vútuÆ
 
pushSc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) = 0;

1533 
vútuÆ
 
p›Sc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) = 0;

1535 
vútuÆ
 
h™dÀF©ÆEº‹C⁄dôi⁄
–
SåögRef
 
mesßge
 ) = 0;

1537 
vútuÆ
 
	gh™dÀEx¥


1538 –
As£πi⁄Info
 c⁄°& 
	göfo
,

1539 
ITønsõ¡Ex¥essi⁄
 c⁄°& 
	gex¥
,

1540 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) = 0;

1541 
vútuÆ
 
	gh™dÀMesßge


1542 –
As£πi⁄Info
 c⁄°& 
	göfo
,

1543 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
,

1544 
SåögRef
 c⁄°& 
	gmesßge
,

1545 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) = 0;

1546 
vútuÆ
 
	gh™dÀU√x≥˘edEx˚±i⁄NŸThrown


1547 –
As£πi⁄Info
 c⁄°& 
	göfo
,

1548 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) = 0;

1549 
vútuÆ
 
	gh™dÀU√x≥˘edInÊightEx˚±i⁄


1550 –
As£πi⁄Info
 c⁄°& 
	göfo
,

1551 
	g°d
::
°rög
 c⁄°& 
mesßge
,

1552 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) = 0;

1553 
vútuÆ
 
	gh™dÀIncom∂ëe


1554 –
As£πi⁄Info
 c⁄°& 
	göfo
 ) = 0;

1555 
vútuÆ
 
	gh™dÀN⁄Ex¥


1556 –
As£πi⁄Info
 c⁄° &
	göfo
,

1557 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
,

1558 
	gAs£πi⁄Ró˘i⁄
 &
	gªa˘i⁄
 ) = 0;

1560 
vútuÆ
 
boﬁ
 
œ°As£πi⁄Pas£d
() = 0;

1561 
vútuÆ
 
as£πi⁄Pas£d
() = 0;

1564 
vútuÆ
 
	g°d
::
°rög
 
gëCuºítTe°Name
() const = 0;

1565 
vútuÆ
 c⁄° 
As£πi⁄Resu…
* 
gëLa°Resu…
() const = 0;

1566 
vútuÆ
 
ex˚±i⁄E¨lyRï‹ãd
() = 0;

1569 
	gIResu…C≠tuª
& 
gëResu…C≠tuª
();

1573 
«me•a˚
 
	gC©ch
 {

1575 
	sTe°FaûuªEx˚±i⁄
{};

1576 
	gAs£πi⁄Resu…D©a
;

1577 
	gIResu…C≠tuª
;

1578 
˛ass
 
	gRunC⁄ãxt
;

1580 ˛as†
	cLazyEx¥essi⁄
 {

1581 
‰õnd
 
˛ass
 
	gAs£πi⁄H™dÀr
;

1582 
‰õnd
 
	gAs£πi⁄Sèts
;

1583 
‰õnd
 
˛ass
 
	gRunC⁄ãxt
;

1585 
ITønsõ¡Ex¥essi⁄
 c⁄°* 
	gm_å™sõ¡Ex¥essi⁄
 = 
nuŒ±r
;

1586 
boﬁ
 
	gm_isNeg©ed
;

1587 
	gpublic
:

1588 
LazyEx¥essi⁄
–
boﬁ
 
isNeg©ed
 );

1589 
LazyEx¥essi⁄
–LazyEx¥essi⁄ c⁄°& 
Ÿhî
 );

1590 
	gLazyEx¥essi⁄
& 
	g›î©‹
 = ( 
LazyEx¥essi⁄
 c⁄°& ) = 
dñëe
;

1592 
ex∂icô
 
›î©‹
 
boﬁ
() const;

1594 
‰õnd
áutÿ
	g›î©‹
 << ( 
	g°d
::
o°ªam
& 
os
, 
LazyEx¥essi⁄
 c⁄°& 
	gœzyEx¥
 ) -> std::ostream&;

1597 
	sAs£πi⁄Ró˘i⁄
 {

1598 
boﬁ
 
	gshouldDebugBªak
 = 
Ál£
;

1599 
boﬁ
 
	gshouldThrow
 = 
Ál£
;

1602 ˛as†
	cAs£πi⁄H™dÀr
 {

1603 
As£πi⁄Info
 
	gm_as£πi⁄Info
;

1604 
As£πi⁄Ró˘i⁄
 
	gm_ªa˘i⁄
;

1605 
boﬁ
 
	gm_com∂ëed
 = 
Ál£
;

1606 
	gIResu…C≠tuª
& 
	gm_ªsu…C≠tuª
;

1608 
	gpublic
:

1609 
As£πi⁄H™dÀr


1610 –
SåögRef
 
ma¸oName
,

1611 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
,

1612 
SåögRef
 
	gˇ±uªdEx¥essi⁄
,

1613 
	gResu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
 );

1614 ~
As£πi⁄H™dÀr
() {

1615 i‡–!
	gm_com∂ëed
 ) {

1616 
	gm_ªsu…C≠tuª
.
h™dÀIncom∂ëe
–
m_as£πi⁄Info
 );

1620 
	gãm∂©e
<
ty≥«me
 
	gT
>

1621 
h™dÀEx¥
–
Ex¥Lhs
<
T
> c⁄°& 
ex¥
 ) {

1622 
h™dÀEx¥
–
ex¥
.
makeU«ryEx¥
() );

1624 
h™dÀEx¥
–
ITønsõ¡Ex¥essi⁄
 c⁄°& 
ex¥
 );

1626 
h™dÀMesßge
(
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
, 
SåögRef
 c⁄°& 
mesßge
);

1628 
h™dÀEx˚±i⁄ThrownAsEx≥˘ed
();

1629 
h™dÀU√x≥˘edEx˚±i⁄NŸThrown
();

1630 
h™dÀEx˚±i⁄NŸThrownAsEx≥˘ed
();

1631 
h™dÀThrowögCÆlSkù≥d
();

1632 
h™dÀU√x≥˘edInÊightEx˚±i⁄
();

1634 
com∂ëe
();

1635 
£tCom∂ëed
();

1638 autÿ
ÆlowThrows
(Ëc⁄° -> 
	gboﬁ
;

1641 
h™dÀEx˚±i⁄M©chEx¥
–
As£πi⁄H™dÀr
& 
h™dÀr
, 
°d
::
°rög
 c⁄°& 
°r
, 
SåögRef
 
m©chîSåög
 );

1648 
	~<°rög
>

1650 
«me•a˚
 
	gC©ch
 {

1652 
	sMesßgeInfo
 {

1653 
MesßgeInfo
–
°d
::
°rög
 c⁄°& 
_ma¸oName
,

1654 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

1655 
Resu…Was
::
OfTy≥
 
_ty≥
 );

1657 
	g°d
::
°rög
 
ma¸oName
;

1658 
	g°d
::
°rög
 
mesßge
;

1659 
Sour˚LöeInfo
 
	glöeInfo
;

1660 
	gResu…Was
::
OfTy≥
 
ty≥
;

1661 
	g£quí˚
;

1663 
boﬁ
 
	g›î©‹
 =–
MesßgeInfo
 c⁄°& 
Ÿhî
 ) const;

1664 
boﬁ
 
	g›î©‹
 < ( 
MesßgeInfo
 c⁄°& 
	gŸhî
 ) const;

1665 
	g¥iv©e
:

1666 
globÆCou¡
;

1669 
	sMesßgeSåóm
 {

1671 
	gãm∂©e
<
ty≥«me
 
	gT
>

1672 
	gMesßgeSåóm
& 
	g›î©‹
 << ( 
T
 c⁄°& 
	gvÆue
 ) {

1673 
	gm_°ªam
 << 
	gvÆue
;

1674  *
	gthis
;

1677 
ReußbÀSåögSåóm
 
	gm_°ªam
;

1680 
	gMesßgeBuûdî
 : 
MesßgeSåóm
 {

1681 
MesßgeBuûdî
–
°d
::
°rög
 c⁄°& 
ma¸oName
,

1682 
Sour˚LöeInfo
 c⁄°& 
löeInfo
,

1683 
Resu…Was
::
OfTy≥
 
ty≥
 );

1685 
	gãm∂©e
<
ty≥«me
 
	gT
>

1686 
	gMesßgeBuûdî
& 
	g›î©‹
 << ( 
T
 c⁄°& 
	gvÆue
 ) {

1687 
	gm_°ªam
 << 
	gvÆue
;

1688  *
	gthis
;

1691 
MesßgeInfo
 
	gm_öfo
;

1694 ˛as†
	cSc›edMesßge
 {

1695 
	gpublic
:

1696 
ex∂icô
 
Sc›edMesßge
–
MesßgeBuûdî
 c⁄°& 
buûdî
 );

1697 ~
Sc›edMesßge
();

1699 
MesßgeInfo
 
	gm_öfo
;

1705 #i‡!
deföed
(
CATCH_CONFIG_DISABLE
)

1707 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_STRINGIFICATION
)

1708 
	#CATCH_INTERNAL_STRINGIFY
(...Ë#__VA_ARGS__

	)

1710 
	#CATCH_INTERNAL_STRINGIFY
(...Ë"DißbÀd by CATCH_CONFIG_DISABLE_STRINGIFICATION"

	)

1713 #i‡
deföed
(
CATCH_CONFIG_FAST_COMPILE
)

1718 
	#INTERNAL_CATCH_TRY


	)

1719 
	#INTERNAL_CATCH_CATCH
–
ˇ±uªr
 )

	)

1723 
	#INTERNAL_CATCH_TRY
 
åy


	)

1724 
	#INTERNAL_CATCH_CATCH
–
h™dÀr
 ) 
	`ˇtch
(...Ë{ h™dÀr.
	`h™dÀU√x≥˘edInÊightEx˚±i⁄
(); }

	)

1728 
	#INTERNAL_CATCH_REACT
–
h™dÀr
 ) h™dÀr.
	`com∂ëe
();

	)

1731 
	#INTERNAL_CATCH_TEST
–
ma¸oName
, 
ªsu…Di•osôi⁄
, ... ) \

1733 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
__VA_ARGS__
), 
ªsu…Di•osôi⁄
 ); \

1734 
INTERNAL_CATCH_TRY
 { \

1735 
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
 \

1736 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀEx¥
–
C©ch
::
	`Decompo£r
(Ë<
__VA_ARGS__
 ); \

1737 
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS
 \

1738 } 
	`INTERNAL_CATCH_CATCH
–
ˇtchAs£πi⁄H™dÀr
 ) \

1739 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

1740 }  ()0, 
Ál£
 && 
°©ic_ˇ°
<
boﬁ
>–!!(
__VA_ARGS__
) ) )

1742 

	)

1744 
	#INTERNAL_CATCH_IF
–
ma¸oName
, 
ªsu…Di•osôi⁄
, ... ) \

1745 
	`INTERNAL_CATCH_TEST
–
ma¸oName
, 
ªsu…Di•osôi⁄
, 
__VA_ARGS__
 ); \

1746 if–
C©ch
::
	`gëResu…C≠tuª
().
	`œ°As£πi⁄Pas£d
(Ë)

	)

1749 
	#INTERNAL_CATCH_ELSE
–
ma¸oName
, 
ªsu…Di•osôi⁄
, ... ) \

1750 
	`INTERNAL_CATCH_TEST
–
ma¸oName
, 
ªsu…Di•osôi⁄
, 
__VA_ARGS__
 ); \

1751 if–!
C©ch
::
	`gëResu…C≠tuª
().
	`œ°As£πi⁄Pas£d
(Ë)

	)

1754 
	#INTERNAL_CATCH_NO_THROW
–
ma¸oName
, 
ªsu…Di•osôi⁄
, ... ) \

1756 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
__VA_ARGS__
), 
ªsu…Di•osôi⁄
 ); \

1757 
åy
 { \

1758 
°©ic_ˇ°
<>(
__VA_ARGS__
); \

1759 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀEx˚±i⁄NŸThrownAsEx≥˘ed
(); \

1761 
	`ˇtch
( ... ) { \

1762 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edInÊightEx˚±i⁄
(); \

1764 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

1765 }  
Ál£
 )

	)

1768 
	#INTERNAL_CATCH_THROWS
–
ma¸oName
, 
ªsu…Di•osôi⁄
, ... ) \

1770 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
__VA_ARGS__
), 
ªsu…Di•osôi⁄
); \

1771 if–
ˇtchAs£πi⁄H™dÀr
.
	`ÆlowThrows
() ) \

1772 
åy
 { \

1773 
°©ic_ˇ°
<>(
__VA_ARGS__
); \

1774 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edEx˚±i⁄NŸThrown
(); \

1776 
	`ˇtch
( ... ) { \

1777 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀEx˚±i⁄ThrownAsEx≥˘ed
(); \

1780 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀThrowögCÆlSkù≥d
(); \

1781 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

1782 }  
Ál£
 )

	)

1785 
	#INTERNAL_CATCH_THROWS_AS
–
ma¸oName
, 
ex˚±i⁄Ty≥
, 
ªsu…Di•osôi⁄
, 
ex¥
 ) \

1787 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
ex¥
Ë", " CATCH_INTERNAL_STRINGIFY(
ex˚±i⁄Ty≥
), 
ªsu…Di•osôi⁄
 ); \

1788 if–
ˇtchAs£πi⁄H™dÀr
.
	`ÆlowThrows
() ) \

1789 
åy
 { \

1790 
°©ic_ˇ°
<>(
ex¥
); \

1791 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edEx˚±i⁄NŸThrown
(); \

1793 
	`ˇtch
–
ex˚±i⁄Ty≥
 const& ) { \

1794 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀEx˚±i⁄ThrownAsEx≥˘ed
(); \

1796 
	`ˇtch
( ... ) { \

1797 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edInÊightEx˚±i⁄
(); \

1800 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀThrowögCÆlSkù≥d
(); \

1801 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

1802 }  
Ál£
 )

	)

1805 
	#INTERNAL_CATCH_MSG
–
ma¸oName
, 
mesßgeTy≥
, 
ªsu…Di•osôi⁄
, ... ) \

1807 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
	`SåögRef
(), 
ªsu…Di•osôi⁄
 ); \

1808 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀMesßge
–
mesßgeTy≥
, ( 
C©ch
::
	`MesßgeSåóm
(Ë<< 
__VA_ARGS__
 + ::C©ch::
	`SåómEndSt›
(Ë).
m_°ªam
.
	`°r
() ); \

1809 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

1810 }  
Ál£
 )

	)

1813 
	#INTERNAL_CATCH_INFO
–
ma¸oName
, 
log
 ) \

1814 
C©ch
::
Sc›edMesßge
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
sc›edMesßge
 )–C©ch::
	`MesßgeBuûdî
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, C©ch::
Resu…Was
::
Info
 ) << 
log
 );

	)

1818 
	#INTERNAL_CATCH_THROWS_STR_MATCHES
–
ma¸oName
, 
ªsu…Di•osôi⁄
, 
m©chî
, ... ) \

1820 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
__VA_ARGS__
Ë", " CATCH_INTERNAL_STRINGIFY(
m©chî
), 
ªsu…Di•osôi⁄
 ); \

1821 if–
ˇtchAs£πi⁄H™dÀr
.
	`ÆlowThrows
() ) \

1822 
åy
 { \

1823 
°©ic_ˇ°
<>(
__VA_ARGS__
); \

1824 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edEx˚±i⁄NŸThrown
(); \

1826 
	`ˇtch
( ... ) { \

1827 
C©ch
::
	`h™dÀEx˚±i⁄M©chEx¥
–
ˇtchAs£πi⁄H™dÀr
, 
m©chî
, #matcher ); \

1830 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀThrowögCÆlSkù≥d
(); \

1831 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

1832 }  
Ál£
 )

	)

1843 
	~<c°ddef
>

1845 
«me•a˚
 
	gC©ch
 {

1847 
	sCou¡s
 {

1848 
Cou¡s
 
	g›î©‹
 - ( Cou¡†c⁄°& 
	gŸhî
 ) const;

1849 
	gCou¡s
& 
	g›î©‹
 +–
Cou¡s
 c⁄°& 
Ÿhî
 );

1851 
	g°d
::
size_t
 
tŸÆ
() const;

1852 
boﬁ
 
ÆlPas£d
() const;

1853 
boﬁ
 
ÆlOk
() const;

1855 
	g°d
::
size_t
 
∑s£d
 = 0;

1856 
	g°d
::
size_t
 
Áûed
 = 0;

1857 
	g°d
::
size_t
 
ÁûedButOk
 = 0;

1860 
	sTŸÆs
 {

1862 
TŸÆs
 
	g›î©‹
 - ( TŸÆ†c⁄°& 
	gŸhî
 ) const;

1863 
	gTŸÆs
& 
	g›î©‹
 +–
TŸÆs
 c⁄°& 
Ÿhî
 );

1865 
TŸÆs
 
dñè
–TŸÆ†c⁄°& 
¥evTŸÆs
 ) const;

1867 
	gîr‹
 = 0;

1868 
Cou¡s
 
	gas£πi⁄s
;

1869 
Cou¡s
 
	gã°Ca£s
;

1874 
	~<°rög
>

1876 
«me•a˚
 
	gC©ch
 {

1878 
	sSe˘i⁄Info
 {

1879 
	gSe˘i⁄Info


1880 –
Sour˚LöeInfo
 c⁄°& 
	g_löeInfo
,

1881 
	g°d
::
°rög
 c⁄°& 
_«me
 );

1884 
	gSe˘i⁄Info


1885 –
Sour˚LöeInfo
 c⁄°& 
	g_löeInfo
,

1886 
	g°d
::
°rög
 c⁄°& 
_«me
,

1887 
	g°d
::
°rög
 c⁄°& ) : 
Se˘i⁄Info
–
_löeInfo
, 
_«me
 ) {}

1889 
	g°d
::
°rög
 
«me
;

1890 
	g°d
::
°rög
 
des¸ùti⁄
;

1891 
Sour˚LöeInfo
 
	glöeInfo
;

1894 
	sSe˘i⁄EndInfo
 {

1895 
Se˘i⁄Info
 
	g£˘i⁄Info
;

1896 
Cou¡s
 
	g¥evAs£πi⁄s
;

1897 
	gduøti⁄InSec⁄ds
;

1905 
	~<c°döt
>

1907 
«me•a˚
 
	gC©ch
 {

1909 autÿ
gëCuºítN™o£c⁄dsSö˚Epoch
(Ë-> 
	guöt64_t
;

1910 autÿ
gëE°im©edClockResﬁuti⁄
(Ë-> 
	guöt64_t
;

1912 ˛as†
	cTimî
 {

1913 
uöt64_t
 
	gm_«no£c⁄ds
 = 0;

1914 
	gpublic
:

1915 
°¨t
();

1916 autÿ
gëEœp£dN™o£c⁄ds
(Ëc⁄° -> 
	guöt64_t
;

1917 autÿ
gëEœp£dMi¸o£c⁄ds
(Ëc⁄° -> 
	guöt64_t
;

1918 autÿ
gëEœp£dMûli£c⁄ds
() const -> ;

1919 autÿ
gëEœp£dSec⁄ds
() const -> ;

1925 
	~<°rög
>

1927 
«me•a˚
 
	gC©ch
 {

1929 ˛as†
	cSe˘i⁄
 : 
N⁄C›yabÀ
 {

1930 
public
:

1931 
Se˘i⁄
–
Se˘i⁄Info
 c⁄°& 
öfo
 );

1932 ~
Se˘i⁄
();

1935 
ex∂icô
 
›î©‹
 
boﬁ
() const;

1937 
	g¥iv©e
:

1938 
Se˘i⁄Info
 
m_öfo
;

1940 
	g°d
::
°rög
 
m_«me
;

1941 
Cou¡s
 
	gm_as£πi⁄s
;

1942 
boﬁ
 
	gm_£˘i⁄In˛uded
;

1943 
Timî
 
	gm_timî
;

1948 
	#INTERNAL_CATCH_SECTION
( ... ) \

1949 
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS
 \

1950 if–
C©ch
::
Se˘i⁄
 c⁄°& 
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Se˘i⁄
 ) = C©ch::
	`Se˘i⁄Info
–
CATCH_INTERNAL_LINEINFO
, 
__VA_ARGS__
 ) ) \

1951 
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS


	)

1953 
	#INTERNAL_CATCH_DYNAMIC_SECTION
( ... ) \

1954 
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS
 \

1955 if–
C©ch
::
Se˘i⁄
 c⁄°& 
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Se˘i⁄
 ) = C©ch::
	`Se˘i⁄Info
–
CATCH_INTERNAL_LINEINFO
, (C©ch::
	`ReußbÀSåögSåóm
(Ë<< 
__VA_ARGS__
).
	`°r
() ) ) \

1956 
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS


	)

1961 
	~<c°döt
>

1962 
	~<°rög
>

1964 
«me•a˚
 
	gC©ch
 {

1966 ˛as†
	cBíchm¨kLo›î
 {

1968 
	g°d
::
°rög
 
m_«me
;

1969 
	g°d
::
size_t
 
m_cou¡
 = 0;

1970 
	g°d
::
size_t
 
m_ôî©i⁄sToRun
 = 1;

1971 
uöt64_t
 
	gm_ªsﬁuti⁄
;

1972 
Timî
 
	gm_timî
;

1974 autÿ
gëResﬁuti⁄
(Ë-> 
	guöt64_t
;

1975 
	gpublic
:

1977 
Bíchm¨kLo›î
–
SåögRef
 
«me
 )

1978 : 
m_«me
–
«me
 ),

1979 
m_ªsﬁuti⁄
–
gëResﬁuti⁄
() )

1981 
ªp‹tSèπ
();

1982 
	gm_timî
.
°¨t
();

1985 
ex∂icô
 
›î©‹
 
boﬁ
() {

1986 if–
	gm_cou¡
 < 
	gm_ôî©i⁄sToRun
 )

1987  
	gåue
;

1988  
√edsM‹eIãøti⁄s
();

1991 
ö¸emít
() {

1992 ++
	gm_cou¡
;

1995 
ªp‹tSèπ
();

1996 autÿ
√edsM‹eIãøti⁄s
(Ë-> 
	gboﬁ
;

2001 
	#BENCHMARK
–
«me
 ) \

2002  
C©ch
::
Bíchm¨kLo›î
 
	`lo›î
–
«me
 ); 
lo›î
;Üo›î.
	`ö¸emít
(Ë)

	)

2009 
	~<°rög
>

2010 
	~<mem‹y
>

2012 
«me•a˚
 
	gC©ch
 {

2014 
˛ass
 
	gTe°Ca£
;

2015 
	gITe°Ca£Regi°ry
;

2016 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
;

2017 
	gIEx˚±i⁄Tøn¶©‹
;

2018 
	gIRï‹ãrRegi°ry
;

2019 
	gIRï‹ãrFa˘‹y
;

2020 
	gITagAlüsRegi°ry
;

2021 
˛ass
 
	gSèπupEx˚±i⁄Regi°ry
;

2023 
usög
 
	gIRï‹ãrFa˘‹yPå
 = 
°d
::
sh¨ed_±r
<
IRï‹ãrFa˘‹y
>;

2025 
	sIRegi°ryHub
 {

2026 
	gvútuÆ
 ~
IRegi°ryHub
();

2028 
vútuÆ
 
IRï‹ãrRegi°ry
 c⁄°& 
gëRï‹ãrRegi°ry
() const = 0;

2029 
vútuÆ
 
ITe°Ca£Regi°ry
 c⁄°& 
gëTe°Ca£Regi°ry
() const = 0;

2030 
vútuÆ
 
ITagAlüsRegi°ry
 c⁄°& 
gëTagAlüsRegi°ry
() const = 0;

2032 
vútuÆ
 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
& 
gëEx˚±i⁄Tøn¶©‹Regi°ry
() = 0;

2034 
vútuÆ
 
SèπupEx˚±i⁄Regi°ry
 c⁄°& 
gëSèπupEx˚±i⁄Regi°ry
() const = 0;

2037 
	sIMuèbÀRegi°ryHub
 {

2038 
	gvútuÆ
 ~
IMuèbÀRegi°ryHub
();

2039 
vútuÆ
 
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 ) = 0;

2040 
vútuÆ
 
ªgi°îLi°íî
–
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 ) = 0;

2041 
vútuÆ
 
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Info
 ) = 0;

2042 
vútuÆ
 
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 ) = 0;

2043 
vútuÆ
 
ªgi°îTagAlüs
–
°d
::
°rög
 c⁄°& 
Æüs
, std::°rög c⁄°& 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 ) = 0;

2044 
vútuÆ
 
ªgi°îSèπupEx˚±i⁄
(Ë
	gn€x˚±
 = 0;

2047 
	gIRegi°ryHub
& 
gëRegi°ryHub
();

2048 
	gIMuèbÀRegi°ryHub
& 
gëMuèbÀRegi°ryHub
();

2049 
˛ónUp
();

2050 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
();

2055 #i‡
deföed
(
CATCH_CONFIG_DISABLE
)

2056 
	#INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG
–
å™¶©‹Name
, 
sig«tuª
) \

2057 
°d
::
°rög
 
	`å™¶©‹Name
–
sig«tuª
 )

	)

2060 
	~<ex˚±i⁄
>

2061 
	~<°rög
>

2062 
	~<ve˘‹
>

2064 
«me•a˚
 
	gC©ch
 {

2065 
usög
 
	gex˚±i⁄Tøn¶©eFun˘i⁄
 = 
°d
::
°rög
(*)();

2067 
	gIEx˚±i⁄Tøn¶©‹
;

2068 
usög
 
	gEx˚±i⁄Tøn¶©‹s
 = 
°d
::
ve˘‹
<°d::
unique_±r
<
IEx˚±i⁄Tøn¶©‹
 const>>;

2070 
	sIEx˚±i⁄Tøn¶©‹
 {

2071 
	gvútuÆ
 ~
IEx˚±i⁄Tøn¶©‹
();

2072 
vútuÆ
 
	g°d
::
°rög
 
å™¶©e
–
Ex˚±i⁄Tøn¶©‹s
::
c⁄°_ôî©‹
 
ô
, Ex˚±i⁄Tøn¶©‹s::c⁄°_ôî©‹ 
ôEnd
 ) const = 0;

2075 
	sIEx˚±i⁄Tøn¶©‹Regi°ry
 {

2076 
	gvútuÆ
 ~
IEx˚±i⁄Tøn¶©‹Regi°ry
();

2078 
vútuÆ
 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
() const = 0;

2081 ˛as†
	cEx˚±i⁄Tøn¶©‹Regi°ør
 {

2082 
	gãm∂©e
<
ty≥«me
 
	gT
>

2083 ˛as†
	cEx˚±i⁄Tøn¶©‹
 : 
public
 
IEx˚±i⁄Tøn¶©‹
 {

2084 
public
:

2086 
Ex˚±i⁄Tøn¶©‹
–
°d
::
°rög
(*
å™¶©eFun˘i⁄
)–
T
& ) )

2087 : 
m_å™¶©eFun˘i⁄
–
å™¶©eFun˘i⁄
 )

2090 
°d
::
°rög
 
å™¶©e
–
Ex˚±i⁄Tøn¶©‹s
::
c⁄°_ôî©‹
 
ô
, Ex˚±i⁄Tøn¶©‹s::c⁄°_ôî©‹ 
ôEnd
 ) c⁄° 
ovîride
 {

2091 
åy
 {

2092 if–
ô
 =
ôEnd
 )

2093 
°d
::
ªthrow_ex˚±i⁄
(°d::
cuºít_ex˚±i⁄
());

2095  (*
	gô
)->
å™¶©e
–
ô
+1, 
ôEnd
 );

2097 
ˇtch
–
T
& 
ex
 ) {

2098  
m_å™¶©eFun˘i⁄
–
ex
 );

2102 
	g¥Ÿe˘ed
:

2103 
°d
::
°rög
(*
m_å™¶©eFun˘i⁄
)–
T
& );

2106 
	gpublic
:

2107 
ãm∂©e
<
ty≥«me
 
T
>

2108 
Ex˚±i⁄Tøn¶©‹Regi°ør
–
°d
::
°rög
(*
å™¶©eFun˘i⁄
)–
T
& ) ) {

2109 
gëMuèbÀRegi°ryHub
().
ªgi°îTøn¶©‹


2110 –
√w
 
Ex˚±i⁄Tøn¶©‹
<
T
>–
å™¶©eFun˘i⁄
 ) );

2116 
	#INTERNAL_CATCH_TRANSLATE_EXCEPTION2
–
å™¶©‹Name
, 
sig«tuª
 ) \

2117 
°d
::
°rög
 
	`å™¶©‹Name
–
sig«tuª
 ); \

2118 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

2119 
«me•a˚
{ 
C©ch
::
Ex˚±i⁄Tøn¶©‹Regi°ør
 
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Ex˚±i⁄Regi°ør
 )–&
å™¶©‹Name
 ); } \

2120 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
 \

2121 
°d
::
°rög
 
	`å™¶©‹Name
–
sig«tuª
 )

	)

2123 
	#INTERNAL_CATCH_TRANSLATE_EXCEPTION
–
sig«tuª
 ) 
	`INTERNAL_CATCH_TRANSLATE_EXCEPTION2
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Ex˚±i⁄Tøn¶©‹
 ), sig«tuª )

	)

2128 
	~<ty≥_åaôs
>

2129 
	~<°dex˚±
>

2131 
«me•a˚
 
	gC©ch
 {

2132 
«me•a˚
 
	gDëaû
 {

2134 ˛as†
	cAµrox
 {

2135 
	g¥iv©e
:

2136 
boﬁ
 
equÆôyCom∑ris⁄Im∂
(
Ÿhî
) const;

2138 
	gpublic
:

2139 
ex∂icô
 
Aµrox
 ( 
vÆue
 );

2141 
Aµrox
 
cu°om
();

2143 
Aµrox
 
	g›î©‹
-() const;

2145 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2146 
Aµrox
 
›î©‹
()–
T
 c⁄°& 
vÆue
 ) {

2147 
Aµrox
 
≠¥ox
–
°©ic_ˇ°
<>(
vÆue
) );

2148 
	g≠¥ox
.
ïsû⁄
–
m_ïsû⁄
 );

2149 
	g≠¥ox
.
m¨gö
–
m_m¨gö
 );

2150 
	g≠¥ox
.
sˇÀ
–
m_sˇÀ
 );

2151  
	g≠¥ox
;

2154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2155 
ex∂icô
 
Aµrox
–
T
 c⁄°& 
vÆue
 ): Aµrox(
°©ic_ˇ°
<>(value))

2158 
ãm∂©e
 <
ty≥«me
 
T
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, 
	gT
>::
vÆue
>::
ty≥
>

2159 
‰õnd
 
boﬁ
 
›î©‹
 =–c⁄° 
T
& 
lhs
, 
Aµrox
 c⁄°& 
	grhs
 ) {

2160 autÿ
	glhs_v
 = 
°©ic_ˇ°
<>(
lhs
);

2161  
	grhs
.
equÆôyCom∑ris⁄Im∂
(
lhs_v
);

2164 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2165 
‰õnd
 
boﬁ
 
›î©‹
 =–
Aµrox
 c⁄°& 
lhs
, c⁄° 
	gT
& 
	grhs
 ) {

2166  
	g›î©‹
==–
rhs
, 
	glhs
 );

2169 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2170 
‰õnd
 
boﬁ
 
›î©‹
 !–
T
 c⁄°& 
lhs
, 
Aµrox
 c⁄°& 
	grhs
 ) {

2171  !
	g›î©‹
==–
lhs
, 
	grhs
 );

2174 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2175 
‰õnd
 
boﬁ
 
›î©‹
 !–
Aµrox
 c⁄°& 
lhs
, 
T
 c⁄°& 
	grhs
 ) {

2176  !
	g›î©‹
==–
rhs
, 
	glhs
 );

2179 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2180 
‰õnd
 
boﬁ
 
›î©‹
 <–
T
 c⁄°& 
lhs
, 
Aµrox
 c⁄°& 
	grhs
 ) {

2181  
	g°©ic_ˇ°
<>(
	glhs
Ë< 
	grhs
.
	gm_vÆue
 ||Üh†=
rhs
;

2184 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2185 
‰õnd
 
boﬁ
 
›î©‹
 <–
Aµrox
 c⁄°& 
lhs
, 
T
 c⁄°& 
	grhs
 ) {

2186  
	glhs
.
	gm_vÆue
 < 
	g°©ic_ˇ°
<>(
	grhs
Ë||Üh†=
rhs
;

2189 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2190 
‰õnd
 
boﬁ
 
›î©‹
 >–
T
 c⁄°& 
lhs
, 
Aµrox
 c⁄°& 
	grhs
 ) {

2191  
	g°©ic_ˇ°
<>(
	glhs
Ë> 
	grhs
.
	gm_vÆue
 ||Üh†=
rhs
;

2194 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2195 
‰õnd
 
boﬁ
 
›î©‹
 >–
Aµrox
 c⁄°& 
lhs
, 
T
 c⁄°& 
	grhs
 ) {

2196  
	glhs
.
	gm_vÆue
 > 
	g°©ic_ˇ°
<>(
	grhs
Ë||Üh†=
rhs
;

2199 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2200 
Aµrox
& 
ïsû⁄
–
T
 c⁄°& 
√wEpsû⁄
 ) {

2201 
ïsû⁄AsDoubÀ
 = 
°©ic_ˇ°
<>(
√wEpsû⁄
);

2202 if–
	gïsû⁄AsDoubÀ
 < 0 ||ÉpsilonAsDouble > 1.0 ) {

2203 
throw
 
	g°d
::
domaö_îr‹


2205 
C©ch
::
Dëaû
::
°rögify
–
ïsû⁄AsDoubÀ
 ) +

2208 
	gm_ïsû⁄
 = 
ïsû⁄AsDoubÀ
;

2209  *
	gthis
;

2212 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2213 
Aµrox
& 
m¨gö
–
T
 c⁄°& 
√wM¨gö
 ) {

2214 
m¨göAsDoubÀ
 = 
°©ic_ˇ°
<>(
√wM¨gö
);

2215 if–
	gm¨göAsDoubÀ
 < 0 ) {

2216 
throw
 
	g°d
::
domaö_îr‹


2218 
C©ch
::
Dëaû
::
°rögify
–
m¨göAsDoubÀ
 ) +

2222 
	gm_m¨gö
 = 
m¨göAsDoubÀ
;

2223  *
	gthis
;

2226 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<°d::
is_c⁄°ru˘ibÀ
<, T>::
vÆue
>::
ty≥
>

2227 
Aµrox
& 
sˇÀ
–
T
 c⁄°& 
√wSˇÀ
 ) {

2228 
m_sˇÀ
 = 
°©ic_ˇ°
<>(
√wSˇÀ
);

2229  *
	gthis
;

2232 
	g°d
::
°rög
 
toSåög
() const;

2234 
	g¥iv©e
:

2235 
m_ïsû⁄
;

2236 
	gm_m¨gö
;

2237 
	gm_sˇÀ
;

2238 
	gm_vÆue
;

2242 
«me•a˚
 
	glôîÆs
 {

2243 
	gDëaû
::
Aµrox
 
›î©‹
 "" 
_a
(
vÆ
);

2244 
	gDëaû
::
Aµrox
 
›î©‹
 "" 
_a
(
vÆ
);

2247 
	gãm∂©e
<>

2248 
	gSåögMakî
<
	gC©ch
::
Dëaû
::
Aµrox
> {

2249 
°d
::
°rög
 
c⁄vît
(
C©ch
::
Dëaû
::
Aµrox
 c⁄°& 
vÆue
);

2257 
	~<°rög
>

2258 
	~<iosfwd
>

2260 
«me•a˚
 
	gC©ch
 {

2262 
boﬁ
 
°¨tsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
¥efix
 );

2263 
boﬁ
 
°¨tsWôh
–
°d
::
°rög
 c⁄°& 
s
, 
¥efix
 );

2264 
boﬁ
 
ídsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
suffix
 );

2265 
boﬁ
 
ídsWôh
–
°d
::
°rög
 c⁄°& 
s
, 
suffix
 );

2266 
boﬁ
 
c⁄èös
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
öfix
 );

2267 
toLowîInPœ˚
–
°d
::
°rög
& 
s
 );

2268 
	g°d
::
°rög
 
toLowî
–
°d
::°rög c⁄°& 
s
 );

2269 
	g°d
::
°rög
 
åim
–
°d
::°rög c⁄°& 
°r
 );

2270 
boﬁ
 
ª∂a˚InPœ˚
–
°d
::
°rög
& 
°r
, std::°rög c⁄°& 
ª∂a˚This
, std::°rög c⁄°& 
wôhThis
 );

2272 
	s∂uøli£
 {

2273 
∂uøli£
–
°d
::
size_t
 
cou¡
, std::
°rög
 c⁄°& 
œbñ
 );

2275 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
∂uøli£
 c⁄°& 
	g∂uøli£r
 );

2277 
	g°d
::
size_t
 
m_cou¡
;

2278 
	g°d
::
°rög
 
m_œbñ
;

2283 #i‚de‡
CATCH_CONFIG_DISABLE_MATCHERS


2288 
	~<°rög
>

2289 
	~<ve˘‹
>

2291 
«me•a˚
 
	gC©ch
 {

2292 
«me•a˚
 
	gM©chîs
 {

2293 
«me•a˚
 
	gIm∂
 {

2295 
	gãm∂©e
<
ty≥«me
 
	gArgT
> 
	gM©chAŒOf
;

2296 
	gãm∂©e
<
ty≥«me
 
	gArgT
> 
	gM©chAnyOf
;

2297 
	gãm∂©e
<
ty≥«me
 
	gArgT
> 
	gM©chNŸOf
;

2299 ˛as†
	cM©chîU¡y≥dBa£
 {

2300 
	gpublic
:

2301 
M©chîU¡y≥dBa£
() = ;

2302 
M©chîU¡y≥dBa£
 ( MatcherUntypedBase const& ) = ;

2303 
	gM©chîU¡y≥dBa£
& 
	g›î©‹
 = ( 
M©chîU¡y≥dBa£
 c⁄°& ) = 
dñëe
;

2304 
	g°d
::
°rög
 
toSåög
() const;

2306 
	g¥Ÿe˘ed
:

2307 
vútuÆ
 ~
M©chîU¡y≥dBa£
();

2308 
vútuÆ
 
	g°d
::
°rög
 
des¸ibe
() const = 0;

2309 
muèbÀ
 
	g°d
::
°rög
 
m_ˇchedToSåög
;

2312 
	gãm∂©e
<
ty≥«me
 
	gObje˘T
>

2313 
	sM©chîMëhod
 {

2314 
vútuÆ
 
boﬁ
 
m©ch
–
Obje˘T
 c⁄°& 
¨g
 ) const = 0;

2316 
	gãm∂©e
<
ty≥«me
 
	gPåT
>

2317 
	gM©chîMëhod
<
	gPåT
*> {

2318 
vútuÆ
 
boﬁ
 
m©ch
–
PåT
* 
¨g
 ) const = 0;

2321 
	gãm∂©e
<
ty≥«me
 
	gT
>

2322 
	gM©chîBa£
 : 
M©chîU¡y≥dBa£
, 
	gM©chîMëhod
<
	gT
> {

2324 
	gM©chAŒOf
<
	gT
> 
	g›î©‹
 && ( 
M©chîBa£
 c⁄°& 
	gŸhî
 ) const;

2325 
	gM©chAnyOf
<
	gT
> 
	g›î©‹
 || ( 
M©chîBa£
 c⁄°& 
	gŸhî
 ) const;

2326 
	gM©chNŸOf
<
	gT
> 
	g›î©‹
 ! () const;

2329 
	gãm∂©e
<
ty≥«me
 
	gArgT
>

2330 
	gM©chAŒOf
 : 
M©chîBa£
<
ArgT
> {

2331 
boﬁ
 
m©ch
–
ArgT
 c⁄°& 
¨g
 ) c⁄° 
ovîride
 {

2332 áutÿ
m©chî
 : 
m_m©chîs
 ) {

2333 i‡(!
m©chî
->
m©ch
(
¨g
))

2334  
Ál£
;

2336  
	gåue
;

2338 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2339 
°d
::
°rög
 
des¸ùti⁄
;

2340 
	gdes¸ùti⁄
.
ª£rve
–4 + 
m_m©chîs
.
size
()*32 );

2341 
	gdes¸ùti⁄
 += "( ";

2342 
boﬁ
 
	gfú°
 = 
åue
;

2343 áutÿ
	gm©chî
 : 
m_m©chîs
 ) {

2344 if–
fú°
 )

2345 
fú°
 = 
Ál£
;

2347 
	gdes¸ùti⁄
 += "ánd ";

2348 
	gdes¸ùti⁄
 +
m©chî
->
toSåög
();

2350 
	gdes¸ùti⁄
 += " )";

2351  
	gdes¸ùti⁄
;

2354 
	gM©chAŒOf
<
	gArgT
>& 
	g›î©‹
 && ( 
	gM©chîBa£
<ArgT> c⁄°& 
	gŸhî
 ) {

2355 
	gm_m©chîs
.
push_back
–&
Ÿhî
 );

2356  *
	gthis
;

2359 
	g°d
::
ve˘‹
<
M©chîBa£
<
ArgT
> c⁄°*> 
m_m©chîs
;

2361 
	gãm∂©e
<
ty≥«me
 
	gArgT
>

2362 
	gM©chAnyOf
 : 
M©chîBa£
<
ArgT
> {

2364 
boﬁ
 
m©ch
–
ArgT
 c⁄°& 
¨g
 ) c⁄° 
ovîride
 {

2365 áutÿ
m©chî
 : 
m_m©chîs
 ) {

2366 i‡(
m©chî
->
m©ch
(
¨g
))

2367  
åue
;

2369  
	gÁl£
;

2371 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2372 
°d
::
°rög
 
des¸ùti⁄
;

2373 
	gdes¸ùti⁄
.
ª£rve
–4 + 
m_m©chîs
.
size
()*32 );

2374 
	gdes¸ùti⁄
 += "( ";

2375 
boﬁ
 
	gfú°
 = 
åue
;

2376 áutÿ
	gm©chî
 : 
m_m©chîs
 ) {

2377 if–
fú°
 )

2378 
fú°
 = 
Ál£
;

2380 
	gdes¸ùti⁄
 += " or ";

2381 
	gdes¸ùti⁄
 +
m©chî
->
toSåög
();

2383 
	gdes¸ùti⁄
 += " )";

2384  
	gdes¸ùti⁄
;

2387 
	gM©chAnyOf
<
	gArgT
>& 
	g›î©‹
 || ( 
	gM©chîBa£
<ArgT> c⁄°& 
	gŸhî
 ) {

2388 
	gm_m©chîs
.
push_back
–&
Ÿhî
 );

2389  *
	gthis
;

2392 
	g°d
::
ve˘‹
<
M©chîBa£
<
ArgT
> c⁄°*> 
m_m©chîs
;

2395 
	gãm∂©e
<
ty≥«me
 
	gArgT
>

2396 
	gM©chNŸOf
 : 
M©chîBa£
<
ArgT
> {

2398 
M©chNŸOf
–
M©chîBa£
<
ArgT
> c⁄°& 
undîlyögM©chî
 ) : 
m_undîlyögM©chî
( underlyingMatcher ) {}

2400 
boﬁ
 
m©ch
–
ArgT
 c⁄°& 
¨g
 ) c⁄° 
ovîride
 {

2401  !
m_undîlyögM©chî
.
m©ch
–
¨g
 );

2404 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2405  "nŸ " + 
m_undîlyögM©chî
.
toSåög
();

2407 
	gM©chîBa£
<
	gArgT
> c⁄°& 
	gm_undîlyögM©chî
;

2410 
	gãm∂©e
<
ty≥«me
 
	gT
>

2411 
	gM©chAŒOf
<
	gT
> 
	gM©chîBa£
<T>::
›î©‹
 && ( 
M©chîBa£
 c⁄°& 
Ÿhî
 ) const {

2412  
M©chAŒOf
<
T
>(Ë&& *
this
 && 
Ÿhî
;

2414 
	gãm∂©e
<
ty≥«me
 
	gT
>

2415 
	gM©chAnyOf
<
	gT
> 
	gM©chîBa£
<T>::
›î©‹
 || ( 
M©chîBa£
 c⁄°& 
Ÿhî
 ) const {

2416  
M©chAnyOf
<
T
>(Ë|| *
this
 || 
Ÿhî
;

2418 
	gãm∂©e
<
ty≥«me
 
	gT
>

2419 
	gM©chNŸOf
<
	gT
> 
	gM©chîBa£
<T>::
›î©‹
 ! () const {

2420  
M©chNŸOf
<
T
>–*
this
 );

2427 
usög
 
«me•a˚
 
	gM©chîs
;

2428 
usög
 
	gM©chîs
::
Im∂
::
M©chîBa£
;

2435 
	~<ty≥_åaôs
>

2436 
	~<cm©h
>

2438 
«me•a˚
 
	gC©ch
 {

2439 
«me•a˚
 
	gM©chîs
 {

2441 
«me•a˚
 
	gFlﬂtög
 {

2443 
˛ass
 
	gFlﬂtögPoötKöd
 : 
uöt8_t
;

2445 
	gWôhöAbsM©chî
 : 
M©chîBa£
<> {

2446 
WôhöAbsM©chî
(
èrgë
, 
m¨gö
);

2447 
boﬁ
 
m©ch
(c⁄°& 
m©chì
Ëc⁄° 
	govîride
;

2448 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
;

2449 
	g¥iv©e
:

2450 
m_èrgë
;

2451 
	gm_m¨gö
;

2454 
	gWôhöUÕsM©chî
 : 
M©chîBa£
<> {

2455 
WôhöUÕsM©chî
(
èrgë
, 
uÕs
, 
FlﬂtögPoötKöd
 
ba£Ty≥
);

2456 
boﬁ
 
m©ch
(c⁄°& 
m©chì
Ëc⁄° 
	govîride
;

2457 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
;

2458 
	g¥iv©e
:

2459 
m_èrgë
;

2460 
	gm_uÕs
;

2461 
FlﬂtögPoötKöd
 
	gm_ty≥
;

2468 
	gFlﬂtög
::
WôhöUÕsM©chî
 
WôhöULP
(
èrgë
, 
maxUÕDiff
);

2469 
	gFlﬂtög
::
WôhöUÕsM©chî
 
WôhöULP
(
èrgë
, 
maxUÕDiff
);

2470 
	gFlﬂtög
::
WôhöAbsM©chî
 
WôhöAbs
(
èrgë
, 
m¨gö
);

2478 
	~<fun˘i⁄Æ
>

2479 
	~<°rög
>

2481 
«me•a˚
 
	gC©ch
 {

2482 
«me•a˚
 
	gM©chîs
 {

2483 
«me•a˚
 
	gGíîic
 {

2485 
«me•a˚
 
	gDëaû
 {

2486 
	g°d
::
°rög
 
föÆizeDes¸ùti⁄
(c⁄° 
°d
::°rög& 
desc
);

2489 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2490 
˛ass
 
	gPªdiˇãM©chî
 : 
public
 
M©chîBa£
<
T
> {

2491 
°d
::
fun˘i⁄
<
boﬁ
(
T
 c⁄°&)> 
m_¥ediˇã
;

2492 
	g°d
::
°rög
 
m_des¸ùti⁄
;

2493 
	gpublic
:

2495 
PªdiˇãM©chî
(
°d
::
fun˘i⁄
<
boﬁ
(
T
 c⁄°&)> c⁄°& 
ñem
, std::
°rög
 c⁄°& 
des¸
)

2496 :
m_¥ediˇã
(
°d
::
move
(
ñem
)),

2497 
m_des¸ùti⁄
(
Dëaû
::
föÆizeDes¸ùti⁄
(
des¸
))

2500 
boﬁ
 
m©ch
–
T
 c⁄°& 
ôem
 ) c⁄° 
ovîride
 {

2501  
m_¥ediˇã
(
ôem
);

2504 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2505  
m_des¸ùti⁄
;

2515 
	gãm∂©e
<
ty≥«me
 
	gT
>

2516 
	gGíîic
::
PªdiˇãM©chî
<
T
> 
Pªdiˇã
(
°d
::
fun˘i⁄
<
boﬁ
(T c⁄°&)> c⁄°& 
¥ediˇã
, std::
°rög
 c⁄°& 
des¸ùti⁄
 = "") {

2517  
Gíîic
::
PªdiˇãM©chî
<
T
>(
¥ediˇã
, 
des¸ùti⁄
);

2526 
	~<°rög
>

2528 
«me•a˚
 
	gC©ch
 {

2529 
«me•a˚
 
	gM©chîs
 {

2531 
«me•a˚
 
	gStdSåög
 {

2533 
	sCa£dSåög


2535 
Ca£dSåög
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 );

2536 
	g°d
::
°rög
 
adju°Såög
–
°d
::°rög c⁄°& 
°r
 ) const;

2537 
	g°d
::
°rög
 
ˇ£SísôivôySuffix
() const;

2539 
	gCa£Sísôive
::
Choi˚
 
m_ˇ£Sísôivôy
;

2540 
	g°d
::
°rög
 
m_°r
;

2543 
	gSåögM©chîBa£
 : 
M©chîBa£
<
°d
::
°rög
> {

2544 
SåögM©chîBa£
–
°d
::
°rög
 c⁄°& 
›î©i⁄
, 
Ca£dSåög
 c⁄°& 
com∑øt‹
 );

2545 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
;

2547 
Ca£dSåög
 
	gm_com∑øt‹
;

2548 
	g°d
::
°rög
 
m_›î©i⁄
;

2551 
	gEquÆsM©chî
 : 
SåögM©chîBa£
 {

2552 
EquÆsM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 );

2553 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) c⁄° 
ovîride
;

2555 
	gC⁄èösM©chî
 : 
SåögM©chîBa£
 {

2556 
C⁄èösM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 );

2557 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) c⁄° 
ovîride
;

2559 
	gSèπsWôhM©chî
 : 
SåögM©chîBa£
 {

2560 
SèπsWôhM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 );

2561 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) c⁄° 
ovîride
;

2563 
	gEndsWôhM©chî
 : 
SåögM©chîBa£
 {

2564 
EndsWôhM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 );

2565 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) c⁄° 
ovîride
;

2568 
	gRegexM©chî
 : 
M©chîBa£
<
°d
::
°rög
> {

2569 
RegexM©chî
–
°d
::
°rög
 
ªgex
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 );

2570 
boﬁ
 
m©ch
–
°d
::
°rög
 c⁄°& 
m©chì
 ) c⁄° 
ovîride
;

2571 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
;

2573 
	g¥iv©e
:

2574 
°d
::
°rög
 
m_ªgex
;

2575 
	gCa£Sísôive
::
Choi˚
 
m_ˇ£Sísôivôy
;

2583 
	gStdSåög
::
EquÆsM©chî
 
EquÆs
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 );

2584 
	gStdSåög
::
C⁄èösM©chî
 
C⁄èös
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 );

2585 
	gStdSåög
::
EndsWôhM©chî
 
EndsWôh
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 );

2586 
	gStdSåög
::
SèπsWôhM©chî
 
SèπsWôh
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 );

2587 
	gStdSåög
::
RegexM©chî
 
M©ches
–
°d
::
°rög
 c⁄°& 
ªgex
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 = Ca£Sísôive::
Yes
 );

2595 
	~<Æg‹ôhm
>

2597 
«me•a˚
 
	gC©ch
 {

2598 
«me•a˚
 
	gM©chîs
 {

2600 
«me•a˚
 
	gVe˘‹
 {

2601 
«me•a˚
 
	gDëaû
 {

2602 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
,Åy≥«mê
	gT
>

2603 
size_t
 
cou¡
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
, 
T
 c⁄°& 
ôem
) {

2604 
size_t
 
	g˙t
 = 0;

2605 ; 
	gfú°
 !
œ°
; ++first) {

2606 i‡(*
	gfú°
 =
ôem
) {

2607 ++
˙t
;

2610  
	g˙t
;

2612 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãøt‹
,Åy≥«mê
	gT
>

2613 
boﬁ
 
c⁄èös
(
I≈utIãøt‹
 
fú°
, I≈utIãøt‹ 
œ°
, 
T
 c⁄°& 
ôem
) {

2614 ; 
	gfú°
 !
œ°
; ++first) {

2615 i‡(*
	gfú°
 =
ôem
) {

2616  
åue
;

2619  
	gÁl£
;

2623 
	gãm∂©e
<
ty≥«me
 
	gT
>

2624 
	gC⁄èösEÀmítM©chî
 : 
M©chîBa£
<
°d
::
ve˘‹
<
T
>> {

2626 
C⁄èösEÀmítM©chî
(
T
 c⁄° &
com∑øt‹
Ë: 
m_com∑øt‹
( comparator) {}

2628 
boﬁ
 
m©ch
(
°d
::
ve˘‹
<
T
> c⁄° &
v
Ëc⁄° 
ovîride
 {

2629 autÿc⁄°& 
ñ
 : 
v
) {

2630 i‡(
ñ
 =
m_com∑øt‹
) {

2631  
åue
;

2634  
	gÁl£
;

2637 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2638  "C⁄èös: " + ::
C©ch
::
Dëaû
::
°rögify
–
m_com∑øt‹
 );

2641 
T
 c⁄°& 
	gm_com∑øt‹
;

2644 
	gãm∂©e
<
ty≥«me
 
	gT
>

2645 
	gC⁄èösM©chî
 : 
M©chîBa£
<
°d
::
ve˘‹
<
T
>> {

2647 
C⁄èösM©chî
(
°d
::
ve˘‹
<
T
> c⁄° &
com∑øt‹
Ë: 
m_com∑øt‹
( comparator ) {}

2649 
boﬁ
 
m©ch
(
°d
::
ve˘‹
<
T
> c⁄° &
v
Ëc⁄° 
ovîride
 {

2651 i‡(
m_com∑øt‹
.
size
(Ë> 
v
.size())

2652  
Ál£
;

2653 autÿc⁄°& 
	gcom∑øt‹
 : 
m_com∑øt‹
) {

2654 autÿ
¥e£¡
 = 
Ál£
;

2655 c⁄°áuto& 
	gñ
 : 
v
) {

2656 i‡(
ñ
 =
com∑øt‹
) {

2657 
¥e£¡
 = 
åue
;

2661 i‡(!
	g¥e£¡
) {

2662  
	gÁl£
;

2665  
	gåue
;

2667 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2668  "C⁄èös: " + ::
C©ch
::
Dëaû
::
°rögify
–
m_com∑øt‹
 );

2671 
	g°d
::
ve˘‹
<
T
> c⁄°& 
m_com∑øt‹
;

2674 
	gãm∂©e
<
ty≥«me
 
	gT
>

2675 
	gEquÆsM©chî
 : 
M©chîBa£
<
°d
::
ve˘‹
<
T
>> {

2677 
EquÆsM©chî
(
°d
::
ve˘‹
<
T
> c⁄° &
com∑øt‹
Ë: 
m_com∑øt‹
( comparator ) {}

2679 
boﬁ
 
m©ch
(
°d
::
ve˘‹
<
T
> c⁄° &
v
Ëc⁄° 
ovîride
 {

2684 i‡(
m_com∑øt‹
.
size
(Ë!
v
.size())

2685  
Ál£
;

2686 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gv
.
size
(); ++i)

2687 i‡(
	gm_com∑øt‹
[
i
] !
v
[i])

2688  
Ál£
;

2689  
	gåue
;

2691 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2692  "EquÆs: " + ::
C©ch
::
Dëaû
::
°rögify
–
m_com∑øt‹
 );

2694 
	g°d
::
ve˘‹
<
T
> c⁄°& 
m_com∑øt‹
;

2697 
	gãm∂©e
<
ty≥«me
 
	gT
>

2698 
	gUn‹dîedEquÆsM©chî
 : 
M©chîBa£
<
°d
::
ve˘‹
<
T
>> {

2699 
Un‹dîedEquÆsM©chî
(
°d
::
ve˘‹
<
T
> c⁄°& 
èrgë
Ë: 
m_èrgë
(target) {}

2700 
boﬁ
 
m©ch
(
°d
::
ve˘‹
<
T
> c⁄°& 
vec
Ëc⁄° 
ovîride
 {

2703 i‡(
m_èrgë
.
size
(Ë!
vec
.size()) {

2704  
Ál£
;

2706 autÿ
	glfú°
 = 
m_èrgë
.
begö
(), 
	gŒa°
 = m_èrgë.
íd
();

2707 autÿ
	grfú°
 = 
vec
.
begö
(), 
	gæa°
 = vec.
íd
();

2709 
	glfú°
 !
Œa°
 && *
lfú°
 !*
rfú°
) {

2710 ++
lfú°
; ++
	grfú°
;

2712 i‡(
	glfú°
 =
Œa°
) {

2713  
åue
;

2716 autÿ
	gmid
 = 
lfú°
; mid !
Œa°
; ++mid) {

2718 i‡(
	gDëaû
::
c⁄èös
(
lfú°
, 
mid
, *mid)) {

2721 
size_t
 
	gnum_vec
 = 
Dëaû
::
cou¡
(
rfú°
, 
æa°
, *
mid
);

2722 i‡(
	gnum_vec
 =0 || 
Dëaû
::
cou¡
(
lfú°
, 
Œa°
, *
mid
Ë!
num_vec
) {

2723  
Ál£
;

2727  
	gåue
;

2730 
	g°d
::
°rög
 
des¸ibe
(Ëc⁄° 
ovîride
 {

2731  "Un‹dîedEquÆs: " + ::
C©ch
::
Dëaû
::
°rögify
(
m_èrgë
);

2733 
	g¥iv©e
:

2734 
°d
::
ve˘‹
<
T
> c⁄°& 
m_èrgë
;

2742 
	gãm∂©e
<
ty≥«me
 
	gT
>

2743 
	gVe˘‹
::
C⁄èösM©chî
<
T
> 
C⁄èös
–
°d
::
ve˘‹
<T> c⁄°& 
com∑øt‹
 ) {

2744  
Ve˘‹
::
C⁄èösM©chî
<
T
>–
com∑øt‹
 );

2747 
	gãm∂©e
<
ty≥«me
 
	gT
>

2748 
	gVe˘‹
::
C⁄èösEÀmítM©chî
<
T
> 
Ve˘‹C⁄èös
–T c⁄°& 
com∑øt‹
 ) {

2749  
Ve˘‹
::
C⁄èösEÀmítM©chî
<
T
>–
com∑øt‹
 );

2752 
	gãm∂©e
<
ty≥«me
 
	gT
>

2753 
	gVe˘‹
::
EquÆsM©chî
<
T
> 
EquÆs
–
°d
::
ve˘‹
<T> c⁄°& 
com∑øt‹
 ) {

2754  
Ve˘‹
::
EquÆsM©chî
<
T
>–
com∑øt‹
 );

2757 
	gãm∂©e
<
ty≥«me
 
	gT
>

2758 
	gVe˘‹
::
Un‹dîedEquÆsM©chî
<
T
> 
Un‹dîedEquÆs
(
°d
::
ve˘‹
<T> c⁄°& 
èrgë
) {

2759  
Ve˘‹
::
Un‹dîedEquÆsM©chî
<
T
>(
èrgë
);

2766 
«me•a˚
 
	gC©ch
 {

2768 
	gãm∂©e
<
ty≥«me
 
	gArgT
,Åy≥«mê
	gM©chîT
>

2769 ˛as†
	cM©chEx¥
 : 
public
 
ITønsõ¡Ex¥essi⁄
 {

2770 
ArgT
 c⁄°& 
m_¨g
;

2771 
M©chîT
 
	gm_m©chî
;

2772 
SåögRef
 
	gm_m©chîSåög
;

2773 
	gpublic
:

2774 
M©chEx¥
–
ArgT
 c⁄°& 
¨g
, 
M©chîT
 c⁄°& 
m©chî
, 
SåögRef
 
m©chîSåög
 )

2775 : 
ITønsõ¡Ex¥essi⁄
{ 
åue
, 
	gm©chî
.
m©ch
–
¨g
 ) },

2776 
m_¨g
–
¨g
 ),

2777 
m_m©chî
–
m©chî
 ),

2778 
m_m©chîSåög
–
m©chîSåög
 )

2781 
°ªamRec⁄°ru˘edEx¥essi⁄
–
°d
::
o°ªam
 &
os
 ) c⁄° 
ovîride
 {

2782 autÿ
m©chîAsSåög
 = 
m_m©chî
.
toSåög
();

2783 
	gos
 << 
	gC©ch
::
Dëaû
::
°rögify
–
m_¨g
 ) << ' ';

2784 if–
	gm©chîAsSåög
 =
Dëaû
::
u≈röèbÀSåög
 )

2785 
os
 << 
m_m©chîSåög
;

2787 
	gos
 << 
	gm©chîAsSåög
;

2791 
usög
 
	gSåögM©chî
 = 
M©chîs
::
Im∂
::
M©chîBa£
<
°d
::
°rög
>;

2793 
h™dÀEx˚±i⁄M©chEx¥
–
As£πi⁄H™dÀr
& 
h™dÀr
, 
SåögM©chî
 c⁄°& 
m©chî
, 
SåögRef
 
m©chîSåög
 );

2795 
	gãm∂©e
<
ty≥«me
 
	gArgT
,Åy≥«mê
	gM©chîT
>

2796 autÿ
makeM©chEx¥
–
ArgT
 c⁄°& 
¨g
, 
M©chîT
 c⁄°& 
m©chî
, 
SåögRef
 
m©chîSåög
 ) -> 
	gM©chEx¥
<
	gArgT
, 
	gM©chîT
> {

2797  
	gM©chEx¥
<
	gArgT
, 
	gM©chîT
>–
	g¨g
, 
	gm©chî
, 
	gm©chîSåög
 );

2803 
	#INTERNAL_CHECK_THAT
–
ma¸oName
, 
m©chî
, 
ªsu…Di•osôi⁄
, 
¨g
 ) \

2805 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
¨g
Ë", " CATCH_INTERNAL_STRINGIFY(
m©chî
), 
ªsu…Di•osôi⁄
 ); \

2806 
INTERNAL_CATCH_TRY
 { \

2807 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀEx¥
–
C©ch
::
	`makeM©chEx¥
–
¨g
, 
m©chî
, #matcher ) ); \

2808 } 
	`INTERNAL_CATCH_CATCH
–
ˇtchAs£πi⁄H™dÀr
 ) \

2809 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

2810 }  
Ál£
 )

	)

2813 
	#INTERNAL_CATCH_THROWS_MATCHES
–
ma¸oName
, 
ex˚±i⁄Ty≥
, 
ªsu…Di•osôi⁄
, 
m©chî
, ... ) \

2815 
C©ch
::
As£πi⁄H™dÀr
 
	`ˇtchAs£πi⁄H™dÀr
–
ma¸oName
, 
CATCH_INTERNAL_LINEINFO
, 
	`CATCH_INTERNAL_STRINGIFY
(
__VA_ARGS__
Ë", " CATCH_INTERNAL_STRINGIFY(
ex˚±i⁄Ty≥
Ë", " CATCH_INTERNAL_STRINGIFY(
m©chî
), 
ªsu…Di•osôi⁄
 ); \

2816 if–
ˇtchAs£πi⁄H™dÀr
.
	`ÆlowThrows
() ) \

2817 
åy
 { \

2818 
°©ic_ˇ°
<>(
__VA_ARGS__
 ); \

2819 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edEx˚±i⁄NŸThrown
(); \

2821 
	`ˇtch
–
ex˚±i⁄Ty≥
 c⁄°& 
ex
 ) { \

2822 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀEx¥
–
C©ch
::
	`makeM©chEx¥
–
ex
, 
m©chî
, #matcher ) ); \

2824 
	`ˇtch
( ... ) { \

2825 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀU√x≥˘edInÊightEx˚±i⁄
(); \

2828 
ˇtchAs£πi⁄H™dÀr
.
	`h™dÀThrowögCÆlSkù≥d
(); \

2829 
	`INTERNAL_CATCH_REACT
–
ˇtchAs£πi⁄H™dÀr
 ) \

2830 }  
Ál£
 )

	)

2839 
	~<°rög
>

2840 
	~<ve˘‹
>

2841 
	~<mem‹y
>

2843 #ifde‡
__˛™g__


2844 #¥agm®
˛™g
 
dügno°ic
 
push


2845 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

2848 
«me•a˚
 
	gC©ch
 {

2850 
	gITe°Invokî
;

2852 
	sTe°Ca£Info
 {

2853 
	eS≥cülPr›îtõs
{

2854 
	gN⁄e
 = 0,

2855 
	gIsHiddí
 = 1 << 1,

2856 
	gShouldFaû
 = 1 << 2,

2857 
	gMayFaû
 = 1 << 3,

2858 
	gThrows
 = 1 << 4,

2859 
	gN⁄P‹èbÀ
 = 1 << 5,

2860 
	gBíchm¨k
 = 1 << 6

2863 
Te°Ca£Info
–
°d
::
°rög
 c⁄°& 
_«me
,

2864 
°d
::
°rög
 c⁄°& 
_˛assName
,

2865 
°d
::
°rög
 c⁄°& 
_des¸ùti⁄
,

2866 
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
_ègs
,

2867 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 );

2869 
‰õnd
 
£tTags
–
Te°Ca£Info
& 
ã°Ca£Info
, 
°d
::
ve˘‹
<°d::
°rög
> 
ègs
 );

2871 
boﬁ
 
isHiddí
() const;

2872 
boﬁ
 
throws
() const;

2873 
boﬁ
 
okToFaû
() const;

2874 
boﬁ
 
ex≥˘edToFaû
() const;

2876 
	g°d
::
°rög
 
ègsAsSåög
() const;

2878 
	g°d
::
°rög
 
«me
;

2879 
	g°d
::
°rög
 
˛assName
;

2880 
	g°d
::
°rög
 
des¸ùti⁄
;

2881 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ègs
;

2882 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
lˇ£Tags
;

2883 
Sour˚LöeInfo
 
	glöeInfo
;

2884 
S≥cülPr›îtõs
 
	g¥›îtõs
;

2887 ˛as†
	cTe°Ca£
 : 
public
 
Te°Ca£Info
 {

2888 
public
:

2890 
Te°Ca£
–
ITe°Invokî
* 
ã°Ca£
, 
Te°Ca£Info
&& 
öfo
 );

2892 
Te°Ca£
 
wôhName
–
°d
::
°rög
 c⁄°& 
_√wName
 ) const;

2894 
övoke
() const;

2896 
Te°Ca£Info
 c⁄°& 
gëTe°Ca£Info
() const;

2898 
boﬁ
 
	g›î©‹
 =–
Te°Ca£
 c⁄°& 
Ÿhî
 ) const;

2899 
boﬁ
 
	g›î©‹
 < ( 
Te°Ca£
 c⁄°& 
	gŸhî
 ) const;

2901 
	g¥iv©e
:

2902 
°d
::
sh¨ed_±r
<
ITe°Invokî
> 
ã°
;

2905 
Te°Ca£
 
makeTe°Ca£
–
ITe°Invokî
* 
ã°Ca£
,

2906 
°d
::
°rög
 c⁄°& 
˛assName
,

2907 
NameAndTags
 c⁄°& 
«meAndTags
,

2908 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

2911 #ifde‡
__˛™g__


2912 #¥agm®
˛™g
 
dügno°ic
 
p›


2918 
«me•a˚
 
	gC©ch
 {

2920 
	sIRu¬î
 {

2921 
	gvútuÆ
 ~
IRu¬î
();

2922 
vútuÆ
 
boﬁ
 
ab‹tög
() const = 0;

2928 #ifde‡
__OBJC__


2931 #imp‹à<
objc
/
ru¡ime
.
h
>

2933 
	~<°rög
>

2942 @
¥Ÿocﬁ
 
	gOcFixtuª


2944 @
	g›ti⁄Æ


2946 -(Ë
	g£tUp
;

2947 -(Ë
	gã¨Down
;

2949 @
íd


2951 
«me•a˚
 
	gC©ch
 {

2953 ˛as†
	cOcMëhod
 : 
public
 
ITe°Invokî
 {

2955 
public
:

2956 
OcMëhod
–
Cœss
 
˛s
, 
SEL
 
£l
 ) : 
m_˛s
–˛†), 
m_£l
( sel ) {}

2958 
vútuÆ
 
övoke
() const {

2959 
id
 
	gobj
 = [[
m_˛s
 
Æloc
] 
öô
];

2961 
≥rf‹mO±i⁄ÆSñe˘‹
–
obj
, @
£À˘‹
(
£tUp
) );

2962 
≥rf‹mO±i⁄ÆSñe˘‹
–
obj
, 
m_£l
 );

2963 
≥rf‹mO±i⁄ÆSñe˘‹
–
obj
, @
£À˘‹
(
ã¨Down
) );

2965 
¨cSa„Rñó£
–
obj
 );

2967 
	g¥iv©e
:

2968 
vútuÆ
 ~
OcMëhod
() {}

2970 
Cœss
 
m_˛s
;

2971 
SEL
 
	gm_£l
;

2974 
«me•a˚
 
	gDëaû
{

2976 
ölöe
 
	g°d
::
°rög
 
gëA¬Ÿ©i⁄
–
Cœss
 
˛s
,

2977 
°d
::
°rög
 c⁄°& 
™nŸ©i⁄Name
,

2978 
°d
::
°rög
 c⁄°& 
ã°Ca£Name
 ) {

2979 
NSSåög
* 
£lSå
 = [[NSSåög 
Æloc
] 
öôWôhF‹m©
:@"C©ch_%s_%s", 
	g™nŸ©i⁄Name
.
c_°r
(), 
	gã°Ca£Name
.c_str()];

2980 
SEL
 
	g£l
 = 
NSSñe˘‹FromSåög
–
£lSå
 );

2981 
¨cSa„Rñó£
–
£lSå
 );

2982 
id
 
	gvÆue
 = 
≥rf‹mO±i⁄ÆSñe˘‹
–
˛s
, 
£l
 );

2983 if–
	gvÆue
 )

2984  [(
NSSåög
*)
vÆue
 
UTF8Såög
];

2989 
ölöe
 
	g°d
::
size_t
 
	$ªgi°îTe°Mëhods
() {

2990 
°d
::
size_t
 
noTe°Mëhods
 = 0;

2991 
noCœs£s
 = 
	`objc_gëCœssLi°
–
nuŒ±r
, 0 );

2993 
Cœss
* 
˛as£s
 = (
CATCH_UNSAFE_UNRETAINED
 Cœs†*)
	`mÆloc
–(CœssË* 
noCœs£s
);

2994 
	`objc_gëCœssLi°
–
˛as£s
, 
noCœs£s
 );

2996  
c
 = 0; c < 
noCœs£s
; c++ ) {

2997 
Cœss
 
˛s
 = 
˛as£s
[
c
];

2999 
u_öt
 
cou¡
;

3000 
Mëhod
* 
mëhods
 = 
	`˛ass_c›yMëhodLi°
–
˛s
, &
cou¡
 );

3001  
u_öt
 
m
 = 0; m < 
cou¡
 ; m++ ) {

3002 
SEL
 
£À˘‹
 = 
	`mëhod_gëName
(
mëhods
[
m
]);

3003 
°d
::
°rög
 
mëhodName
 = 
	`£l_gëName
(
£À˘‹
);

3004 if–
	`°¨tsWôh
–
mëhodName
, "Catch_TestCase_" ) ) {

3005 
°d
::
°rög
 
ã°Ca£Name
 = 
mëhodName
.
	`sub°r
( 15 );

3006 
°d
::
°rög
 
«me
 = 
Dëaû
::
	`gëA¬Ÿ©i⁄
–
˛s
, "Name", 
ã°Ca£Name
 );

3007 
°d
::
°rög
 
desc
 = 
Dëaû
::
	`gëA¬Ÿ©i⁄
–
˛s
, "Des¸ùti⁄", 
ã°Ca£Name
 );

3008 c⁄° * 
˛assName
 = 
	`˛ass_gëName
–
˛s
 );

3010 
	`gëMuèbÀRegi°ryHub
().
	`ªgi°îTe°
–
	`makeTe°Ca£
–
√w
 
	`OcMëhod
–
˛s
, 
£À˘‹
 ), 
˛assName
, 
	`NameAndTags
–
«me
.
	`c_°r
(), 
desc
.c_°r(Ë), 
	`Sour˚LöeInfo
("",0) ) );

3011 
noTe°Mëhods
++;

3014 
	`‰ì
(
mëhods
);

3017  
noTe°Mëhods
;

3018 
	}
}

3020 #i‡!
	$deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

3022 
«me•a˚
 
M©chîs
 {

3023 
«me•a˚
 
Im∂
 {

3024 
«me•a˚
 
NSSåögM©chîs
 {

3026 
SåögHﬁdî
 : 
M©chîBa£
<
NSSåög
*>{

3027 
	`SåögHﬁdî
–
NSSåög
* 
sub°r
 ) : 
	`m_sub°r
–[sub°∏
c›y
] ){}

3028 
	`SåögHﬁdî
–
SåögHﬁdî
 c⁄°& 
Ÿhî
 ) : 
	`m_sub°r
–[Ÿhî.
m_sub°r
 
c›y
] ){}

3029 
	`SåögHﬁdî
() {

3030 
	`¨cSa„Rñó£
–
m_sub°r
 );

3033 
boﬁ
 
	`m©ch
–
NSSåög
* 
¨g
 ) c⁄° 
ovîride
 {

3034  
Ál£
;

3037 
NSSåög
* 
CATCH_ARC_STRONG
 
m_sub°r
;

3040 
EquÆs
 : 
SåögHﬁdî
 {

3041 
	`EquÆs
–
NSSåög
* 
sub°r
 ) : 
	`SåögHﬁdî
( substr ){}

3043 
boﬁ
 
	`m©ch
–
NSSåög
* 
°r
 ) c⁄° 
ovîride
 {

3044  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3045 [
°r
 
isEquÆToSåög
:
m_sub°r
];

3048 
°d
::
°rög
 
	`des¸ibe
(Ëc⁄° 
ovîride
 {

3049  "equÆ†°rög: " + 
C©ch
::
Dëaû
::
	`°rögify
–
m_sub°r
 );

3053 
C⁄èös
 : 
SåögHﬁdî
 {

3054 
	`C⁄èös
–
NSSåög
* 
sub°r
 ) : 
	`SåögHﬁdî
( substr ){}

3056 
boﬁ
 
	`m©ch
–
NSSåög
* 
°r
 ) const {

3057  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3058 [
°r
 
øngeOfSåög
:
m_sub°r
].
loˇti⁄
 !
NSNŸFound
;

3061 
°d
::
°rög
 
	`des¸ibe
(Ëc⁄° 
ovîride
 {

3062  "c⁄èö†°rög: " + 
C©ch
::
Dëaû
::
	`°rögify
–
m_sub°r
 );

3066 
SèπsWôh
 : 
SåögHﬁdî
 {

3067 
	`SèπsWôh
–
NSSåög
* 
sub°r
 ) : 
	`SåögHﬁdî
( substr ){}

3069 
boﬁ
 
	`m©ch
–
NSSåög
* 
°r
 ) c⁄° 
ovîride
 {

3070  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3071 [
°r
 
øngeOfSåög
:
m_sub°r
].
loˇti⁄
 == 0;

3074 
°d
::
°rög
 
	`des¸ibe
(Ëc⁄° 
ovîride
 {

3075  "°¨t†wôh: " + 
C©ch
::
Dëaû
::
	`°rögify
–
m_sub°r
 );

3078 
EndsWôh
 : 
SåögHﬁdî
 {

3079 
	`EndsWôh
–
NSSåög
* 
sub°r
 ) : 
	`SåögHﬁdî
( substr ){}

3081 
boﬁ
 
	`m©ch
–
NSSåög
* 
°r
 ) c⁄° 
ovîride
 {

3082  (
°r
 !
nû
 || 
m_sub°r
 ==Çil ) &&

3083 [
°r
 
øngeOfSåög
:
m_sub°r
].
loˇti⁄
 =[°∏
Àngth
] - [m_substrÜength];

3086 
°d
::
°rög
 
	`des¸ibe
(Ëc⁄° 
ovîride
 {

3087  "íd†wôh: " + 
C©ch
::
Dëaû
::
	`°rögify
–
m_sub°r
 );

3094 
ölöe
 
Im∂
::
NSSåögM©chîs
::
EquÆs


3095 
	`EquÆs
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::Equals( substr ); }

3097 
ölöe
 
Im∂
::
NSSåögM©chîs
::
C⁄èös


3098 
	`C⁄èös
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::Contains( substr ); }

3100 
ölöe
 
Im∂
::
NSSåögM©chîs
::
SèπsWôh


3101 
	`SèπsWôh
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::StartsWith( substr ); }

3103 
ölöe
 
Im∂
::
NSSåögM©chîs
::
EndsWôh


3104 
	`EndsWôh
–
NSSåög
* 
sub°r
 ){  
Im∂
::
NSSåögM©chîs
::EndsWith( substr ); }

3106 
	}
}

3108 
usög
 
«me•a˚
 
	gM©chîs
;

3115 
	#OC_MAKE_UNIQUE_NAME
–
roŸ
, 
uniqueSuffix
 )ÑoŸ##
	)
uniqueSuffix

3116 
	#OC_TEST_CASE2
–
«me
, 
desc
, 
uniqueSuffix
 ) \

3117 +(
NSSåög
*Ë
	`OC_MAKE_UNIQUE_NAME
–
C©ch_Name_ã°_
, 
uniqueSuffix
 ) \

3119  @ 
«me
; \

3121 +(
NSSåög
*Ë
	`OC_MAKE_UNIQUE_NAME
–
C©ch_Des¸ùti⁄_ã°_
, 
uniqueSuffix
 ) \

3123  @ 
desc
; \

3125 -(Ë
	`OC_MAKE_UNIQUE_NAME
–
C©ch_Te°Ca£_ã°_
, 
uniqueSuffix
 )

	)

3127 
	#OC_TEST_CASE
–
«me
, 
desc
 ) 
	`OC_TEST_CASE2
–«me, desc, 
__LINE__
 )

	)

3132 #ifde‡
CATCH_CONFIG_EXTERNAL_INTERFACES


3143 #ifde‡
__˛™g__


3144 #¥agm®
˛™g
 
dügno°ic
 
push


3145 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

3150 #ifde‡
__˛™g__


3151 #¥agm®
˛™g
 
dügno°ic
 
push


3152 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

3157 
«me•a˚
 
	gC©ch


3159 ˛as†
	cWûdˇrdP©ã∫
 {

3160 
	eWûdˇrdPosôi⁄
 {

3161 
	gNoWûdˇrd
 = 0,

3162 
	gWûdˇrdAtSèπ
 = 1,

3163 
	gWûdˇrdAtEnd
 = 2,

3164 
	gWûdˇrdAtBŸhEnds
 = 
WûdˇrdAtSèπ
 | 
WûdˇrdAtEnd


3167 
	gpublic
:

3169 
WûdˇrdP©ã∫
–
°d
::
°rög
 c⁄°& 
∑âîn
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 );

3170 
	gvútuÆ
 ~
WûdˇrdP©ã∫
() = ;

3171 
vútuÆ
 
boﬁ
 
m©ches
–
°d
::
°rög
 c⁄°& 
°r
 ) const;

3173 
	g¥iv©e
:

3174 
°d
::
°rög
 
adju°Ca£
–°d::°rög c⁄°& 
°r
 ) const;

3175 
	gCa£Sísôive
::
Choi˚
 
m_ˇ£Sísôivôy
;

3176 
WûdˇrdPosôi⁄
 
	gm_wûdˇrd
 = 
NoWûdˇrd
;

3177 
	g°d
::
°rög
 
m_∑âîn
;

3182 
	~<°rög
>

3183 
	~<ve˘‹
>

3184 
	~<mem‹y
>

3186 
«me•a˚
 
	gC©ch
 {

3188 ˛as†
	cTe°S≥c
 {

3189 
	sP©ã∫
 {

3190 
	gvútuÆ
 ~
P©ã∫
();

3191 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const = 0;

3193 
usög
 
	gP©ã∫På
 = 
°d
::
sh¨ed_±r
<
P©ã∫
>;

3195 ˛as†
	cNameP©ã∫
 : 
public
 
P©ã∫
 {

3196 
public
:

3197 
NameP©ã∫
–
°d
::
°rög
 c⁄°& 
«me
 );

3198 
	gvútuÆ
 ~
NameP©ã∫
();

3199 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) c⁄° 
	govîride
;

3200 
	g¥iv©e
:

3201 
WûdˇrdP©ã∫
 
m_wûdˇrdP©ã∫
;

3204 ˛as†
	cTagP©ã∫
 : 
public
 
P©ã∫
 {

3205 
public
:

3206 
TagP©ã∫
–
°d
::
°rög
 c⁄°& 
èg
 );

3207 
	gvútuÆ
 ~
TagP©ã∫
();

3208 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) c⁄° 
	govîride
;

3209 
	g¥iv©e
:

3210 
°d
::
°rög
 
m_èg
;

3213 ˛as†
	cEx˛udedP©ã∫
 : 
public
 
P©ã∫
 {

3214 
public
:

3215 
Ex˛udedP©ã∫
–
P©ã∫På
 c⁄°& 
undîlyögP©ã∫
 );

3216 
	gvútuÆ
 ~
Ex˛udedP©ã∫
();

3217 
vútuÆ
 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) c⁄° 
	govîride
;

3218 
	g¥iv©e
:

3219 
P©ã∫På
 
m_undîlyögP©ã∫
;

3222 
	sFûãr
 {

3223 
	g°d
::
ve˘‹
<
P©ã∫På
> 
m_∑âîns
;

3225 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const;

3228 
	gpublic
:

3229 
boﬁ
 
hasFûãrs
() const;

3230 
boﬁ
 
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const;

3232 
	g¥iv©e
:

3233 
°d
::
ve˘‹
<
Fûãr
> 
m_fûãrs
;

3235 
‰õnd
 
˛ass
 
	gTe°S≥cP¨£r
;

3239 #ifde‡
__˛™g__


3240 #¥agm®
˛™g
 
dügno°ic
 
p›


3246 
	~<°rög
>

3248 
«me•a˚
 
	gC©ch
 {

3250 
	gTagAlüs
;

3252 
	sITagAlüsRegi°ry
 {

3253 
	gvútuÆ
 ~
ITagAlüsRegi°ry
();

3255 
vútuÆ
 
TagAlüs
 c⁄°* 
föd
–
°d
::
°rög
 c⁄°& 
Æüs
 ) const = 0;

3256 
vútuÆ
 
	g°d
::
°rög
 
ex∑ndAlü£s
–
°d
::°rög c⁄°& 
u√x∑ndedTe°S≥c
 ) const = 0;

3258 
ITagAlüsRegi°ry
 c⁄°& 
gë
();

3264 
«me•a˚
 
	gC©ch
 {

3266 ˛as†
	cTe°S≥cP¨£r
 {

3267 
	eMode
{ 
	gN⁄e
, 
	gName
, 
	gQuŸedName
, 
	gTag
, 
	gEsˇ≥dName
 };

3268 
Mode
 
	gm_mode
 = 
N⁄e
;

3269 
boﬁ
 
	gm_ex˛usi⁄
 = 
Ál£
;

3270 
	g°d
::
size_t
 
m_°¨t
 = 
°d
::
°rög
::
≈os
, 
	gm_pos
 = 0;

3271 
	g°d
::
°rög
 
m_¨g
;

3272 
	g°d
::
ve˘‹
<
°d
::
size_t
> 
m_esˇ≥Ch¨s
;

3273 
	gTe°S≥c
::
Fûãr
 
m_cuºítFûãr
;

3274 
Te°S≥c
 
	gm_ã°S≥c
;

3275 
ITagAlüsRegi°ry
 c⁄°* 
	gm_ègAlü£s
 = 
nuŒ±r
;

3277 
	gpublic
:

3278 
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
 c⁄°& 
ègAlü£s
 );

3280 
	gTe°S≥cP¨£r
& 
∑r£
–
°d
::
°rög
 c⁄°& 
¨g
 );

3281 
Te°S≥c
 
ã°S≥c
();

3283 
	g¥iv©e
:

3284 
visôCh¨
–
c
 );

3285 
°¨tNewMode
–
Mode
 
mode
, 
°d
::
size_t
 
°¨t
 );

3286 
esˇ≥
();

3287 
	g°d
::
°rög
 
subSåög
() const;

3289 
	gãm∂©e
<
ty≥«me
 
	gT
>

3290 
addP©ã∫
() {

3291 
	g°d
::
°rög
 
tokí
 = 
subSåög
();

3292  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gm_esˇ≥Ch¨s
.
size
(); ++i )

3293 
	gtokí
 = 
tokí
.
sub°r
–0, 
m_esˇ≥Ch¨s
[
i
]-
m_°¨t
-i ) +Åoken.substr( m_escapeChars[i]-m_start-i+1 );

3294 
	gm_esˇ≥Ch¨s
.
˛ór
();

3295 if–
°¨tsWôh
–
tokí
, "exclude:" ) ) {

3296 
	gm_ex˛usi⁄
 = 
åue
;

3297 
	gtokí
 = 
tokí
.
sub°r
( 8 );

3299 if–!
	gtokí
.
em±y
() ) {

3300 
	gTe°S≥c
::
P©ã∫På
 
∑âîn
 = 
°d
::
make_sh¨ed
<
T
>–
tokí
 );

3301 if–
	gm_ex˛usi⁄
 )

3302 
	g∑âîn
 = 
°d
::
make_sh¨ed
<
Te°S≥c
::
Ex˛udedP©ã∫
>–
∑âîn
 );

3303 
	gm_cuºítFûãr
.
	gm_∑âîns
.
push_back
–
∑âîn
 );

3305 
	gm_ex˛usi⁄
 = 
Ál£
;

3306 
	gm_mode
 = 
N⁄e
;

3309 
addFûãr
();

3311 
Te°S≥c
 
∑r£Te°S≥c
–
°d
::
°rög
 c⁄°& 
¨g
 );

3315 #ifde‡
__˛™g__


3316 #¥agm®
˛™g
 
dügno°ic
 
p›


3322 
	~<iosfwd
>

3323 
	~<°rög
>

3324 
	~<ve˘‹
>

3325 
	~<mem‹y
>

3327 
«me•a˚
 
	gC©ch
 {

3329 ˛as†
	cVîbosôy
 {

3330 
	gQuõt
 = 0,

3331 
	gN‹mÆ
,

3332 
	gHigh


3335 
	sW¨nAbout
 { 
	eWh©
 {

3336 
	gNŸhög
 = 0x00,

3337 
	gNoAs£πi⁄s
 = 0x01,

3338 
	gNoTe°s
 = 0x02

3341 
	sShowDuøti⁄s
 { 
	eOrNŸ
 {

3342 
	gDeÁu…F‹Rï‹ãr
,

3343 
	gAlways
,

3344 
	gNevî


3346 
	sRunTe°s
 { 
	eInWh©Ordî
 {

3347 
	gInDe˛¨©i⁄Ordî
,

3348 
	gInLexicogøphiˇlOrdî
,

3349 
	gInR™domOrdî


3351 
	sU£Cﬁour
 { 
	eYesOrNo
 {

3352 
	gAuto
,

3353 
	gYes
,

3354 
	gNo


3356 
	sWaôF‹Key¥ess
 { 
	eWhí
 {

3357 
	gNevî
,

3358 
	gBef‹eSèπ
 = 1,

3359 
	gBef‹eExô
 = 2,

3360 
	gBef‹eSèπAndExô
 = 
Bef‹eSèπ
 | 
Bef‹eExô


3363 
˛ass
 
	gTe°S≥c
;

3365 
	gIC⁄fig
 : 
N⁄C›yabÀ
 {

3367 
vútuÆ
 ~
IC⁄fig
();

3369 
vútuÆ
 
boﬁ
 
ÆlowThrows
() const = 0;

3370 
vútuÆ
 
	g°d
::
o°ªam
& 
°ªam
() const = 0;

3371 
vútuÆ
 
	g°d
::
°rög
 
«me
() const = 0;

3372 
vútuÆ
 
boﬁ
 
ö˛udeSuc˚ssfulResu…s
() const = 0;

3373 
vútuÆ
 
boﬁ
 
shouldDebugBªak
() const = 0;

3374 
vútuÆ
 
boﬁ
 
w¨nAboutMissögAs£πi⁄s
() const = 0;

3375 
vútuÆ
 
boﬁ
 
w¨nAboutNoTe°s
() const = 0;

3376 
vútuÆ
 
ab‹tA·î
() const = 0;

3377 
vútuÆ
 
boﬁ
 
showInvisibÀs
() const = 0;

3378 
vútuÆ
 
	gShowDuøti⁄s
::
OrNŸ
 
showDuøti⁄s
() const = 0;

3379 
vútuÆ
 
Te°S≥c
 c⁄°& 
ã°S≥c
() const = 0;

3380 
vútuÆ
 
boﬁ
 
hasTe°Fûãrs
() const = 0;

3381 
vútuÆ
 
	gRunTe°s
::
InWh©Ordî
 
runOrdî
() const = 0;

3382 
vútuÆ
 
∫gSìd
() const = 0;

3383 
vútuÆ
 
bíchm¨kResﬁuti⁄Mu…ùÀ
() const = 0;

3384 
vútuÆ
 
	gU£Cﬁour
::
YesOrNo
 
u£Cﬁour
() const = 0;

3385 
vútuÆ
 
	g°d
::
ve˘‹
<
°d
::
°rög
> c⁄°& 
gëSe˘i⁄sToRun
() const = 0;

3386 
vútuÆ
 
Vîbosôy
 
vîbosôy
() const = 0;

3389 
usög
 
	gIC⁄figPå
 = 
°d
::
sh¨ed_±r
<
IC⁄fig
 const>;

3395 
	~<mem‹y
>

3396 
	~<ve˘‹
>

3397 
	~<°rög
>

3399 #i‚de‡
CATCH_CONFIG_CONSOLE_WIDTH


3400 
	#CATCH_CONFIG_CONSOLE_WIDTH
 80

	)

3403 
«me•a˚
 
	gC©ch
 {

3405 
	gISåóm
;

3407 
	sC⁄figD©a
 {

3408 
boﬁ
 
	gli°Te°s
 = 
Ál£
;

3409 
boﬁ
 
	gli°Tags
 = 
Ál£
;

3410 
boﬁ
 
	gli°Rï‹ãrs
 = 
Ál£
;

3411 
boﬁ
 
	gli°Te°NamesO∆y
 = 
Ál£
;

3413 
boﬁ
 
	gshowSuc˚ssfulTe°s
 = 
Ál£
;

3414 
boﬁ
 
	gshouldDebugBªak
 = 
Ál£
;

3415 
boﬁ
 
	gnoThrow
 = 
Ál£
;

3416 
boﬁ
 
	gshowHñp
 = 
Ál£
;

3417 
boﬁ
 
	gshowInvisibÀs
 = 
Ál£
;

3418 
boﬁ
 
	gfûíamesAsTags
 = 
Ál£
;

3419 
boﬁ
 
	glibIdítify
 = 
Ál£
;

3421 
	gab‹tA·î
 = -1;

3422 
	g∫gSìd
 = 0;

3423 
	gbíchm¨kResﬁuti⁄Mu…ùÀ
 = 100;

3425 
Vîbosôy
 
	gvîbosôy
 = Vîbosôy::
N‹mÆ
;

3426 
	gW¨nAbout
::
Wh©
 
w¨nögs
 = 
W¨nAbout
::
NŸhög
;

3427 
	gShowDuøti⁄s
::
OrNŸ
 
showDuøti⁄s
 = 
ShowDuøti⁄s
::
DeÁu…F‹Rï‹ãr
;

3428 
	gRunTe°s
::
InWh©Ordî
 
runOrdî
 = 
RunTe°s
::
InDe˛¨©i⁄Ordî
;

3429 
	gU£Cﬁour
::
YesOrNo
 
u£Cﬁour
 = 
U£Cﬁour
::
Auto
;

3430 
	gWaôF‹Key¥ess
::
Whí
 
waôF‹Key¥ess
 = 
WaôF‹Key¥ess
::
Nevî
;

3432 
	g°d
::
°rög
 
ouçutFûíame
;

3433 
	g°d
::
°rög
 
«me
;

3434 
	g°d
::
°rög
 
¥o˚ssName
;

3435 #i‚de‡
CATCH_CONFIG_DEFAULT_REPORTER


3436 
	#CATCH_CONFIG_DEFAULT_REPORTER
 "c⁄sﬁe"

	)

3438 
	g°d
::
°rög
 
ªp‹ãrName
 = 
CATCH_CONFIG_DEFAULT_REPORTER
;

3439 #unde‡
CATCH_CONFIG_DEFAULT_REPORTER


3441 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ã°sOrTags
;

3442 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
£˘i⁄sToRun
;

3445 ˛as†
	cC⁄fig
 : 
public
 
IC⁄fig
 {

3446 
public
:

3448 
C⁄fig
() = ;

3449 
C⁄fig
–
C⁄figD©a
 c⁄°& 
d©a
 );

3450 
	gvútuÆ
 ~
C⁄fig
() = ;

3452 
	g°d
::
°rög
 c⁄°& 
gëFûíame
() const;

3454 
boﬁ
 
li°Te°s
() const;

3455 
boﬁ
 
li°Te°NamesO∆y
() const;

3456 
boﬁ
 
li°Tags
() const;

3457 
boﬁ
 
li°Rï‹ãrs
() const;

3459 
	g°d
::
°rög
 
gëPro˚ssName
() const;

3460 
	g°d
::
°rög
 c⁄°& 
gëRï‹ãrName
() const;

3462 
	g°d
::
ve˘‹
<
°d
::
°rög
> c⁄°& 
gëTe°sOrTags
() const;

3463 
	g°d
::
ve˘‹
<
°d
::
°rög
> c⁄°& 
gëSe˘i⁄sToRun
(Ëc⁄° 
ovîride
;

3465 
vútuÆ
 
Te°S≥c
 c⁄°& 
ã°S≥c
(Ëc⁄° 
	govîride
;

3466 
boﬁ
 
hasTe°Fûãrs
(Ëc⁄° 
	govîride
;

3468 
boﬁ
 
showHñp
() const;

3471 
boﬁ
 
ÆlowThrows
(Ëc⁄° 
	govîride
;

3472 
	g°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
ovîride
;

3473 
	g°d
::
°rög
 
«me
(Ëc⁄° 
ovîride
;

3474 
boﬁ
 
ö˛udeSuc˚ssfulResu…s
(Ëc⁄° 
	govîride
;

3475 
boﬁ
 
w¨nAboutMissögAs£πi⁄s
(Ëc⁄° 
	govîride
;

3476 
boﬁ
 
w¨nAboutNoTe°s
(Ëc⁄° 
	govîride
;

3477 
	gShowDuøti⁄s
::
OrNŸ
 
showDuøti⁄s
(Ëc⁄° 
ovîride
;

3478 
	gRunTe°s
::
InWh©Ordî
 
runOrdî
(Ëc⁄° 
ovîride
;

3479 
∫gSìd
(Ëc⁄° 
	govîride
;

3480 
bíchm¨kResﬁuti⁄Mu…ùÀ
(Ëc⁄° 
	govîride
;

3481 
	gU£Cﬁour
::
YesOrNo
 
u£Cﬁour
(Ëc⁄° 
ovîride
;

3482 
boﬁ
 
shouldDebugBªak
(Ëc⁄° 
	govîride
;

3483 
ab‹tA·î
(Ëc⁄° 
	govîride
;

3484 
boﬁ
 
showInvisibÀs
(Ëc⁄° 
	govîride
;

3485 
Vîbosôy
 
vîbosôy
(Ëc⁄° 
	govîride
;

3487 
	g¥iv©e
:

3489 
ISåóm
 c⁄°* 
›íSåóm
();

3490 
C⁄figD©a
 
	gm_d©a
;

3492 
	g°d
::
unique_±r
<
ISåóm
 c⁄°> 
m_°ªam
;

3493 
Te°S≥c
 
	gm_ã°S≥c
;

3494 
boﬁ
 
	gm_hasTe°Fûãrs
 = 
Ál£
;

3502 
	~<°rög
>

3504 
«me•a˚
 
	gC©ch
 {

3506 
	sAs£πi⁄Resu…D©a


3508 
As£πi⁄Resu…D©a
(Ë
dñëe
;

3510 
As£πi⁄Resu…D©a
–
Resu…Was
::
OfTy≥
 
_ªsu…Ty≥
, 
LazyEx¥essi⁄
 c⁄°& 
_œzyEx¥essi⁄
 );

3512 
	g°d
::
°rög
 
mesßge
;

3513 
muèbÀ
 
	g°d
::
°rög
 
ªc⁄°ru˘edEx¥essi⁄
;

3514 
LazyEx¥essi⁄
 
	gœzyEx¥essi⁄
;

3515 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
;

3517 
	g°d
::
°rög
 
ªc⁄°ru˘Ex¥essi⁄
() const;

3520 ˛as†
	cAs£πi⁄Resu…
 {

3521 
	gpublic
:

3522 
As£πi⁄Resu…
(Ë
dñëe
;

3523 
As£πi⁄Resu…
–
As£πi⁄Info
 c⁄°& 
öfo
, 
As£πi⁄Resu…D©a
 c⁄°& 
d©a
 );

3525 
boﬁ
 
isOk
() const;

3526 
boﬁ
 
suc˚eded
() const;

3527 
	gResu…Was
::
OfTy≥
 
gëResu…Ty≥
() const;

3528 
boﬁ
 
hasEx¥essi⁄
() const;

3529 
boﬁ
 
hasMesßge
() const;

3530 
	g°d
::
°rög
 
gëEx¥essi⁄
() const;

3531 
	g°d
::
°rög
 
gëEx¥essi⁄InMa¸o
() const;

3532 
boﬁ
 
hasEx∑ndedEx¥essi⁄
() const;

3533 
	g°d
::
°rög
 
gëEx∑ndedEx¥essi⁄
() const;

3534 
	g°d
::
°rög
 
gëMesßge
() const;

3535 
Sour˚LöeInfo
 
gëSour˚Info
() const;

3536 
SåögRef
 
gëTe°Ma¸oName
() const;

3539 
As£πi⁄Info
 
	gm_öfo
;

3540 
As£πi⁄Resu…D©a
 
	gm_ªsu…D©a
;

3548 
«me•a˚
 
	gC©ch
 {

3551 
	gãm∂©e
<
ty≥«me
 
	gT
>

3552 ˛as†
	cO±i⁄
 {

3553 
	gpublic
:

3554 
O±i⁄
(Ë: 
nuŒabÀVÆue
–
nuŒ±r
 ) {}

3555 
O±i⁄
–
T
 c⁄°& 
_vÆue
 )

3556 : 
nuŒabÀVÆue
–
√w
–
°‹age
 ) 
T
–
_vÆue
 ) )

3558 
O±i⁄
–O±i⁄ c⁄°& 
_Ÿhî
 )

3559 : 
nuŒabÀVÆue
–
_Ÿhî
 ? 
√w
–
°‹age
 ) 
T
–*_Ÿhî ) : 
nuŒ±r
 )

3562 ~
O±i⁄
() {

3563 
ª£t
();

3566 
	gO±i⁄
& 
	g›î©‹
–
O±i⁄
 c⁄°& 
_Ÿhî
 ) {

3567 if–&
_Ÿhî
 !
this
 ) {

3568 
ª£t
();

3569 if–
	g_Ÿhî
 )

3570 
	gnuŒabÀVÆue
 = 
√w
–
°‹age
 ) 
T
–*
_Ÿhî
 );

3572  *
	gthis
;

3574 
	gO±i⁄
& 
	g›î©‹
 = ( 
T
 c⁄°& 
_vÆue
 ) {

3575 
ª£t
();

3576 
	gnuŒabÀVÆue
 = 
√w
–
°‹age
 ) 
T
–
_vÆue
 );

3577  *
	gthis
;

3580 
ª£t
() {

3581 if–
	gnuŒabÀVÆue
 )

3582 
	gnuŒabÀVÆue
->~
T
();

3583 
	gnuŒabÀVÆue
 = 
nuŒ±r
;

3586 
	gT
& 
	g›î©‹
*(Ë{  *
	gnuŒabÀVÆue
; }

3587 
T
 c⁄°& 
	g›î©‹
*(Ëc⁄° {  *
	gnuŒabÀVÆue
; }

3588 
T
* 
	g›î©‹
->(Ë{  
	gnuŒabÀVÆue
; }

3589 c⁄° 
T
* 
	g›î©‹
->(Ëc⁄° {  
	gnuŒabÀVÆue
; }

3591 
T
 
vÆueOr
–T c⁄°& 
deÁu…VÆue
 ) const {

3592  
	gnuŒabÀVÆue
 ? *nuŒabÀVÆuê: 
deÁu…VÆue
;

3595 
boﬁ
 
some
(Ëc⁄° {  
	gnuŒabÀVÆue
 !
nuŒ±r
; }

3596 
boﬁ
 
n⁄e
(Ëc⁄° {  
	gnuŒabÀVÆue
 =
nuŒ±r
; }

3598 
boﬁ
 
	g›î©‹
 !(Ëc⁄° {  
	gnuŒabÀVÆue
 =
nuŒ±r
; }

3599 
ex∂icô
 
›î©‹
 
boﬁ
() const {

3600  
some
();

3603 
	g¥iv©e
:

3604 
T
 *
nuŒabÀVÆue
;

3605 
Æig«s
(
Æignof
(
T
)Ë
	g°‹age
[(T)];

3611 
	~<°rög
>

3612 
	~<iosfwd
>

3613 
	~<m≠
>

3614 
	~<£t
>

3615 
	~<mem‹y
>

3617 
«me•a˚
 
	gC©ch
 {

3619 
	sRï‹ãrC⁄fig
 {

3620 
ex∂icô
 
Rï‹ãrC⁄fig
–
IC⁄figPå
 c⁄°& 
_fuŒC⁄fig
 );

3622 
Rï‹ãrC⁄fig
–
IC⁄figPå
 c⁄°& 
_fuŒC⁄fig
, 
°d
::
o°ªam
& 
_°ªam
 );

3624 
	g°d
::
o°ªam
& 
°ªam
() const;

3625 
IC⁄figPå
 
fuŒC⁄fig
() const;

3627 
	g¥iv©e
:

3628 
°d
::
o°ªam
* 
m_°ªam
;

3629 
IC⁄figPå
 
	gm_fuŒC⁄fig
;

3632 
	sRï‹ãrPª„ªn˚s
 {

3633 
boﬁ
 
	gshouldRedúe˘StdOut
 = 
Ál£
;

3634 
boﬁ
 
	gshouldRï‹tAŒAs£πi⁄s
 = 
Ál£
;

3637 
	gãm∂©e
<
ty≥«me
 
	gT
>

3638 
	gLazySèt
 : 
O±i⁄
<
T
> {

3639 
LazySèt
& 
›î©‹
=–
T
 c⁄°& 
_vÆue
 ) {

3640 
O±i⁄
<
T
>::
›î©‹
=–
_vÆue
 );

3641 
	gu£d
 = 
Ál£
;

3642  *
	gthis
;

3644 
ª£t
() {

3645 
	gO±i⁄
<
	gT
>::
ª£t
();

3646 
	gu£d
 = 
Ál£
;

3648 
boﬁ
 
	gu£d
 = 
Ál£
;

3651 
	sTe°RunInfo
 {

3652 
Te°RunInfo
–
°d
::
°rög
 c⁄°& 
_«me
 );

3653 
	g°d
::
°rög
 
«me
;

3655 
	sGroupInfo
 {

3656 
GroupInfo
–
°d
::
°rög
 c⁄°& 
_«me
,

3657 
°d
::
size_t
 
_groupIndex
,

3658 
°d
::
size_t
 
_groupsCou¡
 );

3660 
	g°d
::
°rög
 
«me
;

3661 
	g°d
::
size_t
 
groupIndex
;

3662 
	g°d
::
size_t
 
groupsCou¡s
;

3665 
	sAs£πi⁄Sèts
 {

3666 
As£πi⁄Sèts
–
As£πi⁄Resu…
 c⁄°& 
_as£πi⁄Resu…
,

3667 
°d
::
ve˘‹
<
MesßgeInfo
> c⁄°& 
_öfoMesßges
,

3668 
TŸÆs
 c⁄°& 
_tŸÆs
 );

3670 
As£πi⁄Sèts
( AssertionStats const& ) = ;

3671 
As£πi⁄Sèts
( AssertionStats && ) = ;

3672 
	gAs£πi⁄Sèts
& 
	g›î©‹
 = ( 
As£πi⁄Sèts
 const& ) = ;

3673 
	gAs£πi⁄Sèts
& 
	g›î©‹
 = ( 
As£πi⁄Sèts
 && ) = ;

3674 
	gvútuÆ
 ~
As£πi⁄Sèts
();

3676 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
;

3677 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
öfoMesßges
;

3678 
TŸÆs
 
	gtŸÆs
;

3681 
	sSe˘i⁄Sèts
 {

3682 
Se˘i⁄Sèts
–
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
,

3683 
Cou¡s
 c⁄°& 
_as£πi⁄s
,

3684 
_duøti⁄InSec⁄ds
,

3685 
boﬁ
 
_missögAs£πi⁄s
 );

3686 
Se˘i⁄Sèts
( SectionStats const& ) = ;

3687 
Se˘i⁄Sèts
( SectionStats && ) = ;

3688 
	gSe˘i⁄Sèts
& 
	g›î©‹
 = ( 
Se˘i⁄Sèts
 const& ) = ;

3689 
	gSe˘i⁄Sèts
& 
	g›î©‹
 = ( 
Se˘i⁄Sèts
 && ) = ;

3690 
	gvútuÆ
 ~
Se˘i⁄Sèts
();

3692 
Se˘i⁄Info
 
	g£˘i⁄Info
;

3693 
Cou¡s
 
	gas£πi⁄s
;

3694 
	gduøti⁄InSec⁄ds
;

3695 
boﬁ
 
	gmissögAs£πi⁄s
;

3698 
	sTe°Ca£Sèts
 {

3699 
Te°Ca£Sèts
–
Te°Ca£Info
 c⁄°& 
_ã°Info
,

3700 
TŸÆs
 c⁄°& 
_tŸÆs
,

3701 
°d
::
°rög
 c⁄°& 
_°dOut
,

3702 
°d
::
°rög
 c⁄°& 
_°dEº
,

3703 
boﬁ
 
_ab‹tög
 );

3705 
Te°Ca£Sèts
( TestCaseStats const& ) = ;

3706 
Te°Ca£Sèts
( TestCaseStats && ) = ;

3707 
	gTe°Ca£Sèts
& 
	g›î©‹
 = ( 
Te°Ca£Sèts
 const& ) = ;

3708 
	gTe°Ca£Sèts
& 
	g›î©‹
 = ( 
Te°Ca£Sèts
 && ) = ;

3709 
	gvútuÆ
 ~
Te°Ca£Sèts
();

3711 
Te°Ca£Info
 
	gã°Info
;

3712 
TŸÆs
 
	gtŸÆs
;

3713 
	g°d
::
°rög
 
°dOut
;

3714 
	g°d
::
°rög
 
°dEº
;

3715 
boﬁ
 
	gab‹tög
;

3718 
	sTe°GroupSèts
 {

3719 
Te°GroupSèts
–
GroupInfo
 c⁄°& 
_groupInfo
,

3720 
TŸÆs
 c⁄°& 
_tŸÆs
,

3721 
boﬁ
 
_ab‹tög
 );

3722 
Te°GroupSèts
–
GroupInfo
 c⁄°& 
_groupInfo
 );

3724 
Te°GroupSèts
( TestGroupStats const& ) = ;

3725 
Te°GroupSèts
( TestGroupStats && ) = ;

3726 
	gTe°GroupSèts
& 
	g›î©‹
 = ( 
Te°GroupSèts
 const& ) = ;

3727 
	gTe°GroupSèts
& 
	g›î©‹
 = ( 
Te°GroupSèts
 && ) = ;

3728 
	gvútuÆ
 ~
Te°GroupSèts
();

3730 
GroupInfo
 
	ggroupInfo
;

3731 
TŸÆs
 
	gtŸÆs
;

3732 
boﬁ
 
	gab‹tög
;

3735 
	sTe°RunSèts
 {

3736 
Te°RunSèts
–
Te°RunInfo
 c⁄°& 
_runInfo
,

3737 
TŸÆs
 c⁄°& 
_tŸÆs
,

3738 
boﬁ
 
_ab‹tög
 );

3740 
Te°RunSèts
( TestRunStats const& ) = ;

3741 
Te°RunSèts
( TestRunStats && ) = ;

3742 
	gTe°RunSèts
& 
	g›î©‹
 = ( 
Te°RunSèts
 const& ) = ;

3743 
	gTe°RunSèts
& 
	g›î©‹
 = ( 
Te°RunSèts
 && ) = ;

3744 
	gvútuÆ
 ~
Te°RunSèts
();

3746 
Te°RunInfo
 
	grunInfo
;

3747 
TŸÆs
 
	gtŸÆs
;

3748 
boﬁ
 
	gab‹tög
;

3751 
	sBíchm¨kInfo
 {

3752 
	g°d
::
°rög
 
«me
;

3754 
	sBíchm¨kSèts
 {

3755 
Bíchm¨kInfo
 
	göfo
;

3756 
	g°d
::
size_t
 
ôî©i⁄s
;

3757 
uöt64_t
 
	gñ≠£dTimeInN™o£c⁄ds
;

3760 
	sISåómögRï‹ãr
 {

3761 
	gvútuÆ
 ~
ISåómögRï‹ãr
() = ;

3767 
vútuÆ
 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
() const = 0;

3769 
vútuÆ
 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) = 0;

3771 
vútuÆ
 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°RunInfo
 ) = 0;

3772 
vútuÆ
 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) = 0;

3774 
vútuÆ
 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) = 0;

3775 
vútuÆ
 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) = 0;

3778 
vútuÆ
 
bíchm¨kSèπög
–
Bíchm¨kInfo
 const& ) {}

3780 
vútuÆ
 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& 
as£πi⁄Info
 ) = 0;

3783 
vútuÆ
 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) = 0;

3786 
vútuÆ
 
bíchm¨kEnded
–
Bíchm¨kSèts
 const& ) {}

3788 
vútuÆ
 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) = 0;

3789 
vútuÆ
 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) = 0;

3790 
vútuÆ
 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) = 0;

3791 
vútuÆ
 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) = 0;

3793 
vútuÆ
 
skùTe°
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) = 0;

3796 
vútuÆ
 
ÁèlEº‹Encou¡îed
–
SåögRef
 
«me
 );

3798 
vútuÆ
 
boﬁ
 
isMu…i
() const;

3800 
usög
 
	gISåómögRï‹ãrPå
 = 
°d
::
unique_±r
<
ISåómögRï‹ãr
>;

3802 
	sIRï‹ãrFa˘‹y
 {

3803 
	gvútuÆ
 ~
IRï‹ãrFa˘‹y
();

3804 
vútuÆ
 
ISåómögRï‹ãrPå
 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) const = 0;

3805 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
() const = 0;

3807 
usög
 
	gIRï‹ãrFa˘‹yPå
 = 
°d
::
sh¨ed_±r
<
IRï‹ãrFa˘‹y
>;

3809 
	sIRï‹ãrRegi°ry
 {

3810 
usög
 
	gFa˘‹yM≠
 = 
°d
::
m≠
<°d::
°rög
, 
	gIRï‹ãrFa˘‹yPå
>;

3811 
usög
 
	gLi°íîs
 = 
°d
::
ve˘‹
<
IRï‹ãrFa˘‹yPå
>;

3813 
	gvútuÆ
 ~
IRï‹ãrRegi°ry
();

3814 
vútuÆ
 
ISåómögRï‹ãrPå
 
¸óã
–
°d
::
°rög
 c⁄°& 
«me
, 
IC⁄figPå
 c⁄°& 
c⁄fig
 ) const = 0;

3815 
vútuÆ
 
Fa˘‹yM≠
 c⁄°& 
gëFa˘‹õs
() const = 0;

3816 
vútuÆ
 
Li°íîs
 c⁄°& 
gëLi°íîs
() const = 0;

3822 
	~<Æg‹ôhm
>

3823 
	~<c°rög
>

3824 
	~<cÊﬂt
>

3825 
	~<c°dio
>

3826 
	~<ˇs£π
>

3827 
	~<mem‹y
>

3828 
	~<o°ªam
>

3830 
«me•a˚
 
	gC©ch
 {

3831 
¥ï¨eEx∑ndedEx¥essi⁄
(
As£πi⁄Resu…
& 
ªsu…
);

3834 
	g°d
::
°rög
 
gëF‹m©ãdDuøti⁄
–
duøti⁄
 );

3836 
	gãm∂©e
<
ty≥«me
 
	gDîivedT
>

3837 
	gSåómögRï‹ãrBa£
 : 
ISåómögRï‹ãr
 {

3839 
SåómögRï‹ãrBa£
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

3840 : 
m_c⁄fig
–
_c⁄fig
.
fuŒC⁄fig
() ),

3841 
°ªam
–
_c⁄fig
.stream() )

3843 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
Ál£
;

3844 if–!
	gDîivedT
::
gëSuµ‹ãdVîbosôõs
().
cou¡
–
m_c⁄fig
->
vîbosôy
() ) )

3845 
throw
 
°d
::
domaö_îr‹
( "VerbosityÜevelÇot supported byÅhisÑeporter" );

3848 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
	govîride
 {

3849  
	gm_ªp‹ãrPªfs
;

3852 
	g°d
::
£t
<
Vîbosôy
> 
gëSuµ‹ãdVîbosôõs
() {

3853  { 
Vîbosôy
::
N‹mÆ
 };

3856 ~
SåómögRï‹ãrBa£
(Ë
	govîride
 = ;

3858 
noM©chögTe°Ca£s
(
°d
::
°rög
 c⁄°&Ë
ovîride
 {}

3860 
ã°RunSèπög
(
Te°RunInfo
 c⁄°& 
_ã°RunInfo
Ë
ovîride
 {

3861 
cuºítTe°RunInfo
 = 
_ã°RunInfo
;

3863 
ã°GroupSèπög
(
GroupInfo
 c⁄°& 
_groupInfo
Ë
	govîride
 {

3864 
	gcuºítGroupInfo
 = 
_groupInfo
;

3867 
ã°Ca£Sèπög
(
Te°Ca£Info
 c⁄°& 
_ã°Info
Ë
	govîride
 {

3868 
	gcuºítTe°Ca£Info
 = 
_ã°Info
;

3870 
£˘i⁄Sèπög
(
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
Ë
	govîride
 {

3871 
	gm_£˘i⁄Sèck
.
push_back
(
_£˘i⁄Info
);

3874 
£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& ) 
	govîride
 {

3875 
	gm_£˘i⁄Sèck
.
p›_back
();

3877 
ã°Ca£Ended
(
Te°Ca£Sèts
 c⁄°& ) 
	govîride
 {

3878 
	gcuºítTe°Ca£Info
.
ª£t
();

3880 
ã°GroupEnded
(
Te°GroupSèts
 c⁄°& ) 
	govîride
 {

3881 
	gcuºítGroupInfo
.
ª£t
();

3883 
ã°RunEnded
(
Te°RunSèts
 c⁄°& ) 
	govîride
 {

3884 
	gcuºítTe°Ca£Info
.
ª£t
();

3885 
	gcuºítGroupInfo
.
ª£t
();

3886 
	gcuºítTe°RunInfo
.
ª£t
();

3889 
skùTe°
(
Te°Ca£Info
 c⁄°&Ë
	govîride
 {

3894 
IC⁄figPå
 
	gm_c⁄fig
;

3895 
	g°d
::
o°ªam
& 
°ªam
;

3897 
	gLazySèt
<
	gTe°RunInfo
> 
	gcuºítTe°RunInfo
;

3898 
	gLazySèt
<
	gGroupInfo
> 
	gcuºítGroupInfo
;

3899 
	gLazySèt
<
	gTe°Ca£Info
> 
	gcuºítTe°Ca£Info
;

3901 
	g°d
::
ve˘‹
<
Se˘i⁄Info
> 
m_£˘i⁄Sèck
;

3902 
Rï‹ãrPª„ªn˚s
 
	gm_ªp‹ãrPªfs
;

3905 
	gãm∂©e
<
ty≥«me
 
	gDîivedT
>

3906 
	gCumuœtiveRï‹ãrBa£
 : 
ISåómögRï‹ãr
 {

3907 
ãm∂©e
<
ty≥«me
 
T
,Åy≥«mê
	gChûdNodeT
>

3908 
	sNode
 {

3909 
ex∂icô
 
Node
–
T
 c⁄°& 
_vÆue
 ) : 
vÆue
( _value ) {}

3910 
vútuÆ
 ~
Node
() {}

3912 
usög
 
ChûdNodes
 = 
°d
::
ve˘‹
<°d::
sh¨ed_±r
<
ChûdNodeT
>>;

3913 
T
 
	gvÆue
;

3914 
ChûdNodes
 
	gchûdªn
;

3916 
	sSe˘i⁄Node
 {

3917 
ex∂icô
 
Se˘i⁄Node
(
Se˘i⁄Sèts
 c⁄°& 
_°©s
Ë: 
°©s
(_stats) {}

3918 
vútuÆ
 ~
Se˘i⁄Node
() = ;

3920 
boﬁ
 
	g›î©‹
 =(
Se˘i⁄Node
 c⁄°& 
Ÿhî
) const {

3921  
°©s
.
£˘i⁄Info
.
löeInfo
 =
Ÿhî
.stats.sectionInfo.lineInfo;

3923 
boﬁ
 
	g›î©‹
 =(
°d
::
sh¨ed_±r
<
Se˘i⁄Node
> c⁄°& 
Ÿhî
) const {

3924  
›î©‹
==(*
Ÿhî
);

3927 
Se˘i⁄Sèts
 
	g°©s
;

3928 
usög
 
	gChûdSe˘i⁄s
 = 
°d
::
ve˘‹
<°d::
sh¨ed_±r
<
Se˘i⁄Node
>>;

3929 
usög
 
	gAs£πi⁄s
 = 
°d
::
ve˘‹
<
As£πi⁄Sèts
>;

3930 
ChûdSe˘i⁄s
 
	gchûdSe˘i⁄s
;

3931 
As£πi⁄s
 
	gas£πi⁄s
;

3932 
	g°d
::
°rög
 
°dOut
;

3933 
	g°d
::
°rög
 
°dEº
;

3936 
	sBySe˘i⁄Info
 {

3937 
BySe˘i⁄Info
–
Se˘i⁄Info
 c⁄°& 
Ÿhî
 ) : 
m_Ÿhî
( other ) {}

3938 
BySe˘i⁄Info
–BySe˘i⁄Infÿc⁄°& 
Ÿhî
 ) : 
m_Ÿhî
( other.m_other ) {}

3939 
boﬁ
 
›î©‹
(Ë(
°d
::
sh¨ed_±r
<
Se˘i⁄Node
> c⁄°& 
node
) const {

3940  ((
node
->
°©s
.
£˘i⁄Info
.
«me
 =
m_Ÿhî
.name) &&

3941 (
node
->
°©s
.
£˘i⁄Info
.
löeInfo
 =
m_Ÿhî
.lineInfo));

3943 
	g›î©‹
=(
BySe˘i⁄Info
 c⁄°&Ë
dñëe
;

3945 
	g¥iv©e
:

3946 
Se˘i⁄Info
 c⁄°& 
m_Ÿhî
;

3949 
usög
 
	gTe°Ca£Node
 = 
Node
<
Te°Ca£Sèts
, 
	gSe˘i⁄Node
>;

3950 
usög
 
	gTe°GroupNode
 = 
Node
<
Te°GroupSèts
, 
	gTe°Ca£Node
>;

3951 
usög
 
	gTe°RunNode
 = 
Node
<
Te°RunSèts
, 
	gTe°GroupNode
>;

3953 
CumuœtiveRï‹ãrBa£
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

3954 : 
m_c⁄fig
–
_c⁄fig
.
fuŒC⁄fig
() ),

3955 
°ªam
–
_c⁄fig
.stream() )

3957 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
Ál£
;

3958 if–!
	gDîivedT
::
gëSuµ‹ãdVîbosôõs
().
cou¡
–
m_c⁄fig
->
vîbosôy
() ) )

3959 
throw
 
°d
::
domaö_îr‹
( "VerbosityÜevelÇot supported byÅhisÑeporter" );

3961 ~
CumuœtiveRï‹ãrBa£
(Ë
	govîride
 = ;

3963 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
	govîride
 {

3964  
	gm_ªp‹ãrPªfs
;

3967 
	g°d
::
£t
<
Vîbosôy
> 
gëSuµ‹ãdVîbosôõs
() {

3968  { 
Vîbosôy
::
N‹mÆ
 };

3971 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& ) 
	govîride
 {}

3972 
ã°GroupSèπög
–
GroupInfo
 c⁄°& ) 
	govîride
 {}

3974 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& ) 
	govîride
 {}

3976 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) 
	govîride
 {

3977 
Se˘i⁄Sèts
 
öcom∂ëeSèts
–
£˘i⁄Info
, 
Cou¡s
(), 0, 
Ál£
 );

3978 
	g°d
::
sh¨ed_±r
<
Se˘i⁄Node
> 
node
;

3979 if–
	gm_£˘i⁄Sèck
.
em±y
() ) {

3980 if–!
	gm_roŸSe˘i⁄
 )

3981 
	gm_roŸSe˘i⁄
 = 
°d
::
make_sh¨ed
<
Se˘i⁄Node
>–
öcom∂ëeSèts
 );

3982 
	gnode
 = 
m_roŸSe˘i⁄
;

3985 
	gSe˘i⁄Node
& 
	g∑ª¡Node
 = *
m_£˘i⁄Sèck
.
back
();

3986 autÿ
	gô
 =

3987 
°d
::
föd_if
–
∑ª¡Node
.
chûdSe˘i⁄s
.
begö
(),

3988 
∑ª¡Node
.
chûdSe˘i⁄s
.
íd
(),

3989 
BySe˘i⁄Info
–
£˘i⁄Info
 ) );

3990 if–
	gô
 =
∑ª¡Node
.
chûdSe˘i⁄s
.
íd
() ) {

3991 
node
 = 
°d
::
make_sh¨ed
<
Se˘i⁄Node
>–
öcom∂ëeSèts
 );

3992 
	g∑ª¡Node
.
	gchûdSe˘i⁄s
.
push_back
–
node
 );

3995 
	gnode
 = *
ô
;

3997 
	gm_£˘i⁄Sèck
.
push_back
–
node
 );

3998 
	gm_dì≥°Se˘i⁄
 = 
°d
::
move
(
node
);

4001 
as£πi⁄Sèπög
(
As£πi⁄Info
 c⁄°&Ë
	govîride
 {}

4003 
boﬁ
 
as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
Ë
	govîride
 {

4004 
as£π
(!
m_£˘i⁄Sèck
.
em±y
());

4010 
¥ï¨eEx∑ndedEx¥essi⁄
(
c⁄°_ˇ°
<
As£πi⁄Resu…
&>–
as£πi⁄Sèts
.
as£πi⁄Resu…
 ) );

4011 
	gSe˘i⁄Node
& 
	g£˘i⁄Node
 = *
m_£˘i⁄Sèck
.
back
();

4012 
	g£˘i⁄Node
.
	gas£πi⁄s
.
push_back
(
as£πi⁄Sèts
);

4013  
	gåue
;

4015 
£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
Ë
	govîride
 {

4016 
as£π
(!
m_£˘i⁄Sèck
.
em±y
());

4017 
	gSe˘i⁄Node
& 
	gnode
 = *
m_£˘i⁄Sèck
.
back
();

4018 
	gnode
.
	g°©s
 = 
£˘i⁄Sèts
;

4019 
	gm_£˘i⁄Sèck
.
p›_back
();

4021 
ã°Ca£Ended
(
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
Ë
	govîride
 {

4022 autÿ
	gnode
 = 
°d
::
make_sh¨ed
<
Te°Ca£Node
>(
ã°Ca£Sèts
);

4023 
as£π
(
m_£˘i⁄Sèck
.
size
() == 0);

4024 
	gnode
->
	gchûdªn
.
push_back
(
m_roŸSe˘i⁄
);

4025 
	gm_ã°Ca£s
.
push_back
(
node
);

4026 
	gm_roŸSe˘i⁄
.
ª£t
();

4028 
as£π
(
m_dì≥°Se˘i⁄
);

4029 
	gm_dì≥°Se˘i⁄
->
	g°dOut
 = 
ã°Ca£Sèts
.
°dOut
;

4030 
	gm_dì≥°Se˘i⁄
->
	g°dEº
 = 
ã°Ca£Sèts
.
°dEº
;

4032 
ã°GroupEnded
(
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
Ë
	govîride
 {

4033 autÿ
	gnode
 = 
°d
::
make_sh¨ed
<
Te°GroupNode
>(
ã°GroupSèts
);

4034 
	gnode
->
	gchûdªn
.
sw≠
(
m_ã°Ca£s
);

4035 
	gm_ã°Groups
.
push_back
(
node
);

4037 
ã°RunEnded
(
Te°RunSèts
 c⁄°& 
ã°RunSèts
Ë
	govîride
 {

4038 autÿ
	gnode
 = 
°d
::
make_sh¨ed
<
Te°RunNode
>(
ã°RunSèts
);

4039 
	gnode
->
	gchûdªn
.
sw≠
(
m_ã°Groups
);

4040 
	gm_ã°Runs
.
push_back
(
node
);

4041 
ã°RunEndedCumuœtive
();

4043 
vútuÆ
 
ã°RunEndedCumuœtive
() = 0;

4045 
skùTe°
(
Te°Ca£Info
 c⁄°&Ë
	govîride
 {}

4047 
IC⁄figPå
 
	gm_c⁄fig
;

4048 
	g°d
::
o°ªam
& 
°ªam
;

4049 
	g°d
::
ve˘‹
<
As£πi⁄Sèts
> 
m_as£πi⁄s
;

4050 
	g°d
::
ve˘‹
<
°d
::ve˘‹<°d::
sh¨ed_±r
<
Se˘i⁄Node
>>> 
m_£˘i⁄s
;

4051 
	g°d
::
ve˘‹
<
°d
::
sh¨ed_±r
<
Te°Ca£Node
>> 
m_ã°Ca£s
;

4052 
	g°d
::
ve˘‹
<
°d
::
sh¨ed_±r
<
Te°GroupNode
>> 
m_ã°Groups
;

4054 
	g°d
::
ve˘‹
<
°d
::
sh¨ed_±r
<
Te°RunNode
>> 
m_ã°Runs
;

4056 
	g°d
::
sh¨ed_±r
<
Se˘i⁄Node
> 
m_roŸSe˘i⁄
;

4057 
	g°d
::
sh¨ed_±r
<
Se˘i⁄Node
> 
m_dì≥°Se˘i⁄
;

4058 
	g°d
::
ve˘‹
<
°d
::
sh¨ed_±r
<
Se˘i⁄Node
>> 
m_£˘i⁄Sèck
;

4059 
Rï‹ãrPª„ªn˚s
 
	gm_ªp‹ãrPªfs
;

4062 
	gãm∂©e
<
	gC
>

4063 c⁄°* 
gëLöeOfCh¨s
() {

4064 
	glöe
[
CATCH_CONFIG_CONSOLE_WIDTH
] = {0};

4065 if–!*
	glöe
 ) {

4066 
	g°d
::
mem£t
–
löe
, 
C
, 
CATCH_CONFIG_CONSOLE_WIDTH
-1 );

4067 
	glöe
[
CATCH_CONFIG_CONSOLE_WIDTH
-1] = 0;

4069  
	glöe
;

4072 
	gTe°EvítLi°íîBa£
 : 
SåómögRï‹ãrBa£
<
Te°EvítLi°íîBa£
> {

4073 
Te°EvítLi°íîBa£
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 );

4075 
as£πi⁄Sèπög
(
As£πi⁄Info
 c⁄°&Ë
	govîride
;

4076 
boﬁ
 
as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°&Ë
	govîride
;

4084 
«me•a˚
 
	gC©ch
 {

4086 
	sCﬁour
 {

4087 
	eCode
 {

4088 
	gN⁄e
 = 0,

4090 
	gWhôe
,

4091 
	gRed
,

4092 
	gGªí
,

4093 
	gBlue
,

4094 
	gCy™
,

4095 
	gYñlow
,

4096 
	gGªy
,

4098 
	gBright
 = 0x10,

4100 
	gBrightRed
 = 
Bright
 | 
Red
,

4101 
	gBrightGªí
 = 
Bright
 | 
Gªí
,

4102 
	gLightGªy
 = 
Bright
 | 
Gªy
,

4103 
	gBrightWhôe
 = 
Bright
 | 
Whôe
,

4104 
	gBrightYñlow
 = 
Bright
 | 
Yñlow
,

4107 
	gFûeName
 = 
LightGªy
,

4108 
	gW¨nög
 = 
BrightYñlow
,

4109 
	gResu…Eº‹
 = 
BrightRed
,

4110 
	gResu…Suc˚ss
 = 
BrightGªí
,

4111 
	gResu…Ex≥˘edFaûuª
 = 
W¨nög
,

4113 
	gEº‹
 = 
BrightRed
,

4114 
	gSuc˚ss
 = 
Gªí
,

4116 
	gOrigöÆEx¥essi⁄
 = 
Cy™
,

4117 
	gRec⁄°ru˘edEx¥essi⁄
 = 
BrightYñlow
,

4119 
	gSec⁄d¨yText
 = 
LightGªy
,

4120 
	gHódîs
 = 
Whôe


4124 
Cﬁour
–
Code
 
_cﬁourCode
 );

4125 
Cﬁour
–Cﬁour&& 
Ÿhî
 ) 
	gn€x˚±
;

4126 
	gCﬁour
& 
	g›î©‹
=–
Cﬁour
&& 
Ÿhî
 ) 
n€x˚±
;

4127 ~
Cﬁour
();

4130 
u£
–
Code
 
_cﬁourCode
 );

4132 
	g¥iv©e
:

4133 
boﬁ
 
m_moved
 = 
Ál£
;

4136 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Cﬁour
 const& );

4144 
«me•a˚
 
	gC©ch
 {

4146 
	gãm∂©e
<
ty≥«me
 
	gT
>

4147 ˛as†
	cRï‹ãrRegi°ør
 {

4149 ˛as†
	cRï‹ãrFa˘‹y
 : 
public
 
IRï‹ãrFa˘‹y
 {

4151 
vútuÆ
 
ISåómögRï‹ãrPå
 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) c⁄° 
ovîride
 {

4152  
°d
::
unique_±r
<
T
>–
√w
 T–
c⁄fig
 ) );

4155 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
(Ëc⁄° 
ovîride
 {

4156  
T
::
gëDes¸ùti⁄
();

4160 
	gpublic
:

4162 
ex∂icô
 
Rï‹ãrRegi°ør
–
°d
::
°rög
 c⁄°& 
«me
 ) {

4163 
gëMuèbÀRegi°ryHub
().
ªgi°îRï‹ãr
–
«me
, 
°d
::
make_sh¨ed
<
Rï‹ãrFa˘‹y
>() );

4167 
	gãm∂©e
<
ty≥«me
 
	gT
>

4168 ˛as†
	cLi°íîRegi°ør
 {

4170 ˛as†
	cLi°íîFa˘‹y
 : 
public
 
IRï‹ãrFa˘‹y
 {

4172 
vútuÆ
 
ISåómögRï‹ãrPå
 
¸óã
–
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
 ) c⁄° 
ovîride
 {

4173  
°d
::
unique_±r
<
T
>–
√w
 T–
c⁄fig
 ) );

4175 
vútuÆ
 
	g°d
::
°rög
 
gëDes¸ùti⁄
(Ëc⁄° 
ovîride
 {

4176  
°d
::
°rög
();

4180 
	gpublic
:

4182 
Li°íîRegi°ør
() {

4183 
gëMuèbÀRegi°ryHub
().
ªgi°îLi°íî
–
°d
::
make_sh¨ed
<
Li°íîFa˘‹y
>() );

4188 #i‡!
deföed
(
CATCH_CONFIG_DISABLE
)

4190 
	#CATCH_REGISTER_REPORTER
–
«me
, 
ªp‹ãrTy≥
 ) \

4191 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

4192 
«me•a˚
{ 
C©ch
::
Rï‹ãrRegi°ør
<
ªp‹ãrTy≥
> 
ˇtch_öã∫Æ_Regi°ørF‹
##
	`ªp‹ãrTy≥
–
«me
 ); } \

4193 
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS


	)

4195 
	#CATCH_REGISTER_LISTENER
–
li°íîTy≥
 ) \

4196 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
 \

4197 
«me•a˚
{ 
C©ch
::
Li°íîRegi°ør
<
li°íîTy≥
> 
ˇtch_öã∫Æ_Regi°ørF‹
##listenerType; } \

4198 
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS


	)

4201 
	#CATCH_REGISTER_REPORTER
(
«me
, 
ªp‹ãrTy≥
)

	)

4202 
	#CATCH_REGISTER_LISTENER
(
li°íîTy≥
)

	)

4210 
«me•a˚
 
	gC©ch
 {

4212 
	gCom∑˘Rï‹ãr
 : 
SåómögRï‹ãrBa£
<
Com∑˘Rï‹ãr
> {

4214 
usög
 
SåómögRï‹ãrBa£
::StreamingReporterBase;

4216 ~
Com∑˘Rï‹ãr
(Ë
	govîride
;

4218 
	g°d
::
°rög
 
gëDes¸ùti⁄
();

4220 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
	govîride
;

4222 
noM©chögTe°Ca£s
(
°d
::
°rög
 c⁄°& 
•ec
Ë
ovîride
;

4224 
as£πi⁄Sèπög
(
As£πi⁄Info
 c⁄°&Ë
	govîride
;

4226 
boﬁ
 
as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°& 
_as£πi⁄Sèts
Ë
	govîride
;

4228 
£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& 
_£˘i⁄Sèts
Ë
	govîride
;

4230 
ã°RunEnded
(
Te°RunSèts
 c⁄°& 
_ã°RunSèts
Ë
	govîride
;

4239 #i‡
deföed
(
_MSC_VER
)

4240 #¥agm®
w¨nög
(
push
)

4241 #¥agm®
w¨nög
(
dißbÀ
:4061)

4246 
«me•a˚
 
	gC©ch
 {

4248 
	gSumm¨yCﬁumn
;

4249 
˛ass
 
	gTabÀPröãr
;

4251 
	gC⁄sﬁeRï‹ãr
 : 
SåómögRï‹ãrBa£
<
C⁄sﬁeRï‹ãr
> {

4252 
°d
::
unique_±r
<
TabÀPröãr
> 
m_èbÀPröãr
;

4254 
C⁄sﬁeRï‹ãr
(
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
);

4255 ~
C⁄sﬁeRï‹ãr
(Ë
	govîride
;

4256 
	g°d
::
°rög
 
gëDes¸ùti⁄
();

4258 
noM©chögTe°Ca£s
(
°d
::
°rög
 c⁄°& 
•ec
Ë
ovîride
;

4260 
as£πi⁄Sèπög
(
As£πi⁄Info
 c⁄°&Ë
	govîride
;

4262 
boﬁ
 
as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°& 
_as£πi⁄Sèts
Ë
	govîride
;

4264 
£˘i⁄Sèπög
(
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
Ë
	govîride
;

4265 
£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& 
_£˘i⁄Sèts
Ë
	govîride
;

4267 
bíchm¨kSèπög
(
Bíchm¨kInfo
 c⁄°& 
öfo
Ë
	govîride
;

4268 
bíchm¨kEnded
(
Bíchm¨kSèts
 c⁄°& 
°©s
Ë
	govîride
;

4270 
ã°Ca£Ended
(
Te°Ca£Sèts
 c⁄°& 
_ã°Ca£Sèts
Ë
	govîride
;

4271 
ã°GroupEnded
(
Te°GroupSèts
 c⁄°& 
_ã°GroupSèts
Ë
	govîride
;

4272 
ã°RunEnded
(
Te°RunSèts
 c⁄°& 
_ã°RunSèts
Ë
	govîride
;

4274 
	g¥iv©e
:

4276 
œzyPröt
();

4278 
œzyPrötWôhoutClosögBíchm¨kTabÀ
();

4279 
œzyPrötRunInfo
();

4280 
œzyPrötGroupInfo
();

4281 
¥ötTe°Ca£AndSe˘i⁄Hódî
();

4283 
¥ötClo£dHódî
(
°d
::
°rög
 c⁄°& 
_«me
);

4284 
¥ötO≥nHódî
(
°d
::
°rög
 c⁄°& 
_«me
);

4288 
¥ötHódîSåög
(
°d
::
°rög
 c⁄°& 
_°rög
, std::
size_t
 
ödít
 = 0);

4290 
¥ötTŸÆs
(
TŸÆs
 c⁄°& 
tŸÆs
);

4291 
¥ötSumm¨yRow
(
°d
::
°rög
 c⁄°& 
œbñ
, std::
ve˘‹
<
Summ¨yCﬁumn
> c⁄°& 
cﬁs
, std::
size_t
 
row
);

4293 
¥ötTŸÆsDividî
(
TŸÆs
 c⁄°& 
tŸÆs
);

4294 
¥ötSumm¨yDividî
();

4296 
	g¥iv©e
:

4297 
boﬁ
 
m_hódîPröãd
 = 
Ál£
;

4302 #i‡
deföed
(
_MSC_VER
)

4303 #¥agm®
w¨nög
(
p›
)

4311 
	~<ve˘‹
>

4313 
«me•a˚
 
	gC©ch
 {

4315 ˛as†
	cXmlEncode
 {

4316 
	gpublic
:

4317 
	eF‹Wh©
 { 
F‹TextNodes
, 
	gF‹Aâribuãs
 };

4319 
XmlEncode
–
°d
::
°rög
 c⁄°& 
°r
, 
F‹Wh©
 
f‹Wh©
 = 
F‹TextNodes
 );

4321 
ícodeTo
–
°d
::
o°ªam
& 
os
 ) const;

4323 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
XmlEncode
 c⁄°& 
	gxmlEncode
 );

4325 
	g¥iv©e
:

4326 
°d
::
°rög
 
m_°r
;

4327 
F‹Wh©
 
	gm_f‹Wh©
;

4330 ˛as†
	cXmlWrôî
 {

4331 
	gpublic
:

4333 ˛as†
	cSc›edEÀmít
 {

4334 
public
:

4335 
Sc›edEÀmít
–
XmlWrôî
* 
wrôî
 );

4337 
Sc›edEÀmít
–Sc›edEÀmít&& 
Ÿhî
 ) 
	gn€x˚±
;

4338 
	gSc›edEÀmít
& 
	g›î©‹
=–
Sc›edEÀmít
&& 
Ÿhî
 ) 
n€x˚±
;

4340 ~
Sc›edEÀmít
();

4342 
	gSc›edEÀmít
& 
wrôeText
–
°d
::
°rög
 c⁄°& 
ãxt
, 
boﬁ
 
ödít
 = 
åue
 );

4344 
	gãm∂©e
<
ty≥«me
 
	gT
>

4345 
	gSc›edEÀmít
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
T
 c⁄°& 
©åibuã
 ) {

4346 
	gm_wrôî
->
wrôeAâribuã
–
«me
, 
©åibuã
 );

4347  *
	gthis
;

4350 
	g¥iv©e
:

4351 
muèbÀ
 
XmlWrôî
* 
m_wrôî
 = 
nuŒ±r
;

4354 
XmlWrôî
–
°d
::
o°ªam
& 
os
 = 
C©ch
::
cout
() );

4355 ~
XmlWrôî
();

4357 
XmlWrôî
–XmlWrôî c⁄°& ) = 
dñëe
;

4358 
	gXmlWrôî
& 
	g›î©‹
=–
XmlWrôî
 c⁄°& ) = 
dñëe
;

4360 
	gXmlWrôî
& 
°¨tEÀmít
–
°d
::
°rög
 c⁄°& 
«me
 );

4362 
Sc›edEÀmít
 
sc›edEÀmít
–
°d
::
°rög
 c⁄°& 
«me
 );

4364 
	gXmlWrôî
& 
ídEÀmít
();

4366 
	gXmlWrôî
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, std::°rög c⁄°& 
©åibuã
 );

4368 
	gXmlWrôî
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
boﬁ
 
©åibuã
 );

4370 
	gãm∂©e
<
ty≥«me
 
	gT
>

4371 
	gXmlWrôî
& 
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
T
 c⁄°& 
©åibuã
 ) {

4372 
ReußbÀSåögSåóm
 
	grss
;

4373 
	grss
 << 
	g©åibuã
;

4374  
wrôeAâribuã
–
«me
, 
rss
.
°r
() );

4377 
	gXmlWrôî
& 
wrôeText
–
°d
::
°rög
 c⁄°& 
ãxt
, 
boﬁ
 
ödít
 = 
åue
 );

4379 
	gXmlWrôî
& 
wrôeCommít
–
°d
::
°rög
 c⁄°& 
ãxt
 );

4381 
wrôeStyÀshìtRef
–
°d
::
°rög
 c⁄°& 
uæ
 );

4383 
	gXmlWrôî
& 
wrôeBœnkLöe
();

4385 
ísuªTagClo£d
();

4387 
	g¥iv©e
:

4389 
wrôeDe˛¨©i⁄
();

4391 
√wlöeIfNe˚sßry
();

4393 
boﬁ
 
	gm_ègIsO≥n
 = 
Ál£
;

4394 
boﬁ
 
	gm_√edsNewlöe
 = 
Ál£
;

4395 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
m_ègs
;

4396 
	g°d
::
°rög
 
m_ödít
;

4397 
	g°d
::
o°ªam
& 
m_os
;

4403 
«me•a˚
 
	gC©ch
 {

4405 
˛ass
 
	gJunôRï‹ãr
 : 
public
 
CumuœtiveRï‹ãrBa£
<
JunôRï‹ãr
> {

4406 
public
:

4407 
JunôRï‹ãr
(
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
);

4409 ~
JunôRï‹ãr
(Ë
	govîride
;

4411 
	g°d
::
°rög
 
gëDes¸ùti⁄
();

4413 
noM©chögTe°Ca£s
(
°d
::
°rög
 c⁄°& ) 
ovîride
;

4415 
ã°RunSèπög
(
Te°RunInfo
 c⁄°& 
runInfo
Ë
	govîride
;

4417 
ã°GroupSèπög
(
GroupInfo
 c⁄°& 
groupInfo
Ë
	govîride
;

4419 
ã°Ca£Sèπög
(
Te°Ca£Info
 c⁄°& 
ã°Ca£Info
Ë
	govîride
;

4420 
boﬁ
 
as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
Ë
	govîride
;

4422 
ã°Ca£Ended
(
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
Ë
	govîride
;

4424 
ã°GroupEnded
(
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
Ë
	govîride
;

4426 
ã°RunEndedCumuœtive
(Ë
	govîride
;

4428 
wrôeGroup
(
Te°GroupNode
 c⁄°& 
groupNode
, 
suôeTime
);

4430 
wrôeTe°Ca£
(
Te°Ca£Node
 c⁄°& 
ã°Ca£Node
);

4432 
wrôeSe˘i⁄
(
°d
::
°rög
 c⁄°& 
˛assName
,

4433 
°d
::
°rög
 c⁄°& 
roŸName
,

4434 
Se˘i⁄Node
 c⁄°& 
£˘i⁄Node
);

4436 
wrôeAs£πi⁄s
(
Se˘i⁄Node
 c⁄°& 
£˘i⁄Node
);

4437 
wrôeAs£πi⁄
(
As£πi⁄Sèts
 c⁄°& 
°©s
);

4439 
XmlWrôî
 
	gxml
;

4440 
Timî
 
	gsuôeTimî
;

4441 
	g°d
::
°rög
 
°dOutF‹Suôe
;

4442 
	g°d
::
°rög
 
°dEºF‹Suôe
;

4443 
	gu√x≥˘edEx˚±i⁄s
 = 0;

4444 
boﬁ
 
	gm_okToFaû
 = 
Ál£
;

4452 
«me•a˚
 
	gC©ch
 {

4453 
˛ass
 
	gXmlRï‹ãr
 : 
public
 
SåómögRï‹ãrBa£
<
XmlRï‹ãr
> {

4454 
public
:

4455 
XmlRï‹ãr
(
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
);

4457 ~
XmlRï‹ãr
(Ë
	govîride
;

4459 
	g°d
::
°rög
 
gëDes¸ùti⁄
();

4461 
vútuÆ
 
	g°d
::
°rög
 
gëStyÀshìtRef
() const;

4463 
wrôeSour˚Info
(
Sour˚LöeInfo
 c⁄°& 
sour˚Info
);

4465 
	gpublic
:

4467 
noM©chögTe°Ca£s
(
°d
::
°rög
 c⁄°& 
s
Ë
ovîride
;

4469 
ã°RunSèπög
(
Te°RunInfo
 c⁄°& 
ã°Info
Ë
	govîride
;

4471 
ã°GroupSèπög
(
GroupInfo
 c⁄°& 
groupInfo
Ë
	govîride
;

4473 
ã°Ca£Sèπög
(
Te°Ca£Info
 c⁄°& 
ã°Info
Ë
	govîride
;

4475 
£˘i⁄Sèπög
(
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
Ë
	govîride
;

4477 
as£πi⁄Sèπög
(
As£πi⁄Info
 c⁄°&Ë
	govîride
;

4479 
boﬁ
 
as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
Ë
	govîride
;

4481 
£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
Ë
	govîride
;

4483 
ã°Ca£Ended
(
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
Ë
	govîride
;

4485 
ã°GroupEnded
(
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
Ë
	govîride
;

4487 
ã°RunEnded
(
Te°RunSèts
 c⁄°& 
ã°RunSèts
Ë
	govîride
;

4489 
	g¥iv©e
:

4490 
Timî
 
m_ã°Ca£Timî
;

4491 
XmlWrôî
 
	gm_xml
;

4492 
	gm_£˘i⁄Dïth
 = 0;

4504 #ifde‡
CATCH_IMPL


4507 #ifde‡
__˛™g__


4508 #¥agm®
˛™g
 
dügno°ic
 
push


4509 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wweak-vtables"

4515 
	~<°rög
>

4516 
	~<ve˘‹
>

4517 
	~<mem‹y
>

4519 
«me•a˚
 
	gC©ch
 {

4520 
«me•a˚
 
	gTe°Ca£Tøckög
 {

4522 
	sNameAndLoˇti⁄
 {

4523 
	g°d
::
°rög
 
«me
;

4524 
Sour˚LöeInfo
 
	gloˇti⁄
;

4526 
NameAndLoˇti⁄
–
°d
::
°rög
 c⁄°& 
_«me
, 
Sour˚LöeInfo
 c⁄°& 
_loˇti⁄
 );

4529 
	gITøckî
;

4531 
usög
 
	gITøckîPå
 = 
°d
::
sh¨ed_±r
<
ITøckî
>;

4533 
	sITøckî
 {

4534 
	gvútuÆ
 ~
ITøckî
();

4537 
vútuÆ
 
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
() const = 0;

4540 
vútuÆ
 
boﬁ
 
isCom∂ëe
() const = 0;

4541 
vútuÆ
 
boﬁ
 
isSuc˚ssfuŒyCom∂ëed
() const = 0;

4542 
vútuÆ
 
boﬁ
 
isO≥n
() const = 0;

4543 
vútuÆ
 
boﬁ
 
hasChûdªn
() const = 0;

4545 
vútuÆ
 
	gITøckî
& 
∑ª¡
() = 0;

4548 
vútuÆ
 
˛o£
() = 0;

4549 
vútuÆ
 
Áû
() = 0;

4550 
vútuÆ
 
m¨kAsNìdögAnŸhîRun
() = 0;

4552 
vútuÆ
 
addChûd
–
ITøckîPå
 c⁄°& 
chûd
 ) = 0;

4553 
vútuÆ
 
ITøckîPå
 
födChûd
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 ) = 0;

4554 
vútuÆ
 
›íChûd
() = 0;

4557 
vútuÆ
 
boﬁ
 
isSe˘i⁄Tøckî
() const = 0;

4558 
vútuÆ
 
boﬁ
 
isIndexTøckî
() const = 0;

4561 ˛as†
	cTøckîC⁄ãxt
 {

4563 
	eRunSèã
 {

4564 
	gNŸSèπed
,

4565 
	gExecutög
,

4566 
	gCom∂ëedCy˛e


4569 
ITøckîPå
 
	gm_roŸTøckî
;

4570 
ITøckî
* 
	gm_cuºítTøckî
 = 
nuŒ±r
;

4571 
RunSèã
 
	gm_runSèã
 = 
NŸSèπed
;

4573 
	gpublic
:

4575 
TøckîC⁄ãxt
& 
ö°™˚
();

4577 
	gITøckî
& 
°¨tRun
();

4578 
ídRun
();

4580 
°¨tCy˛e
();

4581 
com∂ëeCy˛e
();

4583 
boﬁ
 
com∂ëedCy˛e
() const;

4584 
	gITøckî
& 
cuºítTøckî
();

4585 
£tCuºítTøckî
–
ITøckî
* 
åackî
 );

4588 ˛as†
	cTøckîBa£
 : 
public
 
ITøckî
 {

4589 
¥Ÿe˘ed
:

4590 
	eCy˛eSèã
 {

4591 
NŸSèπed
,

4592 
	gExecutög
,

4593 
	gExecutögChûdªn
,

4594 
	gNìdsAnŸhîRun
,

4595 
	gCom∂ëedSuc˚ssfuŒy
,

4596 
	gFaûed


4599 ˛as†
	cTøckîHasName
 {

4600 
NameAndLoˇti⁄
 
	gm_«meAndLoˇti⁄
;

4601 
	gpublic
:

4602 
TøckîHasName
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 );

4603 
boﬁ
 
›î©‹
 ()–
ITøckîPå
 c⁄°& 
	gåackî
 ) const;

4606 
usög
 
	gChûdªn
 = 
°d
::
ve˘‹
<
ITøckîPå
>;

4607 
NameAndLoˇti⁄
 
	gm_«meAndLoˇti⁄
;

4608 
	gTøckîC⁄ãxt
& 
	gm_˘x
;

4609 
ITøckî
* 
	gm_∑ª¡
;

4610 
Chûdªn
 
	gm_chûdªn
;

4611 
Cy˛eSèã
 
	gm_runSèã
 = 
NŸSèπed
;

4613 
	gpublic
:

4614 
TøckîBa£
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
 );

4616 
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
(Ëc⁄° 
	govîride
;

4617 
boﬁ
 
isCom∂ëe
(Ëc⁄° 
	govîride
;

4618 
boﬁ
 
isSuc˚ssfuŒyCom∂ëed
(Ëc⁄° 
	govîride
;

4619 
boﬁ
 
isO≥n
(Ëc⁄° 
	govîride
;

4620 
boﬁ
 
hasChûdªn
(Ëc⁄° 
	govîride
;

4622 
addChûd
–
ITøckîPå
 c⁄°& 
chûd
 ) 
	govîride
;

4624 
ITøckîPå
 
födChûd
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 ) 
	govîride
;

4625 
	gITøckî
& 
∑ª¡
(Ë
	govîride
;

4627 
›íChûd
(Ë
	govîride
;

4629 
boﬁ
 
isSe˘i⁄Tøckî
(Ëc⁄° 
	govîride
;

4630 
boﬁ
 
isIndexTøckî
(Ëc⁄° 
	govîride
;

4632 
›í
();

4634 
˛o£
(Ë
	govîride
;

4635 
Áû
(Ë
	govîride
;

4636 
m¨kAsNìdögAnŸhîRun
(Ë
	govîride
;

4638 
	g¥iv©e
:

4639 
moveToP¨ít
();

4640 
moveToThis
();

4643 ˛as†
	cSe˘i⁄Tøckî
 : 
public
 
TøckîBa£
 {

4644 
°d
::
ve˘‹
<°d::
°rög
> 
m_fûãrs
;

4645 
	gpublic
:

4646 
Se˘i⁄Tøckî
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
 );

4648 
boﬁ
 
isSe˘i⁄Tøckî
(Ëc⁄° 
	govîride
;

4650 
	gSe˘i⁄Tøckî
& 
acquúe
–
TøckîC⁄ãxt
& 
˘x
, 
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 );

4652 
åyO≥n
();

4654 
addInôülFûãrs
–
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
fûãrs
 );

4655 
addNextFûãrs
–
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
fûãrs
 );

4658 ˛as†
	cIndexTøckî
 : 
public
 
TøckîBa£
 {

4659 
m_size
;

4660 
	gm_ödex
 = -1;

4661 
	gpublic
:

4662 
IndexTøckî
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
, 
size
 );

4664 
boﬁ
 
isIndexTøckî
(Ëc⁄° 
	govîride
;

4665 
˛o£
(Ë
	govîride
;

4667 
	gIndexTøckî
& 
acquúe
–
TøckîC⁄ãxt
& 
˘x
, 
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
size
 );

4669 
ödex
() const;

4671 
moveNext
();

4676 
usög
 
	gTe°Ca£Tøckög
::
ITøckî
;

4677 
usög
 
	gTe°Ca£Tøckög
::
TøckîC⁄ãxt
;

4678 
usög
 
	gTe°Ca£Tøckög
::
Se˘i⁄Tøckî
;

4679 
usög
 
	gTe°Ca£Tøckög
::
IndexTøckî
;

4687 
«me•a˚
 
	gC©ch
 {

4689 
	sLókDëe˘‹
 {

4690 
LókDëe˘‹
();

4698 
	~<cm©h
>

4699 
	~<limôs
>

4701 
	g«me•a˚
 {

4705 
boﬁ
 
m¨göCom∑ris⁄
(
lhs
, 
rhs
, 
m¨gö
) {

4706  (
	glhs
 + 
	gm¨gö
 >
rhs
Ë&& (rh†+ 
m¨gö
 >
lhs
);

4711 
«me•a˚
 
	gC©ch
 {

4712 
«me•a˚
 
	gDëaû
 {

4714 
	gAµrox
::
Aµrox
 ( 
vÆue
 )

4715 : 
m_ïsû⁄
–
°d
::
numîic_limôs
<>::
ïsû⁄
()*100 ),

4716 
m_m¨gö
( 0.0 ),

4717 
m_sˇÀ
( 0.0 ),

4718 
m_vÆue
–
vÆue
 )

4721 
Aµrox
 
	gAµrox
::
cu°om
() {

4722  
Aµrox
( 0 );

4725 
Aµrox
 
	gAµrox
::
›î©‹
-() const {

4726 autÿ
ãmp
(*
this
);

4727 
	gãmp
.
	gm_vÆue
 = -
ãmp
.
m_vÆue
;

4728  
	gãmp
;

4731 
	g°d
::
°rög
 
Aµrox
::
toSåög
() const {

4732 
ReußbÀSåögSåóm
 
rss
;

4733 
	grss
 << "Aµrox–" << ::
C©ch
::
Dëaû
::
°rögify
–
m_vÆue
 ) << " )";

4734  
	grss
.
°r
();

4737 
boﬁ
 
	gAµrox
::
equÆôyCom∑ris⁄Im∂
(c⁄° 
Ÿhî
) const {

4740  
m¨göCom∑ris⁄
(
m_vÆue
, 
Ÿhî
, 
m_m¨gö
Ë|| m¨göCom∑ris⁄(m_vÆue, othî, 
m_ïsû⁄
 * (
m_sˇÀ
 + 
°d
::
Ábs
(m_value)));

4745 
«me•a˚
 
	glôîÆs
 {

4746 
	gDëaû
::
Aµrox
 
›î©‹
 "" 
_a
(
vÆ
) {

4747  
Dëaû
::
Aµrox
(
vÆ
);

4749 
	gDëaû
::
Aµrox
 
›î©‹
 "" 
_a
(
vÆ
) {

4750  
Dëaû
::
Aµrox
(
vÆ
);

4754 
	g°d
::
°rög
 
SåögMakî
<
C©ch
::
Dëaû
::
Aµrox
>::
c⁄vît
(C©ch::Dëaû::Aµrox c⁄°& 
vÆue
) {

4755  
vÆue
.
toSåög
();

4764 
	~<mem‹y
>

4766 
«me•a˚
 
	gC©ch
 {

4768 
	gIResu…C≠tuª
;

4769 
	gIRu¬î
;

4770 
	gIC⁄fig
;

4771 
	gIMuèbÀC⁄ãxt
;

4773 
usög
 
	gIC⁄figPå
 = 
°d
::
sh¨ed_±r
<
IC⁄fig
 const>;

4775 
	sIC⁄ãxt


4777 
	gvútuÆ
 ~
IC⁄ãxt
();

4779 
vútuÆ
 
IResu…C≠tuª
* 
gëResu…C≠tuª
() = 0;

4780 
vútuÆ
 
IRu¬î
* 
gëRu¬î
() = 0;

4781 
vútuÆ
 
IC⁄figPå
 c⁄°& 
gëC⁄fig
() const = 0;

4784 
	gIMuèbÀC⁄ãxt
 : 
IC⁄ãxt


4786 
vútuÆ
 ~
IMuèbÀC⁄ãxt
();

4787 
vútuÆ
 
£tResu…C≠tuª
–
IResu…C≠tuª
* 
ªsu…C≠tuª
 ) = 0;

4788 
vútuÆ
 
£tRu¬î
–
IRu¬î
* 
ru¬î
 ) = 0;

4789 
vútuÆ
 
£tC⁄fig
–
IC⁄figPå
 c⁄°& 
c⁄fig
 ) = 0;

4791 
	g¥iv©e
:

4792 
IMuèbÀC⁄ãxt
 *
cuºítC⁄ãxt
;

4793 
‰õnd
 
	gIMuèbÀC⁄ãxt
& 
gëCuºítMuèbÀC⁄ãxt
();

4794 
‰õnd
 
˛ónUpC⁄ãxt
();

4795 
¸óãC⁄ãxt
();

4798 
ölöe
 
	gIMuèbÀC⁄ãxt
& 
gëCuºítMuèbÀC⁄ãxt
()

4800 if–!
	gIMuèbÀC⁄ãxt
::
cuºítC⁄ãxt
 )

4801 
IMuèbÀC⁄ãxt
::
¸óãC⁄ãxt
();

4802  *
	gIMuèbÀC⁄ãxt
::
cuºítC⁄ãxt
;

4805 
ölöe
 
	gIC⁄ãxt
& 
gëCuºítC⁄ãxt
()

4807  
gëCuºítMuèbÀC⁄ãxt
();

4810 
˛ónUpC⁄ãxt
();

4816 
«me•a˚
 
	gC©ch
 {

4817 
boﬁ
 
isDebuggîA˘ive
();

4820 #ifde‡
CATCH_PLATFORM_MAC


4822 
	#CATCH_TRAP
(Ë
	`__asm__
("öà$3\n" : : )

	)

4824 #ñi‡
deföed
(
CATCH_PLATFORM_LINUX
)

4828 #i‡
deföed
(
__GNUC__
Ë&& (deföed(
__i386
Ë|| deföed(
__x86_64
))

4829 
	#CATCH_TRAP
(Ë
asm
 vﬁ©ûê("öà$3"Ë

	)

4831 
	~<sig«l.h
>

4833 
	#CATCH_TRAP
(Ë
	`øi£
(
SIGTRAP
)

	)

4835 #ñi‡
deföed
(
_MSC_VER
)

4836 
	#CATCH_TRAP
(Ë
	`__debugbªak
()

	)

4837 #ñi‡
deföed
(
__MINGW32__
)

4838 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`DebugBªak
();

4839 
	#CATCH_TRAP
(Ë
	`DebugBªak
()

	)

4842 #ifde‡
CATCH_TRAP


4843 
	#CATCH_BREAK_INTO_DEBUGGER
(Ëif–
C©ch
::
	`isDebuggîA˘ive
(ËË{ 
	`CATCH_TRAP
(); 
	}

	)
}

4845 
«me•a˚
 
	gC©ch
 {

4846 
ölöe
 
doNŸhög
() {}

4848 
	#CATCH_BREAK_INTO_DEBUGGER
(Ë
C©ch
::
	`doNŸhög
()

	)

4859 #i‡
deföed
(
CATCH_PLATFORM_WINDOWS
)

4861 #i‡!
deföed
(
NOMINMAX
Ë&& !deföed(
CATCH_CONFIG_NO_NOMINMAX
)

4862 
	#CATCH_DEFINED_NOMINMAX


	)

4863 
	#NOMINMAX


	)

4865 #i‡!
deföed
(
WIN32_LEAN_AND_MEAN
Ë&& !deföed(
CATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN
)

4866 
	#CATCH_DEFINED_WIN32_LEAN_AND_MEAN


	)

4867 
	#WIN32_LEAN_AND_MEAN


	)

4870 #ifde‡
__AFXDLL


4871 
	~<AfxWö.h
>

4873 
	~<wödows.h
>

4876 #ifde‡
CATCH_DEFINED_NOMINMAX


4877 #unde‡
NOMINMAX


4879 #ifde‡
CATCH_DEFINED_WIN32_LEAN_AND_MEAN


4880 #unde‡
WIN32_LEAN_AND_MEAN


4886 #i‡
deföed
–
CATCH_CONFIG_WINDOWS_SEH
 )

4888 
«me•a˚
 
	gC©ch
 {

4890 
	sF©ÆC⁄dôi⁄H™dÀr
 {

4892 
LONG
 
CALLBACK
 
h™dÀVe˘‹edEx˚±i⁄
(
PEXCEPTION_POINTERS
 
Ex˚±i⁄Info
);

4893 
F©ÆC⁄dôi⁄H™dÀr
();

4894 
ª£t
();

4895 ~
F©ÆC⁄dôi⁄H™dÀr
();

4897 
	g¥iv©e
:

4898 
boﬁ
 
isSë
;

4899 
ULONG
 
	ggu¨™ãeSize
;

4900 
PVOID
 
	gex˚±i⁄H™dÀrH™dÀ
;

4905 #ñi‡
deföed
 ( 
CATCH_CONFIG_POSIX_SIGNALS
 )

4907 
	~<sig«l.h
>

4909 
«me•a˚
 
	gC©ch
 {

4911 
	sF©ÆC⁄dôi⁄H™dÀr
 {

4913 
boﬁ
 
	gisSë
;

4914 
siga˘i⁄
 
	gﬁdSigA˘i⁄s
[];

4915 
°ack_t
 
	gﬁdSigSèck
;

4916 
	gÆtSèckMem
[];

4918 
h™dÀSig«l
–
sig
 );

4920 
F©ÆC⁄dôi⁄H™dÀr
();

4921 ~
F©ÆC⁄dôi⁄H™dÀr
();

4922 
ª£t
();

4929 
«me•a˚
 
	gC©ch
 {

4930 
	sF©ÆC⁄dôi⁄H™dÀr
 {

4931 
ª£t
();

4938 
	~<°rög
>

4940 
«me•a˚
 
	gC©ch
 {

4942 
	gIMuèbÀC⁄ãxt
;

4946 
˛ass
 
	gRunC⁄ãxt
 : 
public
 
IResu…C≠tuª
,Öubli¯
	gIRu¬î
 {

4948 
	gpublic
:

4949 
RunC⁄ãxt
–RunC⁄ãxàc⁄°& ) = 
dñëe
;

4950 
	gRunC⁄ãxt
& 
	g›î©‹
 =–
RunC⁄ãxt
 c⁄°& ) = 
dñëe
;

4952 
ex∂icô
 
RunC⁄ãxt
–
IC⁄figPå
 c⁄°& 
_c⁄fig
, 
ISåómögRï‹ãrPå
&& 
ªp‹ãr
 );

4954 ~
RunC⁄ãxt
(Ë
	govîride
;

4956 
ã°GroupSèπög
–
°d
::
°rög
 c⁄°& 
ã°S≥c
, std::
size_t
 
groupIndex
, std::size_à
groupsCou¡
 );

4957 
ã°GroupEnded
–
°d
::
°rög
 c⁄°& 
ã°S≥c
, 
TŸÆs
 c⁄°& 
tŸÆs
, std::
size_t
 
groupIndex
, std::size_à
groupsCou¡
 );

4959 
TŸÆs
 
runTe°
(
Te°Ca£
 c⁄°& 
ã°Ca£
);

4961 
IC⁄figPå
 
c⁄fig
() const;

4962 
	gISåómögRï‹ãr
& 
ªp‹ãr
() const;

4964 
	gpublic
:

4967 
h™dÀEx¥


4968 –
As£πi⁄Info
 c⁄°& 
öfo
,

4969 
ITønsõ¡Ex¥essi⁄
 c⁄°& 
	gex¥
,

4970 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) 
	govîride
;

4971 
	gh™dÀMesßge


4972 –
As£πi⁄Info
 c⁄°& 
	göfo
,

4973 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
,

4974 
SåögRef
 c⁄°& 
	gmesßge
,

4975 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) 
	govîride
;

4976 
	gh™dÀU√x≥˘edEx˚±i⁄NŸThrown


4977 –
As£πi⁄Info
 c⁄°& 
	göfo
,

4978 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) 
	govîride
;

4979 
	gh™dÀU√x≥˘edInÊightEx˚±i⁄


4980 –
As£πi⁄Info
 c⁄°& 
	göfo
,

4981 
	g°d
::
°rög
 c⁄°& 
mesßge
,

4982 
	gAs£πi⁄Ró˘i⁄
& 
	gªa˘i⁄
 ) 
	govîride
;

4983 
	gh™dÀIncom∂ëe


4984 –
As£πi⁄Info
 c⁄°& 
	göfo
 ) 
	govîride
;

4985 
	gh™dÀN⁄Ex¥


4986 –
As£πi⁄Info
 c⁄° &
	göfo
,

4987 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
,

4988 
	gAs£πi⁄Ró˘i⁄
 &
	gªa˘i⁄
 ) 
	govîride
;

4990 
boﬁ
 
£˘i⁄Sèπed
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
, 
Cou¡s
& 
as£πi⁄s
 ) 
	govîride
;

4992 
£˘i⁄Ended
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) 
	govîride
;

4993 
£˘i⁄EndedE¨ly
–
Se˘i⁄EndInfo
 c⁄°& 
ídInfo
 ) 
	govîride
;

4995 
bíchm¨kSèπög
–
Bíchm¨kInfo
 c⁄°& 
öfo
 ) 
	govîride
;

4996 
bíchm¨kEnded
–
Bíchm¨kSèts
 c⁄°& 
°©s
 ) 
	govîride
;

4998 
pushSc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) 
	govîride
;

4999 
p›Sc›edMesßge
–
MesßgeInfo
 c⁄°& 
mesßge
 ) 
	govîride
;

5001 
	g°d
::
°rög
 
gëCuºítTe°Name
(Ëc⁄° 
ovîride
;

5003 c⁄° 
As£πi⁄Resu…
* 
gëLa°Resu…
(Ëc⁄° 
	govîride
;

5005 
ex˚±i⁄E¨lyRï‹ãd
(Ë
	govîride
;

5007 
h™dÀF©ÆEº‹C⁄dôi⁄
–
SåögRef
 
mesßge
 ) 
	govîride
;

5009 
boﬁ
 
œ°As£πi⁄Pas£d
(Ë
	govîride
;

5011 
as£πi⁄Pas£d
(Ë
	govîride
;

5013 
	gpublic
:

5015 
boﬁ
 
ab‹tög
(Ëc⁄° 
föÆ
;

5017 
	g¥iv©e
:

5019 
runCuºítTe°
–
°d
::
°rög
& 
ªdúe˘edCout
, std::°rög& 
ªdúe˘edCîr
 );

5020 
övokeA˘iveTe°Ca£
();

5022 
ª£tAs£πi⁄Info
();

5023 
boﬁ
 
ã°F‹MissögAs£πi⁄s
–
Cou¡s
& 
as£πi⁄s
 );

5025 
as£πi⁄Ended
–
As£πi⁄Resu…
 c⁄°& 
ªsu…
 );

5026 
	gªp‹tEx¥


5027 –
As£πi⁄Info
 c⁄° &
	göfo
,

5028 
	gResu…Was
::
OfTy≥
 
ªsu…Ty≥
,

5029 
ITønsõ¡Ex¥essi⁄
 c⁄° *
	gex¥
,

5030 
boﬁ
 
	g√g©ed
 );

5032 
p›uœãRó˘i⁄
–
As£πi⁄Ró˘i⁄
& 
ªa˘i⁄
 );

5034 
	g¥iv©e
:

5036 
h™dÀUnföishedSe˘i⁄s
();

5038 
Te°RunInfo
 
	gm_runInfo
;

5039 
	gIMuèbÀC⁄ãxt
& 
	gm_c⁄ãxt
;

5040 
Te°Ca£
 c⁄°* 
	gm_a˘iveTe°Ca£
 = 
nuŒ±r
;

5041 
ITøckî
* 
	gm_ã°Ca£Tøckî
;

5042 
	gO±i⁄
<
	gAs£πi⁄Resu…
> 
	gm_œ°Resu…
;

5044 
IC⁄figPå
 
	gm_c⁄fig
;

5045 
TŸÆs
 
	gm_tŸÆs
;

5046 
ISåómögRï‹ãrPå
 
	gm_ªp‹ãr
;

5047 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
m_mesßges
;

5048 
As£πi⁄Info
 
	gm_œ°As£πi⁄Info
;

5049 
	g°d
::
ve˘‹
<
Se˘i⁄EndInfo
> 
m_unföishedSe˘i⁄s
;

5050 
	g°d
::
ve˘‹
<
ITøckî
*> 
m_a˘iveSe˘i⁄s
;

5051 
TøckîC⁄ãxt
 
	gm_åackîC⁄ãxt
;

5052 
boﬁ
 
	gm_œ°As£πi⁄Pas£d
 = 
Ál£
;

5053 
boﬁ
 
	gm_shouldRï‹tU√x≥˘ed
 = 
åue
;

5054 
boﬁ
 
	gm_ö˛udeSuc˚ssfulResu…s
;

5060 
«me•a˚
 
	gC©ch
 {

5062 
	g«me•a˚
 {

5063 autÿ
	g›î©‹
 <<–
	g°d
::
o°ªam
& 
os
, 
ITønsõ¡Ex¥essi⁄
 c⁄°& 
	gex¥
 ) -> std::ostream& {

5064 
ex¥
.
°ªamRec⁄°ru˘edEx¥essi⁄
–
os
 );

5065  
	gos
;

5069 
	gLazyEx¥essi⁄
::
LazyEx¥essi⁄
–
boﬁ
 
isNeg©ed
 )

5070 : 
m_isNeg©ed
–
isNeg©ed
 )

5073 
LazyEx¥essi⁄
::LazyEx¥essi⁄–LazyEx¥essi⁄ c⁄°& 
Ÿhî
 ) : 
m_isNeg©ed
( other.m_isNegated ) {}

5075 
LazyEx¥essi⁄
::
›î©‹
 
boﬁ
() const {

5076  
m_å™sõ¡Ex¥essi⁄
 !
nuŒ±r
;

5079 autÿ
	g›î©‹
 << ( 
	g°d
::
o°ªam
& 
os
, 
LazyEx¥essi⁄
 c⁄°& 
	gœzyEx¥
 ) -> std::ostream& {

5080 if–
œzyEx¥
.
m_isNeg©ed
 )

5081 
os
 << "!";

5083 if–
	gœzyEx¥
 ) {

5084 if–
	gœzyEx¥
.
	gm_isNeg©ed
 &&ÜazyEx¥.
	gm_å™sõ¡Ex¥essi⁄
->
isBö¨yEx¥essi⁄
() )

5085 
	gos
 << "(" << *
	gœzyEx¥
.
	gm_å™sõ¡Ex¥essi⁄
 << ")";

5087 
	gos
 << *
	gœzyEx¥
.
	gm_å™sõ¡Ex¥essi⁄
;

5090 
	gos
 << "{**Érror - uncheckedÉmptyÉxpressionÑequested **}";

5092  
	gos
;

5095 
	gAs£πi⁄H™dÀr
::
As£πi⁄H™dÀr


5096 –
SåögRef
 
ma¸oName
,

5097 
Sour˚LöeInfo
 c⁄°& 
	glöeInfo
,

5098 
SåögRef
 
	gˇ±uªdEx¥essi⁄
,

5099 
	gResu…Di•osôi⁄
::
Fœgs
 
ªsu…Di•osôi⁄
 )

5100 : 
m_as£πi⁄Info
{ 
ma¸oName
, 
	glöeInfo
, 
	gˇ±uªdEx¥essi⁄
, 
	gªsu…Di•osôi⁄
 },

5101 
m_ªsu…C≠tuª
–
gëResu…C≠tuª
() )

5104 
	gAs£πi⁄H™dÀr
::
h™dÀEx¥
–
ITønsõ¡Ex¥essi⁄
 c⁄°& 
ex¥
 ) {

5105 
m_ªsu…C≠tuª
.
h™dÀEx¥
–
m_as£πi⁄Info
, 
ex¥
, 
m_ªa˘i⁄
 );

5107 
	gAs£πi⁄H™dÀr
::
h™dÀMesßge
(
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
, 
SåögRef
 c⁄°& 
mesßge
) {

5108 
	gm_ªsu…C≠tuª
.
h™dÀMesßge
–
m_as£πi⁄Info
, 
ªsu…Ty≥
, 
mesßge
, 
m_ªa˘i⁄
 );

5111 autÿ
	gAs£πi⁄H™dÀr
::
ÆlowThrows
(Ëc⁄° -> 
boﬁ
 {

5112  
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
ÆlowThrows
();

5115 
	gAs£πi⁄H™dÀr
::
com∂ëe
() {

5116 
£tCom∂ëed
();

5117 if–
	gm_ªa˘i⁄
.
	gshouldDebugBªak
 ) {

5123 
CATCH_BREAK_INTO_DEBUGGER
();

5125 if–
	gm_ªa˘i⁄
.
	gshouldThrow
 )

5126 
throw
 
	gC©ch
::
Te°FaûuªEx˚±i⁄
();

5128 
	gAs£πi⁄H™dÀr
::
£tCom∂ëed
() {

5129 
m_com∂ëed
 = 
åue
;

5132 
	gAs£πi⁄H™dÀr
::
h™dÀU√x≥˘edInÊightEx˚±i⁄
() {

5133 
m_ªsu…C≠tuª
.
h™dÀU√x≥˘edInÊightEx˚±i⁄
–
m_as£πi⁄Info
, 
C©ch
::
å™¶©eA˘iveEx˚±i⁄
(), 
m_ªa˘i⁄
 );

5136 
	gAs£πi⁄H™dÀr
::
h™dÀEx˚±i⁄ThrownAsEx≥˘ed
() {

5137 
m_ªsu…C≠tuª
.
h™dÀN⁄Ex¥
(
m_as£πi⁄Info
, 
Resu…Was
::
Ok
, 
m_ªa˘i⁄
);

5139 
	gAs£πi⁄H™dÀr
::
h™dÀEx˚±i⁄NŸThrownAsEx≥˘ed
() {

5140 
m_ªsu…C≠tuª
.
h™dÀN⁄Ex¥
(
m_as£πi⁄Info
, 
Resu…Was
::
Ok
, 
m_ªa˘i⁄
);

5143 
	gAs£πi⁄H™dÀr
::
h™dÀU√x≥˘edEx˚±i⁄NŸThrown
() {

5144 
m_ªsu…C≠tuª
.
h™dÀU√x≥˘edEx˚±i⁄NŸThrown
–
m_as£πi⁄Info
, 
m_ªa˘i⁄
 );

5147 
	gAs£πi⁄H™dÀr
::
h™dÀThrowögCÆlSkù≥d
() {

5148 
m_ªsu…C≠tuª
.
h™dÀN⁄Ex¥
(
m_as£πi⁄Info
, 
Resu…Was
::
Ok
, 
m_ªa˘i⁄
);

5153 
h™dÀEx˚±i⁄M©chEx¥
–
As£πi⁄H™dÀr
& 
h™dÀr
, 
°d
::
°rög
 c⁄°& 
°r
, 
SåögRef
 
m©chîSåög
 ) {

5154 
h™dÀEx˚±i⁄M©chEx¥
–
h™dÀr
, 
M©chîs
::
EquÆs
–
°r
 ), 
m©chîSåög
 );

5161 
«me•a˚
 
	gC©ch
 {

5162 
	gAs£πi⁄Resu…D©a
::
As£πi⁄Resu…D©a
(
Resu…Was
::
OfTy≥
 
_ªsu…Ty≥
, 
LazyEx¥essi⁄
 c⁄° & 
_œzyEx¥essi⁄
):

5163 
œzyEx¥essi⁄
(
_œzyEx¥essi⁄
),

5164 
ªsu…Ty≥
(
_ªsu…Ty≥
) {}

5166 
	g°d
::
°rög
 
As£πi⁄Resu…D©a
::
ªc⁄°ru˘Ex¥essi⁄
() const {

5168 if–
ªc⁄°ru˘edEx¥essi⁄
.
em±y
() ) {

5169 if–
œzyEx¥essi⁄
 ) {

5170 
ReußbÀSåögSåóm
 
rss
;

5171 
	grss
 << 
	gœzyEx¥essi⁄
;

5172 
	gªc⁄°ru˘edEx¥essi⁄
 = 
rss
.
°r
();

5175  
	gªc⁄°ru˘edEx¥essi⁄
;

5178 
	gAs£πi⁄Resu…
::
As£πi⁄Resu…
–
As£πi⁄Info
 c⁄°& 
öfo
, 
As£πi⁄Resu…D©a
 c⁄°& 
d©a
 )

5179 : 
m_öfo
–
öfo
 ),

5180 
m_ªsu…D©a
–
d©a
 )

5184 
boﬁ
 
	gAs£πi⁄Resu…
::
suc˚eded
() const {

5185  
C©ch
::
isOk
–
m_ªsu…D©a
.
ªsu…Ty≥
 );

5189 
boﬁ
 
	gAs£πi⁄Resu…
::
isOk
() const {

5190  
C©ch
::
isOk
–
m_ªsu…D©a
.
ªsu…Ty≥
 ) || 
shouldSuµªssFaûuª
–
m_öfo
.
ªsu…Di•osôi⁄
 );

5193 
	gResu…Was
::
OfTy≥
 
As£πi⁄Resu…
::
gëResu…Ty≥
() const {

5194  
m_ªsu…D©a
.
ªsu…Ty≥
;

5197 
boﬁ
 
	gAs£πi⁄Resu…
::
hasEx¥essi⁄
() const {

5198  
m_öfo
.
ˇ±uªdEx¥essi⁄
[0] != 0;

5201 
boﬁ
 
	gAs£πi⁄Resu…
::
hasMesßge
() const {

5202  !
m_ªsu…D©a
.
mesßge
.
em±y
();

5205 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëEx¥essi⁄
() const {

5206 if–
isFÆ£Te°
–
m_öfo
.
ªsu…Di•osôi⁄
 ) )

5207  "!(" + 
m_öfo
.
ˇ±uªdEx¥essi⁄
 + ")";

5209  
	gm_öfo
.
	gˇ±uªdEx¥essi⁄
;

5212 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëEx¥essi⁄InMa¸o
() const {

5213 
°d
::
°rög
 
ex¥
;

5214 if–
	gm_öfo
.
	gma¸oName
[0] == 0 )

5215 
ex¥
 = 
m_öfo
.
ˇ±uªdEx¥essi⁄
;

5217 
	gex¥
.
ª£rve
–
m_öfo
.
ma¸oName
.
size
(Ë+ m_öfo.
ˇ±uªdEx¥essi⁄
.size() + 4 );

5218 
	gex¥
 +
m_öfo
.
ma¸oName
;

5219 
	gex¥
 += "( ";

5220 
	gex¥
 +
m_öfo
.
ˇ±uªdEx¥essi⁄
;

5221 
	gex¥
 += " )";

5223  
	gex¥
;

5226 
boﬁ
 
	gAs£πi⁄Resu…
::
hasEx∑ndedEx¥essi⁄
() const {

5227  
hasEx¥essi⁄
(Ë&& 
gëEx∑ndedEx¥essi⁄
(Ë!
gëEx¥essi⁄
();

5230 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëEx∑ndedEx¥essi⁄
() const {

5231 
°d
::
°rög
 
ex¥
 = 
m_ªsu…D©a
.
ªc⁄°ru˘Ex¥essi⁄
();

5232  
	gex¥
.
em±y
()

5233 ? 
gëEx¥essi⁄
()

5234 : 
ex¥
;

5237 
	g°d
::
°rög
 
As£πi⁄Resu…
::
gëMesßge
() const {

5238  
m_ªsu…D©a
.
mesßge
;

5240 
Sour˚LöeInfo
 
	gAs£πi⁄Resu…
::
gëSour˚Info
() const {

5241  
m_öfo
.
löeInfo
;

5244 
SåögRef
 
	gAs£πi⁄Resu…
::
gëTe°Ma¸oName
() const {

5245  
m_öfo
.
ma¸oName
;

5252 
«me•a˚
 
	gC©ch
 {

5254 autÿ
	gBíchm¨kLo›î
::
gëResﬁuti⁄
(Ë-> 
uöt64_t
 {

5255  
gëE°im©edClockResﬁuti⁄
(Ë* 
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
bíchm¨kResﬁuti⁄Mu…ùÀ
();

5258 
	gBíchm¨kLo›î
::
ªp‹tSèπ
() {

5259 
gëResu…C≠tuª
().
bíchm¨kSèπög
–{ 
m_«me
 } );

5261 autÿ
	gBíchm¨kLo›î
::
√edsM‹eIãøti⁄s
(Ë-> 
boﬁ
 {

5262 autÿ
ñ≠£d
 = 
m_timî
.
gëEœp£dN™o£c⁄ds
();

5265 if–
	gñ≠£d
 < 
	gm_ªsﬁuti⁄
 ) {

5266 
	gm_ôî©i⁄sToRun
 *= 10;

5267  
	gåue
;

5270 
gëResu…C≠tuª
().
bíchm¨kEnded
–{ { 
m_«me
 }, 
m_cou¡
, 
ñ≠£d
 } );

5271  
	gÁl£
;

5278 
«me•a˚
 
	gC©ch
 {

5280 
usög
 
	gSåögM©chî
 = 
M©chîs
::
Im∂
::
M©chîBa£
<
°d
::
°rög
>;

5285 
h™dÀEx˚±i⁄M©chEx¥
–
As£πi⁄H™dÀr
& 
h™dÀr
, 
SåögM©chî
 c⁄°& 
m©chî
, 
SåögRef
 
m©chîSåög
 ) {

5286 
	g°d
::
°rög
 
ex˚±i⁄Mesßge
 = 
C©ch
::
å™¶©eA˘iveEx˚±i⁄
();

5287 
	gM©chEx¥
<
	g°d
::
°rög
, 
SåögM©chî
 c⁄°&> 
ex¥
–
ex˚±i⁄Mesßge
, 
m©chî
, 
m©chîSåög
 );

5288 
	gh™dÀr
.
h™dÀEx¥
–
ex¥
 );

5300 #ifde‡
CLARA_CONFIG_CONSOLE_WIDTH


5301 
	#CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
 
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH


	)

5302 #unde‡
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH


5304 
	#CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
 
CATCH_CONFIG_CONSOLE_WIDTH
-1

	)

5306 #ifde‡
__˛™g__


5307 #¥agm®
˛™g
 
dügno°ic
 
push


5308 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wweak-vtables"

5309 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wexit-time-destructors"

5310 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wshadow"

5324 #i‚de‡
CATCH_CLARA_CONFIG_CONSOLE_WIDTH


5325 
	#CATCH_CLARA_CONFIG_CONSOLE_WIDTH
 80

	)

5328 #i‚de‡
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH


5329 
	#CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
 
CATCH_CLARA_CONFIG_CONSOLE_WIDTH


	)

5332 #i‚de‡
CLARA_CONFIG_OPTIONAL_TYPE


5333 #ifde‡
__has_ö˛ude


5334 #i‡
__has_ö˛ude
(<
›ti⁄Æ
>Ë&& 
__˝lu•lus
 >= 201703L

5335 
	~<›ti⁄Æ
>

5336 
	#CLARA_CONFIG_OPTIONAL_TYPE
 
°d
::
›ti⁄Æ


	)

5353 
	~<ˇs£π
>

5354 
	~<o°ªam
>

5355 
	~<s°ªam
>

5356 
	~<ve˘‹
>

5358 #i‚de‡
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH


5359 
	#CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
 80

	)

5362 
«me•a˚
 
	gC©ch
 {Çame•a˚ 
	g˛¨a
 {Çame•a˚ 
	gTextFlow
 {

5364 
ölöe
áutÿ
isWhôe•a˚
–
c
 ) -> 
	gboﬁ
 {

5365 
	g°d
::
°rög
 
ch¨s
 = " \t\n\r";

5366  
	gch¨s
.
föd
–
c
 ) !
°d
::
°rög
::
≈os
;

5368 
ölöe
áutÿ
isBªakabÀBef‹e
–
c
 ) -> 
	gboﬁ
 {

5369 
	g°d
::
°rög
 
ch¨s
 = "[({<|";

5370  
	gch¨s
.
föd
–
c
 ) !
°d
::
°rög
::
≈os
;

5372 
ölöe
áutÿ
isBªakabÀA·î
–
c
 ) -> 
	gboﬁ
 {

5373 
	g°d
::
°rög
 
ch¨s
 = "])}>.,:;*+-=&/\\";

5374  
	gch¨s
.
föd
–
c
 ) !
°d
::
°rög
::
≈os
;

5377 
˛ass
 
	gCﬁumns
;

5379 ˛as†
	cCﬁumn
 {

5380 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
m_°rögs
;

5381 
size_t
 
	gm_width
 = 
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
;

5382 
size_t
 
	gm_ödít
 = 0;

5383 
size_t
 
	gm_öôülIndít
 = 
°d
::
°rög
::
≈os
;

5385 
	gpublic
:

5386 ˛as†
	côî©‹
 {

5387 
‰õnd
 
Cﬁumn
;

5389 
Cﬁumn
 c⁄°& 
	gm_cﬁumn
;

5390 
size_t
 
	gm_°rögIndex
 = 0;

5391 
size_t
 
	gm_pos
 = 0;

5393 
size_t
 
	gm_Àn
 = 0;

5394 
size_t
 
	gm_íd
 = 0;

5395 
boﬁ
 
	gm_suffix
 = 
Ál£
;

5397 
ôî©‹
–
Cﬁumn
 c⁄°& 
cﬁumn
, 
size_t
 
°rögIndex
 )

5398 : 
m_cﬁumn
–
cﬁumn
 ),

5399 
m_°rögIndex
–
°rögIndex
 )

5402 autÿ
löe
(Ëc⁄° -> 
	g°d
::
°rög
 c⁄°& {  
m_cﬁumn
.
m_°rögs
[
m_°rögIndex
]; }

5404 autÿ
isBound¨y
–
size_t
 
©
 ) c⁄° -> 
	gboﬁ
 {

5405 
as£π
–
©
 > 0 );

5406 
as£π
–
©
 <
löe
().
size
() );

5408  
	g©
 =
löe
().
size
() ||

5409 –
isWhôe•a˚
–
löe
()[
©
] ) && !isWhitespace(Üine()[at-1] ) ) ||

5410 
isBªakabÀBef‹e
–
löe
()[
©
] ) ||

5411 
isBªakabÀA·î
–
löe
()[
©
-1] );

5414 
ˇlcLígth
() {

5415 
as£π
–
m_°rögIndex
 < 
m_cﬁumn
.
m_°rögs
.
size
() );

5417 
	gm_suffix
 = 
Ál£
;

5418 autÿ
	gwidth
 = 
m_cﬁumn
.
m_width
-
ödít
();

5419 
	gm_íd
 = 
m_pos
;

5420  
	gm_íd
 < 
löe
().
size
(Ë&&Üöe()[
m_íd
] != '\n' )

5421 ++
m_íd
;

5423 if–
	gm_íd
 < 
	gm_pos
 + 
	gwidth
 ) {

5424 
	gm_Àn
 = 
m_íd
 - 
m_pos
;

5427 
size_t
 
	gÀn
 = 
width
;

5428 
	gÀn
 > 0 && !
isBound¨y
(
m_pos
 + 
Àn
))

5429 --
	gÀn
;

5430 
	gÀn
 > 0 && 
isWhôe•a˚
–
löe
()[
m_pos
 + 
Àn
 - 1] ))

5431 --
	gÀn
;

5433 i‡(
	gÀn
 > 0) {

5434 
	gm_Àn
 = 
Àn
;

5436 
	gm_suffix
 = 
åue
;

5437 
	gm_Àn
 = 
width
 - 1;

5442 autÿ
ödít
(Ëc⁄° -> 
	gsize_t
 {

5443 autÿ
	göôül
 = 
m_pos
 =0 && 
m_°rögIndex
 =0 ? 
m_cﬁumn
.
m_öôülIndít
 : 
°d
::
°rög
::
≈os
;

5444  
	göôül
 =
°d
::
°rög
::
≈os
 ? 
m_cﬁumn
.
m_ödít
 : 
öôül
;

5447 autÿ
addIndítAndSuffix
(
°d
::
°rög
 c⁄° &
∂aö
) const -> std::string {

5448  
°d
::
°rög
–
ödít
(), ' ' ) + (
	gm_suffix
 ? 
	g∂aö
 + "-" : 
∂aö
);

5451 
	gpublic
:

5452 
ex∂icô
 
ôî©‹
–
Cﬁumn
 c⁄°& 
cﬁumn
 ) : 
m_cﬁumn
( column ) {

5453 
as£π
–
m_cﬁumn
.
m_width
 > m_cﬁumn.
m_ödít
 );

5454 
as£π
–
m_cﬁumn
.
m_öôülIndít
 =
°d
::
°rög
::
≈os
 || m_cﬁumn.
m_width
 > m_column.m_initialIndent );

5455 
ˇlcLígth
();

5456 if–
	gm_Àn
 == 0 )

5457 
m_°rögIndex
++;

5460 autÿ
	g›î©‹
 *(Ëc⁄° -> 
	g°d
::
°rög
 {

5461 
as£π
–
m_°rögIndex
 < 
m_cﬁumn
.
m_°rögs
.
size
() );

5462 
as£π
–
m_pos
 <
m_íd
 );

5463 if–
	gm_pos
 + 
	gm_cﬁumn
.
	gm_width
 < 
	gm_íd
 )

5464  
addIndítAndSuffix
(
löe
().
sub°r
(
m_pos
, 
m_Àn
));

5466  
addIndítAndSuffix
(
löe
().
sub°r
(
m_pos
, 
m_íd
 - m_pos));

5469 autÿ
	g›î©‹
 ++(Ë-> 
	gôî©‹
& {

5470 
	gm_pos
 +
m_Àn
;

5471 if–
	gm_pos
 < 
löe
().
size
(Ë&&Üöe()[
m_pos
] == '\n' )

5472 
m_pos
 += 1;

5474  
	gm_pos
 < 
löe
().
size
(Ë&& 
isWhôe•a˚
–löe()[
m_pos
] ) )

5475 ++
	gm_pos
;

5477 if–
	gm_pos
 =
löe
().
size
() ) {

5478 
m_pos
 = 0;

5479 ++
	gm_°rögIndex
;

5481 if–
	gm_°rögIndex
 < 
	gm_cﬁumn
.
	gm_°rögs
.
size
() )

5482 
ˇlcLígth
();

5483  *
	gthis
;

5485 autÿ
	g›î©‹
 ++(Ë-> 
	gôî©‹
 {

5486 
ôî©‹
 
¥ev
–*
this
 );

5487 
	g›î©‹
++();

5488  
	g¥ev
;

5491 autÿ
	g›î©‹
 ==–
ôî©‹
 c⁄°& 
Ÿhî
 ) c⁄° -> 
boﬁ
 {

5493 
m_pos
 =
Ÿhî
.m_pos &&

5494 
m_°rögIndex
 =
Ÿhî
.m_stringIndex &&

5495 &
m_cﬁumn
 =&
Ÿhî
.m_column;

5497 autÿ
	g›î©‹
 !=–
ôî©‹
 c⁄°& 
Ÿhî
 ) c⁄° -> 
boﬁ
 {

5498  !
›î©‹
==–
Ÿhî
 );

5501 
usög
 
	gc⁄°_ôî©‹
 = 
ôî©‹
;

5503 
ex∂icô
 
Cﬁumn
–
°d
::
°rög
 c⁄°& 
ãxt
 ) { 
m_°rögs
.
push_back
(Åext ); }

5505 autÿ
width
–
size_t
 
√wWidth
 ) -> 
	gCﬁumn
& {

5506 
as£π
–
√wWidth
 > 0 );

5507 
	gm_width
 = 
√wWidth
;

5508  *
	gthis
;

5510 autÿ
ödít
–
size_t
 
√wIndít
 ) -> 
	gCﬁumn
& {

5511 
	gm_ödít
 = 
√wIndít
;

5512  *
	gthis
;

5514 autÿ
öôülIndít
–
size_t
 
√wIndít
 ) -> 
	gCﬁumn
& {

5515 
	gm_öôülIndít
 = 
√wIndít
;

5516  *
	gthis
;

5519 autÿ
width
(Ëc⁄° -> 
	gsize_t
 {  
	gm_width
; }

5520 autÿ
begö
(Ëc⁄° -> 
	gôî©‹
 {  
ôî©‹
–*
this
 ); }

5521 autÿ
íd
(Ëc⁄° -> 
	gôî©‹
 {  { *
	gthis
, 
	gm_°rögs
.
size
() }; }

5523 
ölöe
 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Cﬁumn
 c⁄°& 
	gcﬁ
 ) {

5524 
boﬁ
 
	gfú°
 = 
åue
;

5525 áutÿ
	glöe
 : 
cﬁ
 ) {

5526 if–
fú°
 )

5527 
fú°
 = 
Ál£
;

5529 
	gos
 << "\n";

5530 
	gos
 << 
	glöe
;

5532  
	gos
;

5535 autÿ
	g›î©‹
 + ( 
Cﬁumn
 c⁄°& 
	gŸhî
 ) -> 
	gCﬁumns
;

5537 autÿ
toSåög
(Ëc⁄° -> 
	g°d
::
°rög
 {

5538 
°d
::
o°rög°ªam
 
oss
;

5539 
	goss
 << *
	gthis
;

5540  
	goss
.
°r
();

5544 ˛as†
	cS∑˚r
 : 
public
 
Cﬁumn
 {

5546 
public
:

5547 
ex∂icô
 
S∑˚r
–
size_t
 
•a˚Width
 ) : 
Cﬁumn
( "" ) {

5548 
width
–
•a˚Width
 );

5552 ˛as†
	cCﬁumns
 {

5553 
	g°d
::
ve˘‹
<
Cﬁumn
> 
m_cﬁumns
;

5555 
	gpublic
:

5557 ˛as†
	côî©‹
 {

5558 
‰õnd
 
Cﬁumns
;

5559 
	sEndTag
 {};

5561 
	g°d
::
ve˘‹
<
Cﬁumn
> c⁄°& 
m_cﬁumns
;

5562 
	g°d
::
ve˘‹
<
Cﬁumn
::
ôî©‹
> 
m_ôî©‹s
;

5563 
size_t
 
	gm_a˘iveIãøt‹s
;

5565 
ôî©‹
–
Cﬁumns
 c⁄°& 
cﬁumns
, 
EndTag
 )

5566 : 
m_cﬁumns
–
cﬁumns
.m_columns ),

5567 
m_a˘iveIãøt‹s
( 0 )

5569 
	gm_ôî©‹s
.
ª£rve
–
m_cﬁumns
.
size
() );

5571 áutÿc⁄°& 
	gcﬁ
 : 
m_cﬁumns
 )

5572 
m_ôî©‹s
.
push_back
–
cﬁ
.
íd
() );

5575 
	gpublic
:

5576 
ex∂icô
 
ôî©‹
–
Cﬁumns
 c⁄°& 
cﬁumns
 )

5577 : 
m_cﬁumns
–
cﬁumns
.m_columns ),

5578 
m_a˘iveIãøt‹s
–
m_cﬁumns
.
size
() )

5580 
	gm_ôî©‹s
.
ª£rve
–
m_cﬁumns
.
size
() );

5582 áutÿc⁄°& 
	gcﬁ
 : 
m_cﬁumns
 )

5583 
m_ôî©‹s
.
push_back
–
cﬁ
.
begö
() );

5586 autÿ
	g›î©‹
 ==–
ôî©‹
 c⁄°& 
Ÿhî
 ) c⁄° -> 
boﬁ
 {

5587  
m_ôî©‹s
 =
Ÿhî
.m_iterators;

5589 autÿ
	g›î©‹
 !=–
ôî©‹
 c⁄°& 
Ÿhî
 ) c⁄° -> 
boﬁ
 {

5590  
m_ôî©‹s
 !
Ÿhî
.m_iterators;

5592 autÿ
	g›î©‹
 *(Ëc⁄° -> 
	g°d
::
°rög
 {

5593 
°d
::
°rög
 
row
, 
	g∑ddög
;

5595  
size_t
 
	gi
 = 0; i < 
	gm_cﬁumns
.
size
(); ++i ) {

5596 autÿ
	gwidth
 = 
m_cﬁumns
[
i
].
width
();

5597 if–
	gm_ôî©‹s
[
i
] !
m_cﬁumns
[i].
íd
() ) {

5598 
°d
::
°rög
 
cﬁ
 = *
m_ôî©‹s
[
i
];

5599 
	grow
 +
∑ddög
 + 
cﬁ
;

5600 if–
	gcﬁ
.
size
(Ë< 
	gwidth
 )

5601 
	g∑ddög
 = 
°d
::
°rög
–
width
 - 
cﬁ
.
size
(), ' ' );

5603 
	g∑ddög
 = "";

5606 
	g∑ddög
 +
°d
::
°rög
–
width
, ' ' );

5609  
	grow
;

5611 autÿ
	g›î©‹
 ++(Ë-> 
	gôî©‹
& {

5612  
size_t
 
	gi
 = 0; i < 
	gm_cﬁumns
.
size
(); ++i ) {

5613 i‡(
	gm_ôî©‹s
[
i
] !
m_cﬁumns
[i].
íd
())

5614 ++
m_ôî©‹s
[
i
];

5616  *
	gthis
;

5618 autÿ
	g›î©‹
 ++(Ë-> 
	gôî©‹
 {

5619 
ôî©‹
 
¥ev
–*
this
 );

5620 
	g›î©‹
++();

5621  
	g¥ev
;

5624 
usög
 
	gc⁄°_ôî©‹
 = 
ôî©‹
;

5626 autÿ
begö
(Ëc⁄° -> 
	gôî©‹
 {  
ôî©‹
–*
this
 ); }

5627 autÿ
íd
(Ëc⁄° -> 
	gôî©‹
 {  { *
	gthis
, iãøt‹::
EndTag
() }; }

5629 autÿ
	g›î©‹
 +–
Cﬁumn
 c⁄°& 
cﬁ
 ) -> 
Cﬁumns
& {

5630 
m_cﬁumns
.
push_back
–
cﬁ
 );

5631  *
	gthis
;

5633 autÿ
	g›î©‹
 + ( 
Cﬁumn
 c⁄°& 
	gcﬁ
 ) -> 
	gCﬁumns
 {

5634 
Cﬁumns
 
	gcomböed
 = *
this
;

5635 
	gcomböed
 +
cﬁ
;

5636  
	gcomböed
;

5639 
ölöe
 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Cﬁumns
 c⁄°& 
	gcﬁs
 ) {

5641 
boﬁ
 
	gfú°
 = 
åue
;

5642 áutÿ
	glöe
 : 
cﬁs
 ) {

5643 if–
fú°
 )

5644 
fú°
 = 
Ál£
;

5646 
	gos
 << "\n";

5647 
	gos
 << 
	glöe
;

5649  
	gos
;

5652 autÿ
toSåög
(Ëc⁄° -> 
	g°d
::
°rög
 {

5653 
°d
::
o°rög°ªam
 
oss
;

5654 
	goss
 << *
	gthis
;

5655  
	goss
.
°r
();

5659 
ölöe
áutÿ
	gCﬁumn
::
›î©‹
 + ( 
Cﬁumn
 c⁄°& 
Ÿhî
 ) -> 
Cﬁumns
 {

5660 
Cﬁumns
 
cﬁs
;

5661 
	gcﬁs
 +*
this
;

5662 
	gcﬁs
 +
Ÿhî
;

5663  
	gcﬁs
;

5670 
	~<mem‹y
>

5671 
	~<£t
>

5672 
	~<Æg‹ôhm
>

5674 #i‡!
deföed
(
CATCH_PLATFORM_WINDOWS
Ë&& ( deföed(
WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
_WIN32
Ë|| deföed(
_MSC_VER
) )

5675 
	#CATCH_PLATFORM_WINDOWS


	)

5678 
«me•a˚
 
	gC©ch
 {Çame•a˚ 
	g˛¨a
 {

5679 
«me•a˚
 
	gdëaû
 {

5682 
	gãm∂©e
<
ty≥«me
 
	gL
>

5683 
	gU«ryLambdaTøôs
 : 
U«ryLambdaTøôs
<
de˛ty≥
–&
L
::
›î©‹
() )> {};

5685 
	gãm∂©e
<
ty≥«me
 
	gCœssT
,Åy≥«mê
	gRëu∫T
, 
	gty≥«me
... 
	gArgs
>

5686 
	gU«ryLambdaTøôs
<
Rëu∫T
–
CœssT
::* )–
Args
... ) const> {

5687 c⁄° 
boﬁ
 
isVÆid
 = 
Ál£
;

5690 
	gãm∂©e
<
ty≥«me
 
	gCœssT
,Åy≥«mê
	gRëu∫T
,Åy≥«mê
	gArgT
>

5691 
	gU«ryLambdaTøôs
<
Rëu∫T
–
CœssT
::* )–
ArgT
 ) const> {

5692 c⁄° 
boﬁ
 
isVÆid
 = 
åue
;

5693 
usög
 
	gArgTy≥
 = 
ty≥«me
 
°d
::
ªmove_c⁄°
<ty≥«mê°d::
ªmove_ª„ªn˚
<
ArgT
>::
ty≥
>::type;

5694 
usög
 
	gRëu∫Ty≥
 = 
Rëu∫T
;

5697 
˛ass
 
	gTokíSåóm
;

5700 ˛as†
	cArgs
 {

5701 
‰õnd
 
	gTokíSåóm
;

5702 
	g°d
::
°rög
 
m_exeName
;

5703 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
m_¨gs
;

5705 
	gpublic
:

5706 
Args
–
¨gc
, c⁄°* c⁄°* 
¨gv
 )

5707 : 
m_exeName
(
¨gv
[0]),

5708 
m_¨gs
(
¨gv
 + 1,árgv + 
¨gc
) {}

5710 
Args
–
°d
::
öôülizî_li°
<°d::
°rög
> 
¨gs
 )

5711 : 
m_exeName
–*
¨gs
.
begö
() ),

5712 
m_¨gs
–
¨gs
.
begö
()+1,árgs.
íd
() )

5715 autÿ
exeName
(Ëc⁄° -> 
	g°d
::
°rög
 {

5716  
m_exeName
;

5722 ˛as†
	cTokíTy≥
 {

5723 
	gO±i⁄
, 
	gArgumít


5725 
	sTokí
 {

5726 
TokíTy≥
 
	gty≥
;

5727 
	g°d
::
°rög
 
tokí
;

5730 
ölöe
áutÿ
isO±Pªfix
–
c
 ) -> 
	gboﬁ
 {

5731  
	gc
 == '-'

5732 #ifde‡
CATCH_PLATFORM_WINDOWS


5733 || 
c
 == '/'

5739 ˛as†
	cTokíSåóm
 {

5740 
usög
 
	gIãøt‹
 = 
°d
::
ve˘‹
<°d::
°rög
>::
c⁄°_ôî©‹
;

5741 
Iãøt‹
 
	gô
;

5742 
Iãøt‹
 
	gôEnd
;

5743 
	g°d
::
ve˘‹
<
Tokí
> 
m_tokíBuf„r
;

5745 
lﬂdBuf„r
() {

5746 
	gm_tokíBuf„r
.
ªsize
( 0 );

5749  
	gô
 !
ôEnd
 && 
ô
->
em±y
() )

5750 ++
ô
;

5752 if–
	gô
 !
ôEnd
 ) {

5753 autÿc⁄° &
√xt
 = *
ô
;

5754 if–
isO±Pªfix
–
√xt
[0] ) ) {

5755 autÿ
	gdñimôîPos
 = 
√xt
.
föd_fú°_of
( " :=" );

5756 if–
	gdñimôîPos
 !
°d
::
°rög
::
≈os
 ) {

5757 
m_tokíBuf„r
.
push_back
–{ 
TokíTy≥
::
O±i⁄
, 
√xt
.
sub°r
–0, 
dñimôîPos
 ) } );

5758 
	gm_tokíBuf„r
.
push_back
–{ 
TokíTy≥
::
Argumít
, 
√xt
.
sub°r
–
dñimôîPos
 + 1 ) } );

5760 if–
	g√xt
[1] !'-' && 
√xt
.
size
() > 2 ) {

5761 
°d
::
°rög
 
›t
 = "- ";

5762  
size_t
 
	gi
 = 1; i < 
	g√xt
.
size
(); ++i ) {

5763 
	g›t
[1] = 
√xt
[
i
];

5764 
	gm_tokíBuf„r
.
push_back
–{ 
TokíTy≥
::
O±i⁄
, 
›t
 } );

5767 
	gm_tokíBuf„r
.
push_back
–{ 
TokíTy≥
::
O±i⁄
, 
√xt
 } );

5771 
	gm_tokíBuf„r
.
push_back
–{ 
TokíTy≥
::
Argumít
, 
√xt
 } );

5776 
	gpublic
:

5777 
ex∂icô
 
TokíSåóm
–
Args
 c⁄° &
¨gs
 ) : TokíSåóm–¨gs.
m_¨gs
.
begö
(),árgs.m_¨gs.
íd
() ) {}

5779 
TokíSåóm
–
Iãøt‹
 
ô
, Iãøt‹ 
ôEnd
 ) : it( it ), itEnd( itEnd ) {

5780 
lﬂdBuf„r
();

5783 
ex∂icô
 
›î©‹
 
boﬁ
() const {

5784  !
	gm_tokíBuf„r
.
em±y
(Ë|| 
	gô
 !
ôEnd
;

5787 autÿ
cou¡
(Ëc⁄° -> 
	gsize_t
 {  
	gm_tokíBuf„r
.
size
(Ë+ (
	gôEnd
 - 
	gô
); }

5789 autÿ
	g›î©‹
*(Ëc⁄° -> 
	gTokí
 {

5790 
as£π
–!
m_tokíBuf„r
.
em±y
() );

5791  
	gm_tokíBuf„r
.
‰⁄t
();

5794 autÿ
	g›î©‹
->(Ëc⁄° -> 
Tokí
 const * {

5795 
as£π
–!
m_tokíBuf„r
.
em±y
() );

5796  &
	gm_tokíBuf„r
.
‰⁄t
();

5799 autÿ
	g›î©‹
++(Ë-> 
	gTokíSåóm
 & {

5800 if–
	gm_tokíBuf„r
.
size
() >= 2 ) {

5801 
m_tokíBuf„r
.
îa£
–m_tokíBuf„r.
begö
() );

5803 if–
	gô
 !
ôEnd
 )

5804 ++
ô
;

5805 
lﬂdBuf„r
();

5807  *
	gthis
;

5811 ˛as†
	cResu…Ba£
 {

5812 
	gpublic
:

5813 
	eTy≥
 {

5814 
Ok
, 
	gLogicEº‹
, 
	gRu¡imeEº‹


5817 
	g¥Ÿe˘ed
:

5818 
Resu…Ba£
–
Ty≥
 
ty≥
 ) : 
m_ty≥
(Åype ) {}

5819 
vútuÆ
 ~
Resu…Ba£
() = ;

5821 
vútuÆ
 
íf‹˚Ok
() const = 0;

5823 
Ty≥
 
	gm_ty≥
;

5826 
	gãm∂©e
<
ty≥«me
 
	gT
>

5827 ˛as†
	cResu…VÆueBa£
 : 
public
 
Resu…Ba£
 {

5828 
public
:

5829 autÿ
vÆue
(Ëc⁄° -> 
T
 const & {

5830 
íf‹˚Ok
();

5831  
	gm_vÆue
;

5834 
	g¥Ÿe˘ed
:

5835 
Resu…VÆueBa£
–
Ty≥
 
ty≥
 ) : 
Resu…Ba£
(Åype ) {}

5837 
Resu…VÆueBa£
–Resu…VÆueBa£ c⁄° &
Ÿhî
 ) : 
Resu…Ba£
( other ) {

5838 if–
m_ty≥
 =
Resu…Ba£
::
Ok
 )

5839 
√w
–&
m_vÆue
 ) 
T
–
Ÿhî
.m_value );

5842 
Resu…VÆueBa£
–
Ty≥
, 
T
 c⁄° &
vÆue
 ) : 
Resu…Ba£
–
Ok
 ) {

5843 
√w
–&
m_vÆue
 ) 
T
–
vÆue
 );

5846 autÿ
	g›î©‹
=–
Resu…VÆueBa£
 c⁄° &
Ÿhî
 ) -> ResultValueBase & {

5847 if–
m_ty≥
 =
Resu…Ba£
::
Ok
 )

5848 
m_vÆue
.~
T
();

5849 
	gResu…Ba£
::
›î©‹
=(
Ÿhî
);

5850 if–
	gm_ty≥
 =
Resu…Ba£
::
Ok
 )

5851 
√w
–&
m_vÆue
 ) 
T
–
Ÿhî
.m_value );

5852  *
	gthis
;

5855 ~
Resu…VÆueBa£
(Ë
	govîride
 {

5856 if–
	gm_ty≥
 =
Ok
 )

5857 
m_vÆue
.~
T
();

5861 
T
 
	gm_vÆue
;

5865 
	gãm∂©e
<>

5866 
˛ass
 
	gResu…VÆueBa£
<> : 
public
 
Resu…Ba£
 {

5867 
¥Ÿe˘ed
:

5868 
usög
 
Resu…Ba£
::ResultBase;

5871 
	gãm∂©e
<
ty≥«me
 
	gT
 = >

5872 
˛ass
 
BasicResu…
 : 
public
 
Resu…VÆueBa£
<
T
> {

5873 
public
:

5874 
ãm∂©e
<
ty≥«me
 
U
>

5875 
ex∂icô
 
BasicResu…
–BasicResu…<
U
> c⁄° &
Ÿhî
 )

5876 : 
Resu…VÆueBa£
<
T
>–
Ÿhî
.
ty≥
() ),

5877 
m_îr‹Mesßge
–
Ÿhî
.
îr‹Mesßge
() )

5879 
as£π
–
ty≥
(Ë!
Resu…Ba£
::
Ok
 );

5882 
	gãm∂©e
<
ty≥«me
 
	gU
>

5883 autÿ
ok
–
U
 c⁄° &
vÆue
 ) -> 
	gBasicResu…
 {  { 
	gResu…Ba£
::
Ok
, 
	gvÆue
 }; }

5884 autÿ
ok
(Ë-> 
	gBasicResu…
 {  { 
	gResu…Ba£
::
Ok
 }; }

5885 autÿ
logicEº‹
–
°d
::
°rög
 c⁄° &
mesßge
 ) -> 
BasicResu…
 {  { 
Resu…Ba£
::
LogicEº‹
, 
	gmesßge
 }; }

5886 autÿ
ru¡imeEº‹
–
°d
::
°rög
 c⁄° &
mesßge
 ) -> 
BasicResu…
 {  { 
Resu…Ba£
::
Ru¡imeEº‹
, 
	gmesßge
 }; }

5888 
ex∂icô
 
›î©‹
 
boﬁ
(Ëc⁄° {  
	gm_ty≥
 =
Resu…Ba£
::
Ok
; }

5889 autÿ
ty≥
(Ëc⁄° -> 
	gResu…Ba£
::
Ty≥
 {  
m_ty≥
; }

5890 autÿ
îr‹Mesßge
(Ëc⁄° -> 
	g°d
::
°rög
 {  
m_îr‹Mesßge
; }

5892 
	g¥Ÿe˘ed
:

5893 
íf‹˚Ok
(Ëc⁄° 
ovîride
 {

5897 
as£π
–
m_ty≥
 !
Resu…Ba£
::
LogicEº‹
 );

5898 
as£π
–
m_ty≥
 !
Resu…Ba£
::
Ru¡imeEº‹
 );

5899 if–
	gm_ty≥
 !
Resu…Ba£
::
Ok
 )

5900 
°d
::
ab‹t
();

5903 
	g°d
::
°rög
 
m_îr‹Mesßge
;

5905 
BasicResu…
–
Resu…Ba£
::
Ty≥
 
ty≥
, 
°d
::
°rög
 c⁄° &
mesßge
 )

5906 : 
Resu…VÆueBa£
<
T
>(
ty≥
),

5907 
m_îr‹Mesßge
(
mesßge
)

5909 
as£π
–
m_ty≥
 !
Resu…Ba£
::
Ok
 );

5912 
usög
 
	gResu…VÆueBa£
<
	gT
>::
Resu…VÆueBa£
;

5913 
usög
 
	gResu…Ba£
::
m_ty≥
;

5916 ˛as†
	cP¨£Resu…Ty≥
 {

5917 
	gM©ched
, 
	gNoM©ch
, 
	gSh‹tCúcuôAŒ
, 
	gSh‹tCúcuôSame


5920 ˛as†
	cP¨£Sèã
 {

5921 
	gpublic
:

5923 
P¨£Sèã
–
P¨£Resu…Ty≥
 
ty≥
, 
TokíSåóm
 c⁄° &
ªmaöögTokís
 )

5924 : 
m_ty≥
(
ty≥
),

5925 
m_ªmaöögTokís
–
ªmaöögTokís
 )

5928 autÿ
ty≥
(Ëc⁄° -> 
	gP¨£Resu…Ty≥
 {  
	gm_ty≥
; }

5929 autÿ
ªmaöögTokís
(Ëc⁄° -> 
	gTokíSåóm
 {  
	gm_ªmaöögTokís
; }

5931 
	g¥iv©e
:

5932 
P¨£Resu…Ty≥
 
m_ty≥
;

5933 
TokíSåóm
 
	gm_ªmaöögTokís
;

5936 
usög
 
	gResu…
 = 
BasicResu…
<>;

5937 
usög
 
	gP¨£rResu…
 = 
BasicResu…
<
P¨£Resu…Ty≥
>;

5938 
usög
 
	gI¡î«lP¨£Resu…
 = 
BasicResu…
<
P¨£Sèã
>;

5940 
	sHñpCﬁumns
 {

5941 
	g°d
::
°rög
 
À·
;

5942 
	g°d
::
°rög
 
right
;

5945 
	gãm∂©e
<
ty≥«me
 
	gT
>

5946 
ölöe
áutÿ
c⁄vîtI¡o
–
°d
::
°rög
 c⁄° &
sour˚
, 
T
& 
èrgë
 ) -> 
	gP¨£rResu…
 {

5947 
	g°d
::
°rög°ªam
 
ss
;

5948 
	gss
 << 
	gsour˚
;

5949 
	gss
 >> 
	gèrgë
;

5950 if–
	gss
.
Áû
() )

5951  
	gP¨£rResu…
::
ru¡imeEº‹
–"U«bÀÅÿc⁄vîà'" + 
sour˚
 + "'Åo destinationÅype" );

5953  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

5955 
ölöe
áutÿ
c⁄vîtI¡o
–
°d
::
°rög
 c⁄° &
sour˚
, std::°rög& 
èrgë
 ) -> 
P¨£rResu…
 {

5956 
èrgë
 = 
sour˚
;

5957  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

5959 
ölöe
áutÿ
c⁄vîtI¡o
–
°d
::
°rög
 c⁄° &
sour˚
, 
boﬁ
 &
èrgë
 ) -> 
	gP¨£rResu…
 {

5960 
	g°d
::
°rög
 
§cLC
 = 
sour˚
;

5961 
	g°d
::
å™sf‹m
–
§cLC
.
begö
(), srcLC.
íd
(), srcLC.begö(), []–
c
 ) {  
°©ic_ˇ°
<>–::
tﬁowî
(c) ); } );

5962 i‡(
	g§cLC
 ="y" || 
§cLC
 == "1" || srcLC == "true" || srcLC == "yes" || srcLC == "on")

5963 
èrgë
 = 
åue
;

5964 i‡(
	g§cLC
 ="n" || 
§cLC
 == "0" || srcLC == "false" || srcLC == "no" || srcLC == "off")

5965 
èrgë
 = 
Ál£
;

5967  
	gP¨£rResu…
::
ru¡imeEº‹
–"Ex≥˘edá boﬁó¿vÆuêbuàdidÇŸÑecogni£: '" + 
sour˚
 + "'" );

5968  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

5970 #ifde‡
CLARA_CONFIG_OPTIONAL_TYPE


5971 
	gãm∂©e
<
ty≥«me
 
	gT
>

5972 
ölöe
áutÿ
c⁄vîtI¡o
–
°d
::
°rög
 c⁄° &
sour˚
, 
CLARA_CONFIG_OPTIONAL_TYPE
<
T
>& 
èrgë
 ) -> 
	gP¨£rResu…
 {

5973 
T
 
	gãmp
;

5974 autÿ
	gªsu…
 = 
c⁄vîtI¡o
–
sour˚
, 
ãmp
 );

5975 if–
	gªsu…
 )

5976 
	gèrgë
 = 
°d
::
move
(
ãmp
);

5977  
	gªsu…
;

5981 
	sN⁄C›yabÀ
 {

5982 
N⁄C›yabÀ
() = ;

5983 
N⁄C›yabÀ
–N⁄C›yabÀ c⁄° & ) = 
dñëe
;

5984 
N⁄C›yabÀ
–N⁄C›yabÀ && ) = 
dñëe
;

5985 
	gN⁄C›yabÀ
 &
	g›î©‹
=–
N⁄C›yabÀ
 c⁄° & ) = 
dñëe
;

5986 
	gN⁄C›yabÀ
 &
	g›î©‹
=–
N⁄C›yabÀ
 && ) = 
dñëe
;

5989 
	gBoundRef
 : 
N⁄C›yabÀ
 {

5990 
vútuÆ
 ~
BoundRef
() = ;

5991 
vútuÆ
áutÿ
isC⁄èöî
(Ëc⁄° -> 
	gboﬁ
 {  
	gÁl£
; }

5992 
vútuÆ
áutÿ
isFœg
(Ëc⁄° -> 
	gboﬁ
 {  
	gÁl£
; }

5994 
	gBoundVÆueRefBa£
 : 
BoundRef
 {

5995 
vútuÆ
áutÿ
£tVÆue
–
°d
::
°rög
 c⁄° &
¨g
 ) -> 
P¨£rResu…
 = 0;

5997 
	gBoundFœgRefBa£
 : 
BoundRef
 {

5998 
vútuÆ
áutÿ
£tFœg
–
boﬁ
 
Êag
 ) -> 
P¨£rResu…
 = 0;

5999 
vútuÆ
áutÿ
isFœg
(Ëc⁄° -> 
	gboﬁ
 {  
	gåue
; }

6002 
	gãm∂©e
<
ty≥«me
 
	gT
>

6003 
	gBoundVÆueRef
 : 
BoundVÆueRefBa£
 {

6004 
T
 &
m_ªf
;

6006 
ex∂icô
 
BoundVÆueRef
–
T
 &
ªf
 ) : 
m_ªf
(Ñef ) {}

6008 autÿ
£tVÆue
–
°d
::
°rög
 c⁄° &
¨g
 ) -> 
P¨£rResu…
 
ovîride
 {

6009  
c⁄vîtI¡o
–
¨g
, 
m_ªf
 );

6013 
	gãm∂©e
<
ty≥«me
 
	gT
>

6014 
	gBoundVÆueRef
<
	g°d
::
ve˘‹
<
T
>> : 
BoundVÆueRefBa£
 {

6015 
°d
::
ve˘‹
<
T
> &
m_ªf
;

6017 
ex∂icô
 
BoundVÆueRef
–
°d
::
ve˘‹
<
T
> &
ªf
 ) : 
m_ªf
(Ñef ) {}

6019 autÿ
isC⁄èöî
(Ëc⁄° -> 
boﬁ
 
ovîride
 {  
åue
; }

6021 autÿ
£tVÆue
–
°d
::
°rög
 c⁄° &
¨g
 ) -> 
P¨£rResu…
 
ovîride
 {

6022 
T
 
ãmp
;

6023 autÿ
	gªsu…
 = 
c⁄vîtI¡o
–
¨g
, 
ãmp
 );

6024 if–
	gªsu…
 )

6025 
	gm_ªf
.
push_back
–
ãmp
 );

6026  
	gªsu…
;

6030 
	gBoundFœgRef
 : 
BoundFœgRefBa£
 {

6031 
boﬁ
 &
m_ªf
;

6033 
ex∂icô
 
BoundFœgRef
–
boﬁ
 &
ªf
 ) : 
m_ªf
(Ñef ) {}

6035 autÿ
£tFœg
–
boﬁ
 
Êag
 ) -> 
P¨£rResu…
 
ovîride
 {

6036 
m_ªf
 = 
Êag
;

6037  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6041 
	gãm∂©e
<
ty≥«me
 
	gRëu∫Ty≥
>

6042 
	sLambdaInvokî
 {

6043 
°©ic_as£π
–
°d
::
is_ßme
<
Rëu∫Ty≥
, 
P¨£rResu…
>::
vÆue
, "Lambda mustÑeturn void or clara::ParserResult" );

6045 
	gãm∂©e
<
ty≥«me
 
	gL
,Åy≥«mê
	gArgTy≥
>

6046 autÿ
övoke
–
L
 c⁄° &
œmbda
, 
ArgTy≥
 c⁄° &
¨g
 ) -> 
	gP¨£rResu…
 {

6047  
œmbda
–
¨g
 );

6051 
	gãm∂©e
<>

6052 
	gLambdaInvokî
<> {

6053 
	gãm∂©e
<
ty≥«me
 
	gL
,Åy≥«mê
	gArgTy≥
>

6054 autÿ
övoke
–
L
 c⁄° &
œmbda
, 
ArgTy≥
 c⁄° &
¨g
 ) -> 
	gP¨£rResu…
 {

6055 
œmbda
–
¨g
 );

6056  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6060 
	gãm∂©e
<
ty≥«me
 
	gArgTy≥
,Åy≥«mê
	gL
>

6061 
ölöe
áutÿ
övokeLambda
–
L
 c⁄° &
œmbda
, 
°d
::
°rög
 c⁄° &
¨g
 ) -> 
P¨£rResu…
 {

6062 
ArgTy≥
 
ãmp
{};

6063 autÿ
	gªsu…
 = 
c⁄vîtI¡o
–
¨g
, 
ãmp
 );

6064  !
	gªsu…


6065 ? 
	gªsu…


6066 : 
LambdaInvokî
<
ty≥«me
 
U«ryLambdaTøôs
<
L
>::
Rëu∫Ty≥
>::
övoke
–
œmbda
, 
ãmp
 );

6069 
	gãm∂©e
<
ty≥«me
 
	gL
>

6070 
	gBoundLambda
 : 
BoundVÆueRefBa£
 {

6071 
L
 
m_œmbda
;

6073 
°©ic_as£π
–
U«ryLambdaTøôs
<
L
>::
isVÆid
, "SuppliedÜambda mustÅakeÉxactly oneárgument" );

6074 
ex∂icô
 
BoundLambda
–
L
 c⁄° &
œmbda
 ) : 
m_œmbda
(Üambda ) {}

6076 autÿ
£tVÆue
–
°d
::
°rög
 c⁄° &
¨g
 ) -> 
P¨£rResu…
 
ovîride
 {

6077  
övokeLambda
<
ty≥«me
 
U«ryLambdaTøôs
<
L
>::
ArgTy≥
>–
m_œmbda
, 
	g¨g
 );

6081 
	gãm∂©e
<
ty≥«me
 
	gL
>

6082 
	gBoundFœgLambda
 : 
BoundFœgRefBa£
 {

6083 
L
 
m_œmbda
;

6085 
°©ic_as£π
–
U«ryLambdaTøôs
<
L
>::
isVÆid
, "SuppliedÜambda mustÅakeÉxactly oneárgument" );

6086 
°©ic_as£π
–
°d
::
is_ßme
<
ty≥«me
 
U«ryLambdaTøôs
<
L
>::
ArgTy≥
, 
boﬁ
>::
vÆue
, "flags must be boolean" );

6088 
ex∂icô
 
BoundFœgLambda
–
L
 c⁄° &
œmbda
 ) : 
m_œmbda
(Üambda ) {}

6090 autÿ
£tFœg
–
boﬁ
 
Êag
 ) -> 
P¨£rResu…
 
ovîride
 {

6091  
LambdaInvokî
<
ty≥«me
 
U«ryLambdaTøôs
<
L
>::
Rëu∫Ty≥
>::
övoke
–
m_œmbda
, 
Êag
 );

6095 ˛as†
	cO±i⁄Æôy
 { 
	gO±i⁄Æ
, 
	gRequúed
 };

6097 
	gP¨£r
;

6099 ˛as†
	cP¨£rBa£
 {

6100 
	gpublic
:

6101 
vútuÆ
 ~
P¨£rBa£
() = ;

6102 
vútuÆ
áutÿ
vÆid©e
(Ëc⁄° -> 
	gResu…
 {  Resu…::
ok
(); }

6103 
vútuÆ
áutÿ
∑r£
–
°d
::
°rög
 c⁄°& 
exeName
, 
TokíSåóm
 c⁄° &
tokís
Ëc⁄° -> 
	gI¡î«lP¨£Resu…
 = 0;

6104 
vútuÆ
áutÿ
ˇrdöÆôy
(Ëc⁄° -> 
	gsize_t
 {  1; }

6106 autÿ
∑r£
–
Args
 c⁄° &
¨gs
 ) c⁄° -> 
	gI¡î«lP¨£Resu…
 {

6107  
∑r£
–
¨gs
.
exeName
(), 
TokíSåóm
(árgs ) );

6111 
	gãm∂©e
<
ty≥«me
 
	gDîivedT
>

6112 ˛as†
	cCompoßbÀP¨£rIm∂
 : 
public
 
P¨£rBa£
 {

6113 
public
:

6114 
ãm∂©e
<
ty≥«me
 
T
>

6115 autÿ
›î©‹
|–
T
 c⁄° &
Ÿhî
 ) c⁄° -> 
P¨£r
;

6117 
	gãm∂©e
<
ty≥«me
 
	gT
>

6118 autÿ
	g›î©‹
+–
T
 c⁄° &
	gŸhî
 ) c⁄° -> 
	gP¨£r
;

6122 
	gãm∂©e
<
ty≥«me
 
	gDîivedT
>

6123 
˛ass
 
	gP¨£rRefIm∂
 : 
public
 
CompoßbÀP¨£rIm∂
<
DîivedT
> {

6124 
¥Ÿe˘ed
:

6125 
O±i⁄Æôy
 
m_›ti⁄Æôy
 = O±i⁄Æôy::
O±i⁄Æ
;

6126 
	g°d
::
sh¨ed_±r
<
BoundRef
> 
m_ªf
;

6127 
	g°d
::
°rög
 
m_höt
;

6128 
	g°d
::
°rög
 
m_des¸ùti⁄
;

6130 
ex∂icô
 
P¨£rRefIm∂
–
°d
::
sh¨ed_±r
<
BoundRef
> c⁄° &
ªf
 ) : 
m_ªf
(Ñef ) {}

6132 
public
:

6133 
ãm∂©e
<
ty≥«me
 
T
>

6134 
P¨£rRefIm∂
–
T
 &
ªf
, 
°d
::
°rög
 c⁄° &
höt
 )

6135 : 
m_ªf
–
°d
::
make_sh¨ed
<
BoundVÆueRef
<
T
>>–
ªf
 ) ),

6136 
m_höt
–
höt
 )

6139 
	gãm∂©e
<
ty≥«me
 
	gLambdaT
>

6140 
P¨£rRefIm∂
–
LambdaT
 c⁄° &
ªf
, 
°d
::
°rög
 c⁄° &
höt
 )

6141 : 
m_ªf
–
°d
::
make_sh¨ed
<
BoundLambda
<
LambdaT
>>–
ªf
 ) ),

6142 
m_höt
(
höt
)

6145 autÿ
›î©‹
()–
	g°d
::
°rög
 c⁄° &
des¸ùti⁄
 ) -> 
DîivedT
 & {

6146 
m_des¸ùti⁄
 = 
des¸ùti⁄
;

6147  
	g°©ic_ˇ°
<
	gDîivedT
 &>–*
	gthis
 );

6150 autÿ
›ti⁄Æ
(Ë-> 
	gDîivedT
 & {

6151 
	gm_›ti⁄Æôy
 = 
O±i⁄Æôy
::
O±i⁄Æ
;

6152  
	g°©ic_ˇ°
<
	gDîivedT
 &>–*
	gthis
 );

6155 autÿ
ªquúed
(Ë-> 
	gDîivedT
 & {

6156 
	gm_›ti⁄Æôy
 = 
O±i⁄Æôy
::
Requúed
;

6157  
	g°©ic_ˇ°
<
	gDîivedT
 &>–*
	gthis
 );

6160 autÿ
isO±i⁄Æ
(Ëc⁄° -> 
	gboﬁ
 {

6161  
	gm_›ti⁄Æôy
 =
O±i⁄Æôy
::
O±i⁄Æ
;

6164 autÿ
ˇrdöÆôy
(Ëc⁄° -> 
size_t
 
	govîride
 {

6165 if–
	gm_ªf
->
isC⁄èöî
() )

6171 autÿ
höt
(Ëc⁄° -> 
	g°d
::
°rög
 {  
m_höt
; }

6174 
˛ass
 
	gExeName
 : 
public
 
CompoßbÀP¨£rIm∂
<
ExeName
> {

6175 
°d
::
sh¨ed_±r
<°d::
°rög
> 
m_«me
;

6176 
	g°d
::
sh¨ed_±r
<
BoundVÆueRefBa£
> 
m_ªf
;

6178 
	gãm∂©e
<
ty≥«me
 
	gLambdaT
>

6179 autÿ
makeRef
(
LambdaT
 c⁄° &
œmbda
Ë-> 
	g°d
::
sh¨ed_±r
<
BoundVÆueRefBa£
> {

6180  
°d
::
make_sh¨ed
<
BoundLambda
<
LambdaT
>>–
œmbda
) ;

6183 
	gpublic
:

6184 
ExeName
(Ë: 
m_«me
–
°d
::
make_sh¨ed
<°d::
°rög
>( "<executable>" ) ) {}

6186 
ex∂icô
 
ExeName
–
°d
::
°rög
 &
ªf
 ) : ExeName() {

6187 
m_ªf
 = 
°d
::
make_sh¨ed
<
BoundVÆueRef
<°d::
°rög
>>–
ªf
 );

6190 
	gãm∂©e
<
ty≥«me
 
	gLambdaT
>

6191 
ex∂icô
 
ExeName
–
LambdaT
 c⁄°& 
œmbda
 ) : ExeName() {

6192 
m_ªf
 = 
°d
::
make_sh¨ed
<
BoundLambda
<
LambdaT
>>–
œmbda
 );

6196 autÿ
∑r£
–
°d
::
°rög
 c⁄°&, 
TokíSåóm
 c⁄° &
tokís
 ) c⁄° -> 
I¡î«lP¨£Resu…
 
	govîride
 {

6197  
	gI¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
P¨£Resu…Ty≥
::
NoM©ch
, 
tokís
 ) );

6200 autÿ
«me
(Ëc⁄° -> 
	g°d
::
°rög
 {  *
m_«me
; }

6201 autÿ
£t
–
°d
::
°rög
 c⁄°& 
√wName
 ) -> 
P¨£rResu…
 {

6203 autÿ
œ°Sœsh
 = 
√wName
.
föd_œ°_of
( "\\/" );

6204 autÿ
	gfûíame
 = ( 
œ°Sœsh
 =
°d
::
°rög
::
≈os
 )

6205 ? 
√wName


6206 : 
√wName
.
sub°r
–
œ°Sœsh
+1 );

6208 *
	gm_«me
 = 
fûíame
;

6209 if–
	gm_ªf
 )

6210  
	gm_ªf
->
£tVÆue
–
fûíame
 );

6212  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6216 
˛ass
 
	gArg
 : 
public
 
P¨£rRefIm∂
<
Arg
> {

6217 
public
:

6218 
usög
 
P¨£rRefIm∂
::ParserRefImpl;

6220 autÿ
∑r£
–
°d
::
°rög
 c⁄° &, 
TokíSåóm
 c⁄° &
tokís
 ) c⁄° -> 
I¡î«lP¨£Resu…
 
	govîride
 {

6221 autÿ
	gvÆid©i⁄Resu…
 = 
vÆid©e
();

6222 if–!
	gvÆid©i⁄Resu…
 )

6223  
I¡î«lP¨£Resu…
–
vÆid©i⁄Resu…
 );

6225 autÿ
	gªmaöögTokís
 = 
tokís
;

6226 autÿc⁄° &
	gtokí
 = *
ªmaöögTokís
;

6227 if–
	gtokí
.
	gty≥
 !
TokíTy≥
::
Argumít
 )

6228  
I¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
P¨£Resu…Ty≥
::
NoM©ch
, 
ªmaöögTokís
 ) );

6230 
as£π
–!
m_ªf
->
isFœg
() );

6231 autÿ
	gvÆueRef
 = 
°©ic_ˇ°
<
dëaû
::
BoundVÆueRefBa£
*>–
m_ªf
.
gë
() );

6233 autÿ
	gªsu…
 = 
vÆueRef
->
£tVÆue
–
ªmaöögTokís
->
tokí
 );

6234 if–!
	gªsu…
 )

6235  
I¡î«lP¨£Resu…
–
ªsu…
 );

6237  
	gI¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
P¨£Resu…Ty≥
::
M©ched
, ++
ªmaöögTokís
 ) );

6241 
ölöe
áutÿ
n‹mÆi£O±
–
°d
::
°rög
 c⁄° &
›tName
 ) -> std::string {

6242 #ifde‡
CATCH_PLATFORM_WINDOWS


6243 if–
›tName
[0] == '/' )

6244  "-" + 
›tName
.
sub°r
( 1 );

6247  
	g›tName
;

6250 
˛ass
 
	gO±
 : 
public
 
P¨£rRefIm∂
<
O±
> {

6251 
¥Ÿe˘ed
:

6252 
°d
::
ve˘‹
<°d::
°rög
> 
m_›tNames
;

6254 
	gpublic
:

6255 
ãm∂©e
<
ty≥«me
 
LambdaT
>

6256 
ex∂icô
 
O±
–
LambdaT
 c⁄° &
ªf
 ) : 
P¨£rRefIm∂
–
°d
::
make_sh¨ed
<
BoundFœgLambda
<LambdaT>>(Ñef ) ) {}

6258 
ex∂icô
 
O±
–
boﬁ
 &
ªf
 ) : 
P¨£rRefIm∂
–
°d
::
make_sh¨ed
<
BoundFœgRef
>(Ñef ) ) {}

6260 
ãm∂©e
<
ty≥«me
 
LambdaT
>

6261 
O±
–
LambdaT
 c⁄° &
ªf
, 
°d
::
°rög
 c⁄° &
höt
 ) : 
P¨£rRefIm∂
(Ñef, hint ) {}

6263 
	gãm∂©e
<
ty≥«me
 
	gT
>

6264 
O±
–
T
 &
ªf
, 
°d
::
°rög
 c⁄° &
höt
 ) : 
P¨£rRefIm∂
(Ñef, hint ) {}

6266 autÿ
	g›î©‹
[]–
	g°d
::
°rög
 c⁄° &
›tName
 ) -> 
O±
 & {

6267 
m_›tNames
.
push_back
–
›tName
 );

6268  *
	gthis
;

6271 autÿ
gëHñpCﬁumns
(Ëc⁄° -> 
	g°d
::
ve˘‹
<
HñpCﬁumns
> {

6272 
°d
::
o°rög°ªam
 
oss
;

6273 
boﬁ
 
	gfú°
 = 
åue
;

6274 áutÿc⁄° &
	g›t
 : 
m_›tNames
 ) {

6275 i‡(
fú°
)

6276 
fú°
 = 
Ál£
;

6278 
	goss
 << ", ";

6279 
	goss
 << 
	g›t
;

6281 if–!
	gm_höt
.
em±y
() )

6282 
	goss
 << " <" << 
	gm_höt
 << ">";

6283  { { 
	goss
.
°r
(), 
	gm_des¸ùti⁄
 } };

6286 autÿ
isM©ch
–
°d
::
°rög
 c⁄° &
›tTokí
 ) c⁄° -> 
boﬁ
 {

6287 autÿ
n‹mÆi£dTokí
 = 
n‹mÆi£O±
–
›tTokí
 );

6288 áutÿc⁄° &
	g«me
 : 
m_›tNames
 ) {

6289 if–
n‹mÆi£O±
–
«me
 ) =
n‹mÆi£dTokí
 )

6290  
åue
;

6292  
	gÁl£
;

6295 
usög
 
	gP¨£rBa£
::
∑r£
;

6297 autÿ
∑r£
–
°d
::
°rög
 c⁄°&, 
TokíSåóm
 c⁄° &
tokís
 ) c⁄° -> 
I¡î«lP¨£Resu…
 
	govîride
 {

6298 autÿ
	gvÆid©i⁄Resu…
 = 
vÆid©e
();

6299 if–!
	gvÆid©i⁄Resu…
 )

6300  
I¡î«lP¨£Resu…
–
vÆid©i⁄Resu…
 );

6302 autÿ
	gªmaöögTokís
 = 
tokís
;

6303 if–
	gªmaöögTokís
 &&ÑemaöögTokís->
	gty≥
 =
TokíTy≥
::
O±i⁄
 ) {

6304 autÿc⁄° &
tokí
 = *
ªmaöögTokís
;

6305 if–
isM©ch
(
tokí
.token ) ) {

6306 if–
	gm_ªf
->
isFœg
() ) {

6307 autÿ
	gÊagRef
 = 
°©ic_ˇ°
<
dëaû
::
BoundFœgRefBa£
*>–
m_ªf
.
gë
() );

6308 autÿ
	gªsu…
 = 
ÊagRef
->
£tFœg
–
åue
 );

6309 if–!
	gªsu…
 )

6310  
I¡î«lP¨£Resu…
–
ªsu…
 );

6311 if–
	gªsu…
.
vÆue
(Ë=
P¨£Resu…Ty≥
::
Sh‹tCúcuôAŒ
 )

6312  
I¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
ªsu…
.
vÆue
(), 
ªmaöögTokís
 ) );

6314 autÿ
	gvÆueRef
 = 
°©ic_ˇ°
<
dëaû
::
BoundVÆueRefBa£
*>–
m_ªf
.
gë
() );

6315 ++
	gªmaöögTokís
;

6316 if–!
	gªmaöögTokís
 )

6317  
	gI¡î«lP¨£Resu…
::
ru¡imeEº‹
–"Ex≥˘edárgumíàfﬁlowög " + 
tokí
.token );

6318 autÿc⁄° &
	g¨gTokí
 = *
ªmaöögTokís
;

6319 if–
	g¨gTokí
.
	gty≥
 !
TokíTy≥
::
Argumít
 )

6320  
I¡î«lP¨£Resu…
::
ru¡imeEº‹
–"Ex≥˘edárgumíàfﬁlowög " + 
tokí
.token );

6321 autÿ
	gªsu…
 = 
vÆueRef
->
£tVÆue
–
¨gTokí
.
tokí
 );

6322 if–!
	gªsu…
 )

6323  
I¡î«lP¨£Resu…
–
ªsu…
 );

6324 if–
	gªsu…
.
vÆue
(Ë=
P¨£Resu…Ty≥
::
Sh‹tCúcuôAŒ
 )

6325  
I¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
ªsu…
.
vÆue
(), 
ªmaöögTokís
 ) );

6327  
	gI¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
P¨£Resu…Ty≥
::
M©ched
, ++
ªmaöögTokís
 ) );

6330  
	gI¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
P¨£Resu…Ty≥
::
NoM©ch
, 
ªmaöögTokís
 ) );

6333 autÿ
vÆid©e
(Ëc⁄° -> 
Resu…
 
	govîride
 {

6334 if–
	gm_›tNames
.
em±y
() )

6335  
	gResu…
::
logicEº‹
( "No options suppliedÅo Opt" );

6336 áutÿc⁄° &
	g«me
 : 
m_›tNames
 ) {

6337 if–
«me
.
em±y
() )

6338  
Resu…
::
logicEº‹
( "OptionÇame cannot beÉmpty" );

6339 #ifde‡
CATCH_PLATFORM_WINDOWS


6340 if–
	g«me
[0] !'-' && 
«me
[0] != '/' )

6341  
Resu…
::
logicEº‹
( "OptionÇame must begin with '-' or '/'" );

6343 if–
	g«me
[0] != '-' )

6344  
Resu…
::
logicEº‹
( "OptionÇame must begin with '-'" );

6347  
	gP¨£rRefIm∂
::
vÆid©e
();

6351 
	gHñp
 : 
O±
 {

6352 
Hñp
–
boﬁ
 &
showHñpFœg
 )

6353 : 
O±
([&]–
boﬁ
 
Êag
 ) {

6354 
showHñpFœg
 = 
Êag
;

6355  
P¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
Sh‹tCúcuôAŒ
 );

6358 
	g°©ic_ˇ°
<
	gO±
 &>–*
	gthis
 )

6361 .
›ti⁄Æ
();

6365 
	gP¨£r
 : 
P¨£rBa£
 {

6367 
muèbÀ
 
ExeName
 
m_exeName
;

6368 
	g°d
::
ve˘‹
<
O±
> 
m_›ti⁄s
;

6369 
	g°d
::
ve˘‹
<
Arg
> 
m_¨gs
;

6371 autÿ
	g›î©‹
|=–
ExeName
 c⁄° &
exeName
 ) -> 
P¨£r
 & {

6372 
m_exeName
 = 
exeName
;

6373  *
	gthis
;

6376 autÿ
	g›î©‹
|=–
Arg
 c⁄° &
¨g
 ) -> 
P¨£r
 & {

6377 
m_¨gs
.
push_back
(
¨g
);

6378  *
	gthis
;

6381 autÿ
	g›î©‹
|=–
O±
 c⁄° &
›t
 ) -> 
P¨£r
 & {

6382 
m_›ti⁄s
.
push_back
(
›t
);

6383  *
	gthis
;

6386 autÿ
	g›î©‹
|=–
P¨£r
 c⁄° &
Ÿhî
 ) -> Parser & {

6387 
m_›ti⁄s
.
ö£π
(m_›ti⁄s.
íd
(), 
Ÿhî
.m_›ti⁄s.
begö
(), other.m_options.end());

6388 
	gm_¨gs
.
ö£π
(
m_¨gs
.
íd
(), 
Ÿhî
.m_¨gs.
begö
(), other.m_args.end());

6389  *
	gthis
;

6392 
	gãm∂©e
<
ty≥«me
 
	gT
>

6393 autÿ
	g›î©‹
|–
T
 c⁄° &
	gŸhî
 ) c⁄° -> 
	gP¨£r
 {

6394  
P¨£r
–*
this
 ) |
Ÿhî
;

6398 
	gãm∂©e
<
ty≥«me
 
	gT
>

6399 autÿ
	g›î©‹
+=–
T
 c⁄° &
Ÿhî
 ) -> 
P¨£r
 & {  
›î©‹
|=( other ); }

6400 
	gãm∂©e
<
ty≥«me
 
	gT
>

6401 autÿ
	g›î©‹
+–
T
 c⁄° &
	gŸhî
 ) c⁄° -> 
	gP¨£r
 {  operator|( other ); }

6403 autÿ
gëHñpCﬁumns
(Ëc⁄° -> 
	g°d
::
ve˘‹
<
HñpCﬁumns
> {

6404 
°d
::
ve˘‹
<
HñpCﬁumns
> 
cﬁs
;

6405 autÿc⁄° &
	go
 : 
m_›ti⁄s
) {

6406 autÿ
chûdCﬁs
 = 
o
.
gëHñpCﬁumns
();

6407 
	gcﬁs
.
ö£π
–
cﬁs
.
íd
(), 
chûdCﬁs
.
begö
(), childCols.end() );

6409  
	gcﬁs
;

6412 
wrôeToSåóm
–
°d
::
o°ªam
 &
os
 ) const {

6413 i‡(!
m_exeName
.
«me
().
em±y
()) {

6414 
os
 << "ußge:\n" << " " << 
m_exeName
.
«me
() << " ";

6415 
boﬁ
 
	gªquúed
 = 
åue
, 
	gfú°
 =Årue;

6416 áutÿc⁄° &
	g¨g
 : 
m_¨gs
 ) {

6417 i‡(
fú°
)

6418 
fú°
 = 
Ál£
;

6420 
	gos
 << " ";

6421 if–
	g¨g
.
isO±i⁄Æ
(Ë&& 
	gªquúed
 ) {

6422 
	gos
 << "[";

6423 
	gªquúed
 = 
Ál£
;

6425 
	gos
 << "<" << 
	g¨g
.
höt
() << ">";

6426 if–
	g¨g
.
ˇrdöÆôy
() == 0 )

6427 
os
 << " ... ";

6429 if–!
	gªquúed
 )

6430 
	gos
 << "]";

6431 if–!
	gm_›ti⁄s
.
em±y
() )

6432 
	gos
 << " options";

6433 
	gos
 << "\n\nwhîê›ti⁄†¨e:" << 
	g°d
::
ídl
;

6436 autÿ
	grows
 = 
gëHñpCﬁumns
();

6437 
size_t
 
	gc⁄sﬁeWidth
 = 
CATCH_CLARA_CONFIG_CONSOLE_WIDTH
;

6438 
size_t
 
	g›tWidth
 = 0;

6439 áutÿc⁄° &
	gcﬁs
 : 
rows
 )

6440 
›tWidth
 = (
°d
::
max
)(›tWidth, 
	gcﬁs
.
	gÀ·
.
size
() + 2);

6442 
	g›tWidth
 = (
°d
::
mö
)(
›tWidth
, 
	gc⁄sﬁeWidth
/2);

6444 áutÿc⁄° &
	gcﬁs
 : 
rows
 ) {

6445 autÿ
row
 =

6446 
TextFlow
::
Cﬁumn
–
cﬁs
.
À·
 ).
width
–
›tWidth
 ).
ödít
( 2 ) +

6447 
TextFlow
::
S∑˚r
(4) +

6448 
TextFlow
::
Cﬁumn
–
cﬁs
.
right
 ).
width
–
c⁄sﬁeWidth
 - 7 - 
›tWidth
 );

6449 
	gos
 << 
	grow
 << 
	g°d
::
ídl
;

6453 
‰õnd
áutÿ
	g›î©‹
<<–
	g°d
::
o°ªam
 &
os
, 
P¨£r
 c⁄° &
	g∑r£r
 ) -> std::ostream& {

6454 
∑r£r
.
wrôeToSåóm
–
os
 );

6455  
	gos
;

6458 autÿ
vÆid©e
(Ëc⁄° -> 
Resu…
 
	govîride
 {

6459 áutÿc⁄° &
	g›t
 : 
m_›ti⁄s
 ) {

6460 autÿ
ªsu…
 = 
›t
.
vÆid©e
();

6461 if–!
	gªsu…
 )

6462  
	gªsu…
;

6464 áutÿc⁄° &
	g¨g
 : 
m_¨gs
 ) {

6465 autÿ
ªsu…
 = 
¨g
.
vÆid©e
();

6466 if–!
	gªsu…
 )

6467  
	gªsu…
;

6469  
	gResu…
::
ok
();

6472 
usög
 
	gP¨£rBa£
::
∑r£
;

6474 autÿ
∑r£
–
°d
::
°rög
 c⁄°& 
exeName
, 
TokíSåóm
 c⁄° &
tokís
 ) c⁄° -> 
I¡î«lP¨£Resu…
 
	govîride
 {

6476 
	sP¨£rInfo
 {

6477 
P¨£rBa£
 c⁄°* 
	g∑r£r
 = 
nuŒ±r
;

6478 
size_t
 
	gcou¡
 = 0;

6480 c⁄° 
size_t
 
	gtŸÆP¨£rs
 = 
m_›ti⁄s
.
size
(Ë+ 
m_¨gs
.size();

6481 
as£π
–
tŸÆP¨£rs
 < 512 );

6483 
P¨£rInfo
 
	g∑r£Infos
[512];

6486 
size_t
 
	gi
 = 0;

6487 autÿc⁄° &
	g›t
 : 
m_›ti⁄s
Ë
∑r£Infos
[
i
++].
∑r£r
 = &
›t
;

6488 autÿc⁄° &
	g¨g
 : 
m_¨gs
Ë
∑r£Infos
[
i
++].
∑r£r
 = &
¨g
;

6491 
	gm_exeName
.
£t
–
exeName
 );

6493 autÿ
	gªsu…
 = 
I¡î«lP¨£Resu…
::
ok
–
P¨£Sèã
–
P¨£Resu…Ty≥
::
NoM©ch
, 
tokís
 ) );

6494  
	gªsu…
.
vÆue
().
ªmaöögTokís
() ) {

6495 
boﬁ
 
	gtokíP¨£d
 = 
Ál£
;

6497  
size_t
 
	gi
 = 0; i < 
	gtŸÆP¨£rs
; ++i ) {

6498 auto& 
	g∑r£Info
 = 
∑r£Infos
[
i
];

6499 if–
	g∑r£Info
.
	g∑r£r
->
ˇrdöÆôy
(Ë=0 || 
∑r£Info
.
cou¡
 <Ö¨£Info.
∑r£r
->cardinality() ) {

6500 
ªsu…
 = 
∑r£Info
.
∑r£r
->
∑r£
(
exeName
,Ñesu….
vÆue
().
ªmaöögTokís
());

6501 i‡(!
	gªsu…
)

6502  
	gªsu…
;

6503 i‡(
	gªsu…
.
vÆue
().
ty≥
(Ë!
P¨£Resu…Ty≥
::
NoM©ch
) {

6504 
tokíP¨£d
 = 
åue
;

6505 ++
	g∑r£Info
.
	gcou¡
;

6511 if–
	gªsu…
.
vÆue
().
ty≥
(Ë=
P¨£Resu…Ty≥
::
Sh‹tCúcuôAŒ
 )

6512  
ªsu…
;

6513 if–!
	gtokíP¨£d
 )

6514  
	gI¡î«lP¨£Resu…
::
ru¡imeEº‹
–"Uƒecogni£dÅokí: " + 
ªsu…
.
vÆue
().
ªmaöögTokís
()->
tokí
 );

6517  
	gªsu…
;

6521 
	gãm∂©e
<
ty≥«me
 
	gDîivedT
>

6522 
	gãm∂©e
<
ty≥«me
 
	gT
>

6523 autÿ
	gCompoßbÀP¨£rIm∂
<
	gDîivedT
>::
›î©‹
|–
T
 c⁄° &
Ÿhî
 ) c⁄° -> 
P¨£r
 {

6524  
P¨£r
(Ë| 
°©ic_ˇ°
<
DîivedT
 c⁄° &>–*
this
 ) | 
Ÿhî
;

6529 
usög
 
	gdëaû
::
P¨£r
;

6532 
usög
 
	gdëaû
::
O±
;

6535 
usög
 
	gdëaû
::
Arg
;

6538 
usög
 
	gdëaû
::
Args
;

6541 
usög
 
	gdëaû
::
ExeName
;

6544 
usög
 
	gdëaû
::
Hñp
;

6547 
usög
 
	gdëaû
::
P¨£Resu…Ty≥
;

6550 
usög
 
	gdëaû
::
P¨£rResu…
;

6555 #ifde‡
__˛™g__


6556 #¥agm®
˛™g
 
dügno°ic
 
p›


6560 #ifde‡
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH


6561 
	#CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
 
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH


	)

6562 #unde‡
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH


6566 
«me•a˚
 
	gC©ch
 {

6568 
	g˛¨a
::
P¨£r
 
makeComm™dLöeP¨£r
–
C⁄figD©a
& 
c⁄fig
 );

6573 
	~<f°ªam
>

6574 
	~<˘ime
>

6576 
«me•a˚
 
	gC©ch
 {

6578 
	g˛¨a
::
P¨£r
 
makeComm™dLöeP¨£r
–
C⁄figD©a
& 
c⁄fig
 ) {

6580 
usög
 
«me•a˚
 
˛¨a
;

6582 autÿc⁄° 
	g£tW¨nög
 = [&]–
°d
::
°rög
 c⁄°& 
w¨nög
 ) {

6583 autÿ
w¨nögSë
 = [&]() {

6584 if–
w¨nög
 == "NoAssertions" )

6585  
W¨nAbout
::
NoAs£πi⁄s
;

6587 i‡–
	gw¨nög
 == "NoTests" )

6588  
W¨nAbout
::
NoTe°s
;

6590  
	gW¨nAbout
::
NŸhög
;

6593 i‡(
	gw¨nögSë
 =
W¨nAbout
::
NŸhög
)

6594  
P¨£rResu…
::
ru¡imeEº‹
–"Uƒecogni£d w¨nög: '" + 
w¨nög
 + "'" );

6595 
	gc⁄fig
.
	gw¨nögs
 = 
°©ic_ˇ°
<
W¨nAbout
::
Wh©
>–
c⁄fig
.
w¨nögs
 | 
w¨nögSë
 );

6596  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6598 autÿc⁄° 
	glﬂdTe°NamesFromFûe
 = [&]–
°d
::
°rög
 c⁄°& 
fûíame
 ) {

6599 
°d
::
if°ªam
 
f
–
fûíame
.
c_°r
() );

6600 if–!
	gf
.
is_›í
() )

6601  
	gP¨£rResu…
::
ru¡imeEº‹
–"U«bÀÅÿlﬂd i≈uàfûe: '" + 
fûíame
 + "'" );

6603 
	g°d
::
°rög
 
löe
;

6604  
	g°d
::
gëlöe
–
f
, 
löe
 ) ) {

6605 
	glöe
 = 
åim
(
löe
);

6606 if–!
	glöe
.
em±y
(Ë&& !
°¨tsWôh
–
löe
, '#' ) ) {

6607 if–!
°¨tsWôh
–
löe
, '"' ) )

6608 
	glöe
 = '"' + 
löe
 + '"';

6609 
	gc⁄fig
.
	gã°sOrTags
.
push_back
–
löe
 + ',' );

6612  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6614 autÿc⁄° 
	g£tTe°Ordî
 = [&]–
°d
::
°rög
 c⁄°& 
‹dî
 ) {

6615 if–
°¨tsWôh
–"de˛¨ed", 
‹dî
 ) )

6616 
c⁄fig
.
runOrdî
 = 
RunTe°s
::
InDe˛¨©i⁄Ordî
;

6617 if–
°¨tsWôh
–"Àxiˇl", 
‹dî
 ) )

6618 
	gc⁄fig
.
	grunOrdî
 = 
RunTe°s
::
InLexicogøphiˇlOrdî
;

6619 if–
°¨tsWôh
–"øndom", 
‹dî
 ) )

6620 
	gc⁄fig
.
	grunOrdî
 = 
RunTe°s
::
InR™domOrdî
;

6622  
	g˛¨a
::
P¨£rResu…
::
ru¡imeEº‹
–"Uƒecogni£d ordîög: '" + 
‹dî
 + "'" );

6623  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6625 autÿc⁄° 
	g£tRngSìd
 = [&]–
°d
::
°rög
 c⁄°& 
£ed
 ) {

6626 if–
£ed
 != "time" )

6627  
˛¨a
::
dëaû
::
c⁄vîtI¡o
–
£ed
, 
c⁄fig
.
∫gSìd
 );

6628 
	gc⁄fig
.
	g∫gSìd
 = 
°©ic_ˇ°
<>–
°d
::
time
(
nuŒ±r
) );

6629  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6631 autÿc⁄° 
	g£tCﬁourUßge
 = [&]–
°d
::
°rög
 c⁄°& 
u£Cﬁour
 ) {

6632 autÿ
mode
 = 
toLowî
–
u£Cﬁour
 );

6634 if–
	gmode
 == "yes" )

6635 
c⁄fig
.
u£Cﬁour
 = 
U£Cﬁour
::
Yes
;

6636 if–
	gmode
 == "no" )

6637 
c⁄fig
.
u£Cﬁour
 = 
U£Cﬁour
::
No
;

6638 if–
	gmode
 == "auto" )

6639 
c⁄fig
.
u£Cﬁour
 = 
U£Cﬁour
::
Auto
;

6641  
	gP¨£rResu…
::
ru¡imeEº‹
–"cﬁou∏modêmu° bê⁄êof:áuto, ye†‹Ço. '" + 
u£Cﬁour
 + "'ÇotÑecognised" );

6642  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6644 autÿc⁄° 
	g£tWaôF‹Key¥ess
 = [&]–
°d
::
°rög
 c⁄°& 
key¥ess
 ) {

6645 autÿ
key¥essLc
 = 
toLowî
–
key¥ess
 );

6646 if–
	gkey¥essLc
 == "start" )

6647 
c⁄fig
.
waôF‹Key¥ess
 = 
WaôF‹Key¥ess
::
Bef‹eSèπ
;

6648 if–
	gkey¥essLc
 == "exit" )

6649 
c⁄fig
.
waôF‹Key¥ess
 = 
WaôF‹Key¥ess
::
Bef‹eExô
;

6650 if–
	gkey¥essLc
 == "both" )

6651 
c⁄fig
.
waôF‹Key¥ess
 = 
WaôF‹Key¥ess
::
Bef‹eSèπAndExô
;

6653  
	gP¨£rResu…
::
ru¡imeEº‹
–"key¥es†¨gumíàmu° bê⁄êof: sèπ,Éxô o∏bŸh. '" + 
key¥ess
 + "'ÇotÑecognised" );

6654  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6656 autÿc⁄° 
	g£tVîbosôy
 = [&]–
°d
::
°rög
 c⁄°& 
vîbosôy
 ) {

6657 autÿ
lcVîbosôy
 = 
toLowî
–
vîbosôy
 );

6658 if–
	glcVîbosôy
 == "quiet" )

6659 
c⁄fig
.
vîbosôy
 = 
Vîbosôy
::
Quõt
;

6660 if–
	glcVîbosôy
 == "normal" )

6661 
c⁄fig
.
vîbosôy
 = 
Vîbosôy
::
N‹mÆ
;

6662 if–
	glcVîbosôy
 == "high" )

6663 
c⁄fig
.
vîbosôy
 = 
Vîbosôy
::
High
;

6665  
	gP¨£rResu…
::
ru¡imeEº‹
–"Uƒecogni£d vîbosôy, '" + 
vîbosôy
 + "'" );

6666  
	gP¨£rResu…
::
ok
–
P¨£Resu…Ty≥
::
M©ched
 );

6669 autÿ
	g˛i


6670 
ExeName
–
c⁄fig
.
¥o˚ssName
 )

6671 | 
Hñp
–
c⁄fig
.
showHñp
 )

6672 | 
O±
–
c⁄fig
.
li°Te°s
 )

6675 | 
O±
–
c⁄fig
.
li°Tags
 )

6678 | 
O±
–
c⁄fig
.
showSuc˚ssfulTe°s
 )

6681 | 
O±
–
c⁄fig
.
shouldDebugBªak
 )

6684 | 
O±
–
c⁄fig
.
noThrow
 )

6687 | 
O±
–
c⁄fig
.
showInvisibÀs
 )

6690 | 
O±
–
c⁄fig
.
ouçutFûíame
, "filename" )

6693 | 
O±
–
c⁄fig
.
ªp‹ãrName
, "name" )

6696 | 
O±
–
c⁄fig
.
«me
, "name" )

6699 | 
O±
–[&]–
boﬁ
 ){ 
c⁄fig
.
ab‹tA·î
 = 1; } )

6702 | 
O±
–[&]–
x
 ){ 
c⁄fig
.
ab‹tA·î
 = x; }, "no. failures" )

6705 | 
O±
–
£tW¨nög
, "warningÇame" )

6708 | 
O±
–[&]–
boﬁ
 
Êag
 ) { 
c⁄fig
.
showDuøti⁄s
 = fœg ? 
ShowDuøti⁄s
::
Always
 : ShowDuøti⁄s::
Nevî
; }, "yes|no" )

6711 | 
O±
–
lﬂdTe°NamesFromFûe
, "filename" )

6714 | 
O±
–
c⁄fig
.
fûíamesAsTags
 )

6717 | 
O±
–
c⁄fig
.
£˘i⁄sToRun
, "sectionÇame" )

6720 | 
O±
–
£tVîbosôy
, "quiet|normal|high" )

6723 | 
O±
–
c⁄fig
.
li°Te°NamesO∆y
 )

6726 | 
O±
–
c⁄fig
.
li°Rï‹ãrs
 )

6729 | 
O±
–
£tTe°Ordî
, "decl|lex|rand" )

6732 | 
O±
–
£tRngSìd
, "'time'|number" )

6735 | 
O±
–
£tCﬁourUßge
, "yes|no" )

6738 | 
O±
–
c⁄fig
.
libIdítify
 )

6741 | 
O±
–
£tWaôF‹Key¥ess
, "start|exit|both" )

6744 | 
O±
–
c⁄fig
.
bíchm¨kResﬁuti⁄Mu…ùÀ
, "multiplier" )

6748 | 
Arg
–
c⁄fig
.
ã°sOrTags
, "testÇame|pattern|tags" )

6751  
	g˛i
;

6758 
	~<c°rög
>

6759 
	~<o°ªam
>

6761 
«me•a˚
 
	gC©ch
 {

6763 
boﬁ
 
	gSour˚LöeInfo
::
em±y
(Ëc⁄° 
n€x˚±
 {

6764  
fûe
[0] == '\0';

6766 
boﬁ
 
	gSour˚LöeInfo
::
›î©‹
 =–
Sour˚LöeInfo
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
 {

6767  
löe
 =
Ÿhî
.löê&& (
fûe
 =Ÿhî.fûê|| 
°d
::
°rcmp
(file, other.file) == 0);

6769 
boﬁ
 
	gSour˚LöeInfo
::
›î©‹
 < ( 
Sour˚LöeInfo
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
 {

6770  
löe
 < 
Ÿhî
.löê|| (Üöê=Ÿhî.löê&& (
°d
::
°rcmp
(
fûe
, other.file) < 0));

6773 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Sour˚LöeInfo
 c⁄°& 
	göfo
 ) {

6774 #i‚de‡
__GNUG__


6775 
	gos
 << 
	göfo
.
	gfûe
 << '(' << info.
	glöe
 << ')';

6777 
	gos
 << 
	göfo
.
	gfûe
 << ':' << info.
	glöe
;

6779  
	gos
;

6782 
	g°d
::
°rög
 
SåómEndSt›
::
›î©‹
+() const {

6783  
°d
::
°rög
();

6786 
	gN⁄C›yabÀ
::
N⁄C›yabÀ
() = ;

6787 
	gN⁄C›yabÀ
::~
N⁄C›yabÀ
() = ;

6795 
	~<°dex˚±
>

6797 
	#CATCH_PREPARE_EXCEPTION
–
ty≥
, 
msg
 ) \

6798 
	`ty≥
––
C©ch
::
	`ReußbÀSåögSåóm
(Ë<< 
msg
 ).
	`°r
(Ë)

	)

6799 
	#CATCH_INTERNAL_ERROR
–
msg
 ) \

6800 
throw
 
	`CATCH_PREPARE_EXCEPTION
–
°d
::
logic_îr‹
, 
CATCH_INTERNAL_LINEINFO
 << ": I¡î«»C©chÉº‹: " << 
msg
);

	)

6801 
	#CATCH_ERROR
–
msg
 ) \

6802 
throw
 
	`CATCH_PREPARE_EXCEPTION
–
°d
::
domaö_îr‹
, 
msg
 )

	)

6803 
	#CATCH_ENFORCE
–
c⁄dôi⁄
, 
msg
 ) \

6804 do{ if–!(
c⁄dôi⁄
ËË
	`CATCH_ERROR
–
msg
 ); } 
Ál£
)

	)

6807 
«me•a˚
 
	gC©ch
 {

6809 
	gC⁄fig
::
C⁄fig
–
C⁄figD©a
 c⁄°& 
d©a
 )

6810 : 
m_d©a
–
d©a
 ),

6811 
m_°ªam
–
›íSåóm
() )

6813 
Te°S≥cP¨£r
 
∑r£r
(
ITagAlüsRegi°ry
::
gë
());

6814 i‡(
	gd©a
.
	gã°sOrTags
.
em±y
()) {

6815 
	g∑r£r
.
∑r£
("~[.]");

6818 
	gm_hasTe°Fûãrs
 = 
åue
;

6819 áutÿc⁄°& 
	gã°OrTags
 : 
d©a
.
ã°sOrTags
 )

6820 
∑r£r
.
∑r£
–
ã°OrTags
 );

6822 
	gm_ã°S≥c
 = 
∑r£r
.
ã°S≥c
();

6825 
	g°d
::
°rög
 c⁄°& 
C⁄fig
::
gëFûíame
() const {

6826  
m_d©a
.
ouçutFûíame
 ;

6829 
boﬁ
 
	gC⁄fig
::
li°Te°s
(Ëc⁄° {  
m_d©a
.listTests; }

6830 
boﬁ
 
	gC⁄fig
::
li°Te°NamesO∆y
(Ëc⁄° {  
m_d©a
.listTestNamesOnly; }

6831 
boﬁ
 
	gC⁄fig
::
li°Tags
(Ëc⁄° {  
m_d©a
.listTags; }

6832 
boﬁ
 
	gC⁄fig
::
li°Rï‹ãrs
(Ëc⁄° {  
m_d©a
.listReporters; }

6834 
	g°d
::
°rög
 
C⁄fig
::
gëPro˚ssName
(Ëc⁄° {  
m_d©a
.
¥o˚ssName
; }

6835 
	g°d
::
°rög
 c⁄°& 
C⁄fig
::
gëRï‹ãrName
(Ëc⁄° {  
m_d©a
.
ªp‹ãrName
; }

6837 
	g°d
::
ve˘‹
<
°d
::
°rög
> c⁄°& 
C⁄fig
::
gëTe°sOrTags
(Ëc⁄° {  
m_d©a
.
ã°sOrTags
; }

6838 
	g°d
::
ve˘‹
<
°d
::
°rög
> c⁄°& 
C⁄fig
::
gëSe˘i⁄sToRun
(Ëc⁄° {  
m_d©a
.
£˘i⁄sToRun
; }

6840 
Te°S≥c
 c⁄°& 
	gC⁄fig
::
ã°S≥c
(Ëc⁄° {  
m_ã°S≥c
; }

6841 
boﬁ
 
	gC⁄fig
::
hasTe°Fûãrs
(Ëc⁄° {  
m_hasTe°Fûãrs
; }

6843 
boﬁ
 
	gC⁄fig
::
showHñp
(Ëc⁄° {  
m_d©a
.showHelp; }

6846 
boﬁ
 
	gC⁄fig
::
ÆlowThrows
(Ëc⁄° {  !
m_d©a
.
noThrow
; }

6847 
	g°d
::
o°ªam
& 
C⁄fig
::
°ªam
(Ëc⁄° {  
m_°ªam
->stream(); }

6848 
	g°d
::
°rög
 
C⁄fig
::
«me
(Ëc⁄° {  
m_d©a
.«me.
em±y
(Ë? m_d©a.
¥o˚ssName
 : m_data.name; }

6849 
boﬁ
 
	gC⁄fig
::
ö˛udeSuc˚ssfulResu…s
(Ëc⁄° {  
m_d©a
.
showSuc˚ssfulTe°s
; }

6850 
boﬁ
 
	gC⁄fig
::
w¨nAboutMissögAs£πi⁄s
(Ëc⁄° {  !!(
m_d©a
.
w¨nögs
 & 
W¨nAbout
::
NoAs£πi⁄s
); }

6851 
boﬁ
 
	gC⁄fig
::
w¨nAboutNoTe°s
(Ëc⁄° {  !!(
m_d©a
.
w¨nögs
 & 
W¨nAbout
::
NoTe°s
); }

6852 
	gShowDuøti⁄s
::
OrNŸ
 
C⁄fig
::
showDuøti⁄s
(Ëc⁄° {  
m_d©a
.showDurations; }

6853 
	gRunTe°s
::
InWh©Ordî
 
C⁄fig
::
runOrdî
(Ëc⁄° {  
m_d©a
.runOrder; }

6854 
	gC⁄fig
::
∫gSìd
(Ëc⁄° {  
m_d©a
.rngSeed; }

6855 
	gC⁄fig
::
bíchm¨kResﬁuti⁄Mu…ùÀ
(Ëc⁄° {  
m_d©a
.benchmarkResolutionMultiple; }

6856 
	gU£Cﬁour
::
YesOrNo
 
C⁄fig
::
u£Cﬁour
(Ëc⁄° {  
m_d©a
.useColour; }

6857 
boﬁ
 
	gC⁄fig
::
shouldDebugBªak
(Ëc⁄° {  
m_d©a
.shouldDebugBreak; }

6858 
	gC⁄fig
::
ab‹tA·î
(Ëc⁄° {  
m_d©a
.abortAfter; }

6859 
boﬁ
 
	gC⁄fig
::
showInvisibÀs
(Ëc⁄° {  
m_d©a
.showInvisibles; }

6860 
Vîbosôy
 
	gC⁄fig
::
vîbosôy
(Ëc⁄° {  
m_d©a
.verbosity; }

6862 
ISåóm
 c⁄°* 
	gC⁄fig
::
›íSåóm
() {

6863  
C©ch
::
makeSåóm
(
m_d©a
.
ouçutFûíame
);

6870 #i‡
deföed
(
__˛™g__
)

6871 #¥agm®
˛™g
 
dügno°ic
 
push


6872 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wexit-time-destructors"

6877 
«me•a˚
 
	gC©ch
 {

6879 ˛as†
	cEºnoGu¨d
 {

6880 
	gpublic
:

6881 
EºnoGu¨d
();

6882 ~
EºnoGu¨d
();

6883 
	g¥iv©e
:

6884 
m_ﬁdEºno
;

6890 
	~<s°ªam
>

6892 
«me•a˚
 
	gC©ch
 {

6893 
	g«me•a˚
 {

6895 
	sICﬁourIm∂
 {

6896 
	gvútuÆ
 ~
ICﬁourIm∂
() = ;

6897 
vútuÆ
 
u£
–
Cﬁour
::
Code
 
_cﬁourCode
 ) = 0;

6900 
	gNoCﬁourIm∂
 : 
ICﬁourIm∂
 {

6901 
u£
–
Cﬁour
::
Code
 ) {}

6903 
ICﬁourIm∂
* 
ö°™˚
() {

6904 
NoCﬁourIm∂
 
s_ö°™˚
;

6905  &
	gs_ö°™˚
;

6912 #i‡!
deföed
–
CATCH_CONFIG_COLOUR_NONE
 ) && !deföed–
CATCH_CONFIG_COLOUR_WINDOWS
 ) && !deföed–
CATCH_CONFIG_COLOUR_ANSI
 )

6913 #ifde‡
CATCH_PLATFORM_WINDOWS


6914 
	#CATCH_CONFIG_COLOUR_WINDOWS


	)

6916 
	#CATCH_CONFIG_COLOUR_ANSI


	)

6920 #i‡
deföed
 ( 
CATCH_CONFIG_COLOUR_WINDOWS
 )

6922 
«me•a˚
 
	gC©ch
 {

6923 
	g«me•a˚
 {

6925 ˛as†
	cWö32CﬁourIm∂
 : 
public
 
ICﬁourIm∂
 {

6926 
public
:

6927 
Wö32CﬁourIm∂
(Ë: 
°doutH™dÀ
–
GëStdH™dÀ
(
STD_OUTPUT_HANDLE
) )

6929 
CONSOLE_SCREEN_BUFFER_INFO
 
csbiInfo
;

6930 
GëC⁄sﬁeS¸ìnBuf„rInfo
–
°doutH™dÀ
, &
csbiInfo
 );

6931 
	g‹igöÆF‹egroundAâribuãs
 = 
csbiInfo
.
wAâribuãs
 & ~–
BACKGROUND_GREEN
 | 
BACKGROUND_RED
 | 
BACKGROUND_BLUE
 | 
BACKGROUND_INTENSITY
 );

6932 
	g‹igöÆBackgroundAâribuãs
 = 
csbiInfo
.
wAâribuãs
 & ~–
FOREGROUND_GREEN
 | 
FOREGROUND_RED
 | 
FOREGROUND_BLUE
 | 
FOREGROUND_INTENSITY
 );

6935 
vútuÆ
 
u£
–
Cﬁour
::
Code
 
_cﬁourCode
 ) 
ovîride
 {

6936  
_cﬁourCode
 ) {

6937 
Cﬁour
::
N⁄e
:  
£tTextAâribuã
–
‹igöÆF‹egroundAâribuãs
 );

6938 
	gCﬁour
::
Whôe
:  
£tTextAâribuã
–
FOREGROUND_GREEN
 | 
FOREGROUND_RED
 | 
FOREGROUND_BLUE
 );

6939 
	gCﬁour
::
Red
:  
£tTextAâribuã
–
FOREGROUND_RED
 );

6940 
	gCﬁour
::
Gªí
:  
£tTextAâribuã
–
FOREGROUND_GREEN
 );

6941 
	gCﬁour
::
Blue
:  
£tTextAâribuã
–
FOREGROUND_BLUE
 );

6942 
	gCﬁour
::
Cy™
:  
£tTextAâribuã
–
FOREGROUND_BLUE
 | 
FOREGROUND_GREEN
 );

6943 
	gCﬁour
::
Yñlow
:  
£tTextAâribuã
–
FOREGROUND_RED
 | 
FOREGROUND_GREEN
 );

6944 
	gCﬁour
::
Gªy
:  
£tTextAâribuã
( 0 );

6946 
	gCﬁour
::
LightGªy
:  
£tTextAâribuã
–
FOREGROUND_INTENSITY
 );

6947 
	gCﬁour
::
BrightRed
:  
£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_RED
 );

6948 
	gCﬁour
::
BrightGªí
:  
£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_GREEN
 );

6949 
	gCﬁour
::
BrightWhôe
:  
£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_GREEN
 | 
FOREGROUND_RED
 | 
FOREGROUND_BLUE
 );

6950 
	gCﬁour
::
BrightYñlow
:  
£tTextAâribuã
–
FOREGROUND_INTENSITY
 | 
FOREGROUND_RED
 | 
FOREGROUND_GREEN
 );

6952 
	gCﬁour
::
Bright
: 
CATCH_INTERNAL_ERROR
( "notá colour" );

6955 
CATCH_ERROR
( "Unknown colourÑequested" );

6959 
	g¥iv©e
:

6960 
£tTextAâribuã
–
WORD
 
_ãxtAâribuã
 ) {

6961 
SëC⁄sﬁeTextAâribuã
–
°doutH™dÀ
, 
_ãxtAâribuã
 | 
‹igöÆBackgroundAâribuãs
 );

6963 
HANDLE
 
	g°doutH™dÀ
;

6964 
WORD
 
	g‹igöÆF‹egroundAâribuãs
;

6965 
WORD
 
	g‹igöÆBackgroundAâribuãs
;

6968 
ICﬁourIm∂
* 
∂©f‹mCﬁourIn°™˚
() {

6969 
Wö32CﬁourIm∂
 
	gs_ö°™˚
;

6971 
IC⁄figPå
 
	gc⁄fig
 = 
gëCuºítC⁄ãxt
().
gëC⁄fig
();

6972 
	gU£Cﬁour
::
YesOrNo
 
cﬁourMode
 = 
c⁄fig


6973 ? 
c⁄fig
->
u£Cﬁour
()

6974 : 
U£Cﬁour
::
Auto
;

6975 if–
	gcﬁourMode
 =
U£Cﬁour
::
Auto
 )

6976 
cﬁourMode
 = 
U£Cﬁour
::
Yes
;

6977  
	gcﬁourMode
 =
U£Cﬁour
::
Yes


6978 ? &
s_ö°™˚


6979 : 
NoCﬁourIm∂
::
ö°™˚
();

6985 #ñi‡
deföed
–
CATCH_CONFIG_COLOUR_ANSI
 )

6987 
	~<uni°d.h
>

6989 
«me•a˚
 
	gC©ch
 {

6990 
	g«me•a˚
 {

6996 ˛as†
	cPosixCﬁourIm∂
 : 
public
 
ICﬁourIm∂
 {

6997 
public
:

6998 
vútuÆ
 
u£
–
Cﬁour
::
Code
 
_cﬁourCode
 ) 
ovîride
 {

6999  
_cﬁourCode
 ) {

7000 
Cﬁour
::
N⁄e
:

7001 
Cﬁour
::
Whôe
:  
£tCﬁour
( "[0m" );

7002 
	gCﬁour
::
Red
:  
£tCﬁour
( "[0;31m" );

7003 
	gCﬁour
::
Gªí
:  
£tCﬁour
( "[0;32m" );

7004 
	gCﬁour
::
Blue
:  
£tCﬁour
( "[0;34m" );

7005 
	gCﬁour
::
Cy™
:  
£tCﬁour
( "[0;36m" );

7006 
	gCﬁour
::
Yñlow
:  
£tCﬁour
( "[0;33m" );

7007 
	gCﬁour
::
Gªy
:  
£tCﬁour
( "[1;30m" );

7009 
	gCﬁour
::
LightGªy
:  
£tCﬁour
( "[0;37m" );

7010 
	gCﬁour
::
BrightRed
:  
£tCﬁour
( "[1;31m" );

7011 
	gCﬁour
::
BrightGªí
:  
£tCﬁour
( "[1;32m" );

7012 
	gCﬁour
::
BrightWhôe
:  
£tCﬁour
( "[1;37m" );

7013 
	gCﬁour
::
BrightYñlow
:  
£tCﬁour
( "[1;33m" );

7015 
	gCﬁour
::
Bright
: 
CATCH_INTERNAL_ERROR
( "notá colour" );

7016 : 
CATCH_INTERNAL_ERROR
( "Unknown colourÑequested" );

7019 
ICﬁourIm∂
* 
ö°™˚
() {

7020 
PosixCﬁourIm∂
 
	gs_ö°™˚
;

7021  &
	gs_ö°™˚
;

7024 
	g¥iv©e
:

7025 
£tCﬁour
–c⁄° * 
_esˇ≥Code
 ) {

7026 
C©ch
::
cout
(Ë<< '\033' << 
_esˇ≥Code
;

7030 
boﬁ
 
u£CﬁourOnPœtf‹m
() {

7032 #ifde‡
CATCH_PLATFORM_MAC


7033 !
isDebuggîA˘ive
() &&

7035 #i‡!(
deföed
(
__DJGPP__
Ë&& deföed(
__STRICT_ANSI__
))

7036 
ißây
(
STDOUT_FILENO
)

7038 
	gÁl£


7042 
ICﬁourIm∂
* 
∂©f‹mCﬁourIn°™˚
() {

7043 
EºnoGu¨d
 
	ggu¨d
;

7044 
IC⁄figPå
 
	gc⁄fig
 = 
gëCuºítC⁄ãxt
().
gëC⁄fig
();

7045 
	gU£Cﬁour
::
YesOrNo
 
cﬁourMode
 = 
c⁄fig


7046 ? 
c⁄fig
->
u£Cﬁour
()

7047 : 
U£Cﬁour
::
Auto
;

7048 if–
	gcﬁourMode
 =
U£Cﬁour
::
Auto
 )

7049 
cﬁourMode
 = 
u£CﬁourOnPœtf‹m
()

7050 ? 
U£Cﬁour
::
Yes


7051 : 
U£Cﬁour
::
No
;

7052  
	gcﬁourMode
 =
U£Cﬁour
::
Yes


7053 ? 
PosixCﬁourIm∂
::
ö°™˚
()

7054 : 
NoCﬁourIm∂
::
ö°™˚
();

7062 
«me•a˚
 
	gC©ch
 {

7064 
ICﬁourIm∂
* 
∂©f‹mCﬁourIn°™˚
(Ë{  
	gNoCﬁourIm∂
::
ö°™˚
(); }

7070 
«me•a˚
 
	gC©ch
 {

7072 
	gCﬁour
::
Cﬁour
–
Code
 
_cﬁourCode
 ) { 
u£
( _colourCode ); }

7073 
	gCﬁour
::
Cﬁour
–Cﬁour&& 
rhs
 ) 
n€x˚±
 {

7074 
m_moved
 = 
rhs
.m_moved;

7075 
	grhs
.
	gm_moved
 = 
åue
;

7077 
	gCﬁour
& Cﬁour::
›î©‹
=–
Cﬁour
&& 
rhs
 ) 
n€x˚±
 {

7078 
m_moved
 = 
rhs
.m_moved;

7079 
	grhs
.
	gm_moved
 = 
åue
;

7080  *
	gthis
;

7083 
	gCﬁour
::~
Cﬁour
(){ if–!
m_moved
 ) 
u£
–
N⁄e
 ); }

7085 
	gCﬁour
::
u£
–
Code
 
_cﬁourCode
 ) {

7086 
ICﬁourIm∂
* 
im∂
 = 
∂©f‹mCﬁourIn°™˚
();

7087 
	gim∂
->
u£
–
_cﬁourCode
 );

7090 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Cﬁour
 const& ) {

7091  
	gos
;

7096 #i‡
deföed
(
__˛™g__
)

7097 #¥agm®
˛™g
 
dügno°ic
 
p›


7103 
«me•a˚
 
	gC©ch
 {

7105 
˛ass
 
	gC⁄ãxt
 : 
public
 
IMuèbÀC⁄ãxt
, 
	gN⁄C›yabÀ
 {

7107 
	gpublic
:

7108 
vútuÆ
 
IResu…C≠tuª
* 
gëResu…C≠tuª
(Ë
ovîride
 {

7109  
m_ªsu…C≠tuª
;

7111 
vútuÆ
 
IRu¬î
* 
gëRu¬î
(Ë
	govîride
 {

7112  
	gm_ru¬î
;

7115 
vútuÆ
 
IC⁄figPå
 c⁄°& 
gëC⁄fig
(Ëc⁄° 
	govîride
 {

7116  
	gm_c⁄fig
;

7119 
	gvútuÆ
 ~
C⁄ãxt
(Ë
	govîride
;

7121 
	gpublic
:

7122 
vútuÆ
 
£tResu…C≠tuª
–
IResu…C≠tuª
* 
ªsu…C≠tuª
 ) 
ovîride
 {

7123 
m_ªsu…C≠tuª
 = 
ªsu…C≠tuª
;

7125 
vútuÆ
 
£tRu¬î
–
IRu¬î
* 
ru¬î
 ) 
	govîride
 {

7126 
	gm_ru¬î
 = 
ru¬î
;

7128 
vútuÆ
 
£tC⁄fig
–
IC⁄figPå
 c⁄°& 
c⁄fig
 ) 
	govîride
 {

7129 
	gm_c⁄fig
 = 
c⁄fig
;

7132 
‰õnd
 
	gIMuèbÀC⁄ãxt
& 
gëCuºítMuèbÀC⁄ãxt
();

7134 
	g¥iv©e
:

7135 
IC⁄figPå
 
m_c⁄fig
;

7136 
IRu¬î
* 
	gm_ru¬î
 = 
nuŒ±r
;

7137 
IResu…C≠tuª
* 
	gm_ªsu…C≠tuª
 = 
nuŒ±r
;

7140 
IMuèbÀC⁄ãxt
 *
	gIMuèbÀC⁄ãxt
::
cuºítC⁄ãxt
 = 
nuŒ±r
;

7142 
	gIMuèbÀC⁄ãxt
::
¸óãC⁄ãxt
()

7144 
cuºítC⁄ãxt
 = 
√w
 
C⁄ãxt
();

7147 
˛ónUpC⁄ãxt
() {

7148 
dñëe
 
	gIMuèbÀC⁄ãxt
::
cuºítC⁄ãxt
;

7149 
	gIMuèbÀC⁄ãxt
::
cuºítC⁄ãxt
 = 
nuŒ±r
;

7151 
	gIC⁄ãxt
::~
IC⁄ãxt
() = ;

7152 
	gIMuèbÀC⁄ãxt
::~
IMuèbÀC⁄ãxt
() = ;

7153 
	gC⁄ãxt
::~
C⁄ãxt
() = ;

7160 
	~<°rög
>

7162 
«me•a˚
 
	gC©ch
 {

7163 
wrôeToDebugC⁄sﬁe
–
°d
::
°rög
 c⁄°& 
ãxt
 );

7167 #ifde‡
CATCH_PLATFORM_WINDOWS


7169 
«me•a˚
 
	gC©ch
 {

7170 
wrôeToDebugC⁄sﬁe
–
°d
::
°rög
 c⁄°& 
ãxt
 ) {

7171 ::
OuçutDebugSåögA
–
ãxt
.
c_°r
() );

7177 
«me•a˚
 
	gC©ch
 {

7178 
wrôeToDebugC⁄sﬁe
–
°d
::
°rög
 c⁄°& 
ãxt
 ) {

7180 
C©ch
::
cout
(Ë<< 
ãxt
;

7188 #ifde‡
CATCH_PLATFORM_MAC


7190 
	~<as£π.h
>

7191 
	~<°dboﬁ.h
>

7192 
	~<sys/ty≥s.h
>

7193 
	~<uni°d.h
>

7194 
	~<sys/sys˘l.h
>

7195 
	~<c°ddef
>

7196 
	~<o°ªam
>

7198 
«me•a˚
 
	gC©ch
 {

7205 
boﬁ
 
isDebuggîA˘ive
(){

7207 
	gmib
[4];

7208 
köfo_¥oc
 
	göfo
;

7209 
	g°d
::
size_t
 
size
;

7214 
	göfo
.
	gkp_¥oc
.
	gp_Êag
 = 0;

7219 
	gmib
[0] = 
CTL_KERN
;

7220 
	gmib
[1] = 
KERN_PROC
;

7221 
	gmib
[2] = 
KERN_PROC_PID
;

7222 
	gmib
[3] = 
gëpid
();

7226 
	gsize
 = (
öfo
);

7227 if–
sys˘l
(
mib
, (mibË/ (*mib), &
öfo
, &
size
, 
nuŒ±r
, 0) != 0 ) {

7228 
C©ch
::
˚º
(Ë<< "\n** CÆ»tÿsys˘»Áûed - u«bÀÅÿdëîmöêi‡debuggî i†a˘ivê**\n" << 
°d
::
ídl
;

7229  
	gÁl£
;

7234  ( (
	göfo
.
	gkp_¥oc
.
	gp_Êag
 & 
	gP_TRACED
) != 0 );

7238 #ñi‡
deföed
(
CATCH_PLATFORM_LINUX
)

7239 
	~<f°ªam
>

7240 
	~<°rög
>

7242 
«me•a˚
 
	gC©ch
{

7250 
boﬁ
 
isDebuggîA˘ive
(){

7253 
EºnoGu¨d
 
	ggu¨d
;

7254 
	g°d
::
if°ªam
 
ö
("/proc/self/status");

7255  
	g°d
::
°rög
 
löe
; std::
gëlöe
(
ö
,Üine); ) {

7256 c⁄° 
	gPREFIX_LEN
 = 11;

7257 if–
	glöe
.
com∑ª
(0, 
PREFIX_LEN
, "TracerPid:\t") == 0 ) {

7261  
löe
.
Àngth
(Ë> 
PREFIX_LEN
 &&Üine[PREFIX_LEN] != '0';

7265  
	gÁl£
;

7268 #ñi‡
deföed
(
_MSC_VER
)

7269 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`IsDebuggîPª£¡
();

7270 
«me•a˚
 
C©ch
 {

7271 
boﬁ
 
	`isDebuggîA˘ive
() {

7272  
	`IsDebuggîPª£¡
() != 0;

7274 
	}
}

7275 #ñi‡
deföed
(
__MINGW32__
)

7276 "C" 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`IsDebuggîPª£¡
();

7277 
«me•a˚
 
C©ch
 {

7278 
boﬁ
 
	`isDebuggîA˘ive
() {

7279  
	`IsDebuggîPª£¡
() != 0;

7281 
	}
}

7283 
«me•a˚
 
	gC©ch
 {

7284 
boﬁ
 
isDebuggîA˘ive
(Ë{  
	gÁl£
; }

7290 
«me•a˚
 
	gC©ch
 {

7292 
	gITønsõ¡Ex¥essi⁄
::~
ITønsõ¡Ex¥essi⁄
() = ;

7294 
f‹m©Rec⁄°ru˘edEx¥essi⁄
–
°d
::
o°ªam
 &
os
, std::
°rög
 c⁄°& 
lhs
, 
SåögRef
 
›
, std::°rög c⁄°& 
rhs
 ) {

7295 if–
lhs
.
size
(Ë+ 
rhs
.size() < 40 &&

7296 
lhs
.
föd
('\n'Ë=
°d
::
°rög
::
≈os
 &&

7297 
rhs
.
föd
('\n'Ë=
°d
::
°rög
::
≈os
 )

7298 
os
 << 
lhs
 << " " << 
›
 << " " << 
rhs
;

7300 
	gos
 << 
	glhs
 << "\n" << 
	g›
 << "\n" << 
	grhs
;

7306 
	~<˚ºno
>

7308 
«me•a˚
 
	gC©ch
 {

7309 
	gEºnoGu¨d
::
EºnoGu¨d
():
m_ﬁdEºno
(
î∫o
){}

7310 
EºnoGu¨d
::~EºnoGu¨d(Ë{ 
î∫o
 = 
m_ﬁdEºno
; }

7317 
	~<ve˘‹
>

7318 
	~<°rög
>

7319 
	~<mem‹y
>

7321 
«me•a˚
 
	gC©ch
 {

7323 ˛as†
	cEx˚±i⁄Tøn¶©‹Regi°ry
 : 
public
 
IEx˚±i⁄Tøn¶©‹Regi°ry
 {

7324 
public
:

7325 ~
Ex˚±i⁄Tøn¶©‹Regi°ry
();

7326 
vútuÆ
 
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 );

7327 
vútuÆ
 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
(Ëc⁄° 
ovîride
;

7328 
	g°d
::
°rög
 
åyTøn¶©‹s
() const;

7330 
	g¥iv©e
:

7331 
°d
::
ve˘‹
<°d::
unique_±r
<
IEx˚±i⁄Tøn¶©‹
 c⁄°>> 
m_å™¶©‹s
;

7336 #ifde‡
__OBJC__


7340 
«me•a˚
 
	gC©ch
 {

7342 
	gEx˚±i⁄Tøn¶©‹Regi°ry
::~
Ex˚±i⁄Tøn¶©‹Regi°ry
() {

7345 
Ex˚±i⁄Tøn¶©‹Regi°ry
::
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 ) {

7346 
m_å™¶©‹s
.
push_back
–
°d
::
unique_±r
<c⁄° 
IEx˚±i⁄Tøn¶©‹
>–
å™¶©‹
 ) );

7349 
	g°d
::
°rög
 
Ex˚±i⁄Tøn¶©‹Regi°ry
::
å™¶©eA˘iveEx˚±i⁄
() const {

7350 
åy
 {

7351 #ifde‡
__OBJC__


7353 @
åy
 {

7354  
åyTøn¶©‹s
();

7356 @
ˇtch
 (
NSEx˚±i⁄
 *
ex˚±i⁄
) {

7357  
	gC©ch
::
Dëaû
::
°rögify
–[
ex˚±i⁄
 
des¸ùti⁄
] );

7368 i‡(
	g°d
::
cuºít_ex˚±i⁄
(Ë=
nuŒ±r
) {

7371  
åyTøn¶©‹s
();

7374 
ˇtch
–
Te°FaûuªEx˚±i⁄
& ) {

7375 
	g°d
::
ªthrow_ex˚±i⁄
(
°d
::
cuºít_ex˚±i⁄
());

7377 
ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

7378  
ex
.
wh©
();

7380 
ˇtch
–
°d
::
°rög
& 
msg
 ) {

7381  
msg
;

7383 
ˇtch
–c⁄° * 
msg
 ) {

7384  
	gmsg
;

7386 
ˇtch
(...) {

7391 
	g°d
::
°rög
 
Ex˚±i⁄Tøn¶©‹Regi°ry
::
åyTøn¶©‹s
() const {

7392 if–
m_å™¶©‹s
.
em±y
() )

7393 
°d
::
ªthrow_ex˚±i⁄
(°d::
cuºít_ex˚±i⁄
());

7395  
	gm_å™¶©‹s
[0]->
å™¶©e
–
m_å™¶©‹s
.
begö
()+1, m_å™¶©‹s.
íd
() );

7401 #i‡
deföed
(
__GNUC__
)

7402 #¥agm®
GCC
 
dügno°ic
 
push


7403 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wmissing-field-initializers"

7406 #i‡
deföed
–
CATCH_CONFIG_WINDOWS_SEH
 ) || deföed–
CATCH_CONFIG_POSIX_SIGNALS
 )

7408 
	g«me•a˚
 {

7410 
ªp‹tF©Æ
–c⁄° * c⁄° 
mesßge
 ) {

7411 
	gC©ch
::
gëCuºítC⁄ãxt
().
gëResu…C≠tuª
()->
h™dÀF©ÆEº‹C⁄dôi⁄
–
mesßge
 );

7417 #i‡
deföed
–
CATCH_CONFIG_WINDOWS_SEH
 )

7419 
«me•a˚
 
	gC©ch
 {

7420 
	sSig«lDefs
 { 
DWORD
 
	gid
; c⁄° * 
	g«me
; };

7425 
Sig«lDefs
 
	gsig«lDefs
[] = {

7426 { 
EXCEPTION_ILLEGAL_INSTRUCTION
, "SIGILL - Illegal instruction signal" },

7427 { 
EXCEPTION_STACK_OVERFLOW
, "SIGSEGV - Stack overflow" },

7428 { 
EXCEPTION_ACCESS_VIOLATION
, "SIGSEGV - Segmentation violation signal" },

7429 { 
EXCEPTION_INT_DIVIDE_BY_ZERO
, "Divide by zeroÉrror" },

7432 
LONG
 
CALLBACK
 
	gF©ÆC⁄dôi⁄H™dÀr
::
h™dÀVe˘‹edEx˚±i⁄
(
PEXCEPTION_POINTERS
 
Ex˚±i⁄Info
) {

7433 autÿc⁄°& 
def
 : 
sig«lDefs
) {

7434 i‡(
Ex˚±i⁄Info
->
Ex˚±i⁄Rec‹d
->
Ex˚±i⁄Code
 =
def
.
id
) {

7435 
ªp‹tF©Æ
(
def
.
«me
);

7440  
	gEXCEPTION_CONTINUE_SEARCH
;

7443 
	gF©ÆC⁄dôi⁄H™dÀr
::
F©ÆC⁄dôi⁄H™dÀr
() {

7444 
isSë
 = 
åue
;

7447 
	ggu¨™ãeSize
 = 32 * 1024;

7448 
	gex˚±i⁄H™dÀrH™dÀ
 = 
nuŒ±r
;

7450 
	gex˚±i⁄H™dÀrH™dÀ
 = 
AddVe˘‹edEx˚±i⁄H™dÀr
(1, 
h™dÀVe˘‹edEx˚±i⁄
);

7452 
SëThªadSèckGu¨™ãe
(&
gu¨™ãeSize
);

7455 
	gF©ÆC⁄dôi⁄H™dÀr
::
ª£t
() {

7456 i‡(
isSë
) {

7457 
RemoveVe˘‹edEx˚±i⁄H™dÀr
(
ex˚±i⁄H™dÀrH™dÀ
);

7458 
SëThªadSèckGu¨™ãe
(&
gu¨™ãeSize
);

7459 
	gex˚±i⁄H™dÀrH™dÀ
 = 
nuŒ±r
;

7460 
	gisSë
 = 
Ál£
;

7464 
	gF©ÆC⁄dôi⁄H™dÀr
::~
F©ÆC⁄dôi⁄H™dÀr
() {

7465 
ª£t
();

7468 
boﬁ
 
	gF©ÆC⁄dôi⁄H™dÀr
::
isSë
 = 
Ál£
;

7469 
ULONG
 
	gF©ÆC⁄dôi⁄H™dÀr
::
gu¨™ãeSize
 = 0;

7470 
PVOID
 
	gF©ÆC⁄dôi⁄H™dÀr
::
ex˚±i⁄H™dÀrH™dÀ
 = 
nuŒ±r
;

7474 #ñi‡
deföed
–
CATCH_CONFIG_POSIX_SIGNALS
 )

7476 
«me•a˚
 
	gC©ch
 {

7478 
	sSig«lDefs
 {

7479 
	gid
;

7480 c⁄° * 
	g«me
;

7485 
c⁄°ex¥
 
	g°d
::
size_t
 
sigSèckSize
 = 32768 >
MINSIGSTKSZ
 ? 32768 : MINSIGSTKSZ;

7487 
Sig«lDefs
 
	gsig«lDefs
[] = {

7488 { 
SIGINT
, "SIGINT - Terminal interrupt signal" },

7489 { 
SIGILL
, "SIGILL - Illegal instruction signal" },

7490 { 
SIGFPE
, "SIGFPE - FloatingÖointÉrror signal" },

7491 { 
SIGSEGV
, "SIGSEGV - Segmentation violation signal" },

7492 { 
SIGTERM
, "SIGTERM - TerminationÑequest signal" },

7493 { 
SIGABRT
, "SIGABRT - Abort (abnormalÅermination) signal" }

7496 
	gF©ÆC⁄dôi⁄H™dÀr
::
h™dÀSig«l
–
sig
 ) {

7497 c⁄° * 
«me
 = "<unknown signal>";

7498 autÿc⁄°& 
	gdef
 : 
sig«lDefs
) {

7499 i‡(
sig
 =
def
.
id
) {

7500 
«me
 = 
def
.name;

7504 
ª£t
();

7505 
ªp‹tF©Æ
(
«me
);

7506 
øi£
–
sig
 );

7509 
	gF©ÆC⁄dôi⁄H™dÀr
::
F©ÆC⁄dôi⁄H™dÀr
() {

7510 
isSë
 = 
åue
;

7511 
°ack_t
 
	gsigSèck
;

7512 
	gsigSèck
.
	gss_•
 = 
ÆtSèckMem
;

7513 
	gsigSèck
.
	gss_size
 = 
sigSèckSize
;

7514 
	gsigSèck
.
	gss_Êags
 = 0;

7515 
sigÆt°ack
(&
sigSèck
, &
ﬁdSigSèck
);

7516 
siga˘i⁄
 
	gß
 = { };

7518 
	gß
.
	gß_h™dÀr
 = 
h™dÀSig«l
;

7519 
	gß
.
	gß_Êags
 = 
SA_ONSTACK
;

7520 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gsig«lDefs
)/(
	gSig«lDefs
); ++i) {

7521 
siga˘i⁄
(
sig«lDefs
[
i
].
id
, &
ß
, &
ﬁdSigA˘i⁄s
[i]);

7525 
	gF©ÆC⁄dôi⁄H™dÀr
::~
F©ÆC⁄dôi⁄H™dÀr
() {

7526 
ª£t
();

7529 
	gF©ÆC⁄dôi⁄H™dÀr
::
ª£t
() {

7530 if–
isSë
 ) {

7532  
°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gsig«lDefs
)/(
	gSig«lDefs
); ++i ) {

7533 
siga˘i⁄
(
sig«lDefs
[
i
].
id
, &
ﬁdSigA˘i⁄s
[i], 
nuŒ±r
);

7536 
sigÆt°ack
(&
ﬁdSigSèck
, 
nuŒ±r
);

7537 
	gisSë
 = 
Ál£
;

7541 
boﬁ
 
	gF©ÆC⁄dôi⁄H™dÀr
::
isSë
 = 
Ál£
;

7542 
siga˘i⁄
 
	gF©ÆC⁄dôi⁄H™dÀr
::
ﬁdSigA˘i⁄s
[(
sig«lDefs
)/(
Sig«lDefs
)] = {};

7543 
°ack_t
 
	gF©ÆC⁄dôi⁄H™dÀr
::
ﬁdSigSèck
 = {};

7544 
	gF©ÆC⁄dôi⁄H™dÀr
::
ÆtSèckMem
[
sigSèckSize
] = {};

7550 
«me•a˚
 
	gC©ch
 {

7551 
	gF©ÆC⁄dôi⁄H™dÀr
::
ª£t
() {}

7556 #i‡
deföed
(
__GNUC__
)

7557 #¥agm®
GCC
 
dügno°ic
 
p›


7562 
«me•a˚
 
C©ch
 {

7563 
IResu…C≠tuª
::~IResultCapture() = ;

7568 
«me•a˚
 
	gC©ch
 {

7569 
	gIC⁄fig
::~
IC⁄fig
() = ;

7574 
«me•a˚
 
	gC©ch
 {

7575 
	gIEx˚±i⁄Tøn¶©‹
::~
IEx˚±i⁄Tøn¶©‹
() = ;

7576 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
::~
IEx˚±i⁄Tøn¶©‹Regi°ry
() = ;

7581 
«me•a˚
 
	gC©ch
 {

7582 
	gIRegi°ryHub
::~
IRegi°ryHub
() = ;

7583 
	gIMuèbÀRegi°ryHub
::~
IMuèbÀRegi°ryHub
() = ;

7590 
«me•a˚
 
	gC©ch
 {

7592 ˛as†
	cLi°íögRï‹ãr
 : 
public
 
ISåómögRï‹ãr
 {

7593 
usög
 
Rï‹ãrs
 = 
°d
::
ve˘‹
<
ISåómögRï‹ãrPå
>;

7594 
Rï‹ãrs
 
	gm_li°íîs
;

7595 
ISåómögRï‹ãrPå
 
	gm_ªp‹ãr
 = 
nuŒ±r
;

7596 
Rï‹ãrPª„ªn˚s
 
	gm_¥e„ªn˚s
;

7598 
	gpublic
:

7599 
Li°íögRï‹ãr
();

7601 
addLi°íî
–
ISåómögRï‹ãrPå
&& 
li°íî
 );

7602 
addRï‹ãr
–
ISåómögRï‹ãrPå
&& 
ªp‹ãr
 );

7604 
	gpublic
:

7606 
Rï‹ãrPª„ªn˚s
 
gëPª„ªn˚s
(Ëc⁄° 
ovîride
;

7608 
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) 
ovîride
;

7610 
	g°d
::
£t
<
Vîbosôy
> 
gëSuµ‹ãdVîbosôõs
();

7612 
bíchm¨kSèπög
–
Bíchm¨kInfo
 c⁄°& 
bíchm¨kInfo
 ) 
	govîride
;

7613 
bíchm¨kEnded
–
Bíchm¨kSèts
 c⁄°& 
bíchm¨kSèts
 ) 
	govîride
;

7615 
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°RunInfo
 ) 
	govîride
;

7616 
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) 
	govîride
;

7617 
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) 
	govîride
;

7618 
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) 
	govîride
;

7619 
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& 
as£πi⁄Info
 ) 
	govîride
;

7622 
boﬁ
 
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) 
	govîride
;

7623 
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) 
	govîride
;

7624 
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) 
	govîride
;

7625 
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) 
	govîride
;

7626 
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) 
	govîride
;

7628 
skùTe°
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) 
	govîride
;

7629 
boﬁ
 
isMu…i
(Ëc⁄° 
	govîride
;

7636 
«me•a˚
 
	gC©ch
 {

7638 
	gRï‹ãrC⁄fig
::
Rï‹ãrC⁄fig
–
IC⁄figPå
 c⁄°& 
_fuŒC⁄fig
 )

7639 : 
m_°ªam
–&
_fuŒC⁄fig
->
°ªam
(Ë), 
m_fuŒC⁄fig
( _fullConfig ) {}

7641 
	gRï‹ãrC⁄fig
::
Rï‹ãrC⁄fig
–
IC⁄figPå
 c⁄°& 
_fuŒC⁄fig
, 
°d
::
o°ªam
& 
_°ªam
 )

7642 : 
m_°ªam
–&
_°ªam
 ), 
m_fuŒC⁄fig
–
_fuŒC⁄fig
 ) {}

7644 
	g°d
::
o°ªam
& 
Rï‹ãrC⁄fig
::
°ªam
(Ëc⁄° {  *
m_°ªam
; }

7645 
IC⁄figPå
 
	gRï‹ãrC⁄fig
::
fuŒC⁄fig
(Ëc⁄° {  
m_fuŒC⁄fig
; }

7647 
	gTe°RunInfo
::
Te°RunInfo
–
°d
::
°rög
 c⁄°& 
_«me
 ) : 
«me
( _name ) {}

7649 
GroupInfo
::GroupInfo–
°d
::
°rög
 c⁄°& 
_«me
,

7650 
°d
::
size_t
 
_groupIndex
,

7651 
°d
::
size_t
 
_groupsCou¡
 )

7652 : 
«me
–
_«me
 ),

7653 
groupIndex
–
_groupIndex
 ),

7654 
groupsCou¡s
–
_groupsCou¡
 )

7657 
	gAs£πi⁄Sèts
::
As£πi⁄Sèts
–
As£πi⁄Resu…
 c⁄°& 
_as£πi⁄Resu…
,

7658 
°d
::
ve˘‹
<
MesßgeInfo
> c⁄°& 
_öfoMesßges
,

7659 
TŸÆs
 c⁄°& 
_tŸÆs
 )

7660 : 
as£πi⁄Resu…
–
_as£πi⁄Resu…
 ),

7661 
öfoMesßges
–
_öfoMesßges
 ),

7662 
tŸÆs
–
_tŸÆs
 )

7664 
	gas£πi⁄Resu…
.
	gm_ªsu…D©a
.
	gœzyEx¥essi⁄
.
	gm_å™sõ¡Ex¥essi⁄
 = 
_as£πi⁄Resu…
.
m_ªsu…D©a
.
œzyEx¥essi⁄
.
m_å™sõ¡Ex¥essi⁄
;

7666 if–
	gas£πi⁄Resu…
.
hasMesßge
() ) {

7669 
MesßgeBuûdî
 
buûdî
–
as£πi⁄Resu…
.
gëTe°Ma¸oName
(),ás£πi⁄Resu….
gëSour˚Info
(),ás£πi⁄Resu….
gëResu…Ty≥
() );

7670 
	gbuûdî
 << 
	gas£πi⁄Resu…
.
gëMesßge
();

7671 
	gbuûdî
.
	gm_öfo
.
	gmesßge
 = 
buûdî
.
m_°ªam
.
°r
();

7673 
	göfoMesßges
.
push_back
–
buûdî
.
m_öfo
 );

7677 
	gAs£πi⁄Sèts
::~
As£πi⁄Sèts
() = ;

7679 
	gSe˘i⁄Sèts
::
Se˘i⁄Sèts
–
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
,

7680 
Cou¡s
 c⁄°& 
_as£πi⁄s
,

7681 
_duøti⁄InSec⁄ds
,

7682 
boﬁ
 
_missögAs£πi⁄s
 )

7683 : 
£˘i⁄Info
–
_£˘i⁄Info
 ),

7684 
as£πi⁄s
–
_as£πi⁄s
 ),

7685 
duøti⁄InSec⁄ds
–
_duøti⁄InSec⁄ds
 ),

7686 
missögAs£πi⁄s
–
_missögAs£πi⁄s
 )

7689 
	gSe˘i⁄Sèts
::~
Se˘i⁄Sèts
() = ;

7691 
	gTe°Ca£Sèts
::
Te°Ca£Sèts
–
Te°Ca£Info
 c⁄°& 
_ã°Info
,

7692 
TŸÆs
 c⁄°& 
_tŸÆs
,

7693 
°d
::
°rög
 c⁄°& 
_°dOut
,

7694 
°d
::
°rög
 c⁄°& 
_°dEº
,

7695 
boﬁ
 
_ab‹tög
 )

7696 : 
ã°Info
–
_ã°Info
 ),

7697 
tŸÆs
–
_tŸÆs
 ),

7698 
°dOut
–
_°dOut
 ),

7699 
°dEº
–
_°dEº
 ),

7700 
ab‹tög
–
_ab‹tög
 )

7703 
	gTe°Ca£Sèts
::~
Te°Ca£Sèts
() = ;

7705 
	gTe°GroupSèts
::
Te°GroupSèts
–
GroupInfo
 c⁄°& 
_groupInfo
,

7706 
TŸÆs
 c⁄°& 
_tŸÆs
,

7707 
boﬁ
 
_ab‹tög
 )

7708 : 
groupInfo
–
_groupInfo
 ),

7709 
tŸÆs
–
_tŸÆs
 ),

7710 
ab‹tög
–
_ab‹tög
 )

7713 
	gTe°GroupSèts
::
Te°GroupSèts
–
GroupInfo
 c⁄°& 
_groupInfo
 )

7714 : 
groupInfo
–
_groupInfo
 ),

7715 
ab‹tög
–
Ál£
 )

7718 
	gTe°GroupSèts
::~
Te°GroupSèts
() = ;

7720 
	gTe°RunSèts
::
Te°RunSèts
–
Te°RunInfo
 c⁄°& 
_runInfo
,

7721 
TŸÆs
 c⁄°& 
_tŸÆs
,

7722 
boﬁ
 
_ab‹tög
 )

7723 : 
runInfo
–
_runInfo
 ),

7724 
tŸÆs
–
_tŸÆs
 ),

7725 
ab‹tög
–
_ab‹tög
 )

7728 
	gTe°RunSèts
::~
Te°RunSèts
() = ;

7730 
	gISåómögRï‹ãr
::
ÁèlEº‹Encou¡îed
–
SåögRef
 ) {}

7731 
boﬁ
 
ISåómögRï‹ãr
::
isMu…i
(Ëc⁄° {  
Ál£
; }

7733 
	gIRï‹ãrFa˘‹y
::~
IRï‹ãrFa˘‹y
() = ;

7734 
	gIRï‹ãrRegi°ry
::~
IRï‹ãrRegi°ry
() = ;

7740 
«me•a˚
 
	gC©ch
 {

7741 
	gIRu¬î
::~
IRu¬î
() = ;

7746 
«me•a˚
 
	gC©ch
 {

7747 
	gITe°Invokî
::~
ITe°Invokî
() = ;

7748 
	gITe°Ca£Regi°ry
::~
ITe°Ca£Regi°ry
() = ;

7753 #ifde‡
CATCH_CONFIG_WINDOWS_CRTDBG


7754 
	~<¸tdbg.h
>

7756 
«me•a˚
 
	gC©ch
 {

7758 
	gLókDëe˘‹
::
LókDëe˘‹
() {

7759 
Êag
 = 
_CπSëDbgFœg
(
_CRTDBG_REPORT_FLAG
);

7760 
	gÊag
 |
_CRTDBG_LEAK_CHECK_DF
;

7761 
	gÊag
 |
_CRTDBG_ALLOC_MEM_DF
;

7762 
_CπSëDbgFœg
(
Êag
);

7763 
_CπSëRï‹tMode
(
_CRT_WARN
, 
_CRTDBG_MODE_FILE
 | 
_CRTDBG_MODE_DEBUG
);

7764 
_CπSëRï‹tFûe
(
_CRT_WARN
, 
_CRTDBG_FILE_STDERR
);

7766 
_CπSëBªakAŒoc
(-1);

7772 
	gC©ch
::
LókDëe˘‹
::
	$LókDëe˘‹
(Ë{
	}
}

7780 
	~<£t
>

7782 
«me•a˚
 
C©ch
 {

7784 
°d
::
size_t
 
li°Te°s
–
C⁄fig
 c⁄°& 
c⁄fig
 );

7786 
	g°d
::
size_t
 
li°Te°sNamesO∆y
–
C⁄fig
 c⁄°& 
c⁄fig
 );

7788 
	sTagInfo
 {

7789 
add
–
°d
::
°rög
 c⁄°& 
•ñlög
 );

7790 
	g°d
::
°rög
 
Æl
() const;

7792 
	g°d
::
£t
<
°d
::
°rög
> 
•ñlögs
;

7793 
	g°d
::
size_t
 
cou¡
 = 0;

7796 
	g°d
::
size_t
 
li°Tags
–
C⁄fig
 c⁄°& 
c⁄fig
 );

7798 
	g°d
::
size_t
 
li°Rï‹ãrs
–
C⁄fig
 const& );

7800 
	gO±i⁄
<
	g°d
::
size_t
> 
li°
–
C⁄fig
 c⁄°& 
c⁄fig
 );

7807 
«me•a˚
 
	gC©ch
 {

7808 
usög
 
«me•a˚
 
	g˛¨a
::
TextFlow
;

7812 
	~<limôs
>

7813 
	~<Æg‹ôhm
>

7814 
	~<iom™ù
>

7816 
«me•a˚
 
	gC©ch
 {

7818 
	g°d
::
size_t
 
li°Te°s
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

7819 
Te°S≥c
 
ã°S≥c
 = 
c⁄fig
.testSpec();

7820 if–
	gc⁄fig
.
hasTe°Fûãrs
() )

7821 
	gC©ch
::
cout
() << "MatchingÅest cases:\n";

7823 
	gC©ch
::
cout
() << "AllávailableÅest cases:\n";

7826 autÿ
	gm©chedTe°Ca£s
 = 
fûãrTe°s
–
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 ), 
ã°S≥c
, config );

7827 áutÿc⁄°& 
	gã°Ca£Info
 : 
m©chedTe°Ca£s
 ) {

7828 
Cﬁour
::
Code
 
cﬁour
 = 
ã°Ca£Info
.
isHiddí
()

7829 ? 
Cﬁour
::
Sec⁄d¨yText


7830 : 
Cﬁour
::
N⁄e
;

7831 
Cﬁour
 
cﬁourGu¨d
–
cﬁour
 );

7833 
	gC©ch
::
cout
(Ë<< 
Cﬁumn
–
ã°Ca£Info
.
«me
 ).
öôülIndít
–2 ).
ödít
( 4 ) << "\n";

7834 if–
	gc⁄fig
.
vîbosôy
(Ë>
Vîbosôy
::
High
 ) {

7835 
C©ch
::
cout
(Ë<< 
Cﬁumn
–C©ch::
Dëaû
::
°rögify
–
ã°Ca£Info
.
löeInfo
 ) ).
ödít
(4Ë<< 
°d
::
ídl
;

7836 
	g°d
::
°rög
 
des¸ùti⁄
 = 
ã°Ca£Info
.description;

7837 if–
	gdes¸ùti⁄
.
em±y
() )

7838 
	gdes¸ùti⁄
 = "(NO DESCRIPTION)";

7839 
	gC©ch
::
cout
(Ë<< 
Cﬁumn
–
des¸ùti⁄
 ).
ödít
(4Ë<< 
°d
::
ídl
;

7841 if–!
	gã°Ca£Info
.
	gègs
.
em±y
() )

7842 
	gC©ch
::
cout
(Ë<< 
Cﬁumn
–
ã°Ca£Info
.
ègsAsSåög
(Ë).
ödít
( 6 ) << "\n";

7845 if–!
	gc⁄fig
.
hasTe°Fûãrs
() )

7846 
	gC©ch
::
cout
(Ë<< 
∂uøli£
–
m©chedTe°Ca£s
.
size
(), "ã° ca£" ) << '\n' << 
	g°d
::
ídl
;

7848 
	gC©ch
::
cout
(Ë<< 
∂uøli£
–
m©chedTe°Ca£s
.
size
(), "m©chögÅe° ca£" ) << '\n' << 
	g°d
::
ídl
;

7849  
	gm©chedTe°Ca£s
.
size
();

7852 
	g°d
::
size_t
 
li°Te°sNamesO∆y
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

7853 
Te°S≥c
 
ã°S≥c
 = 
c⁄fig
.testSpec();

7854 
	g°d
::
size_t
 
m©chedTe°s
 = 0;

7855 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m©chedTe°Ca£s
 = 
fûãrTe°s
–
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 ), 
ã°S≥c
, config );

7856 áutÿc⁄°& 
	gã°Ca£Info
 : 
m©chedTe°Ca£s
 ) {

7857 
m©chedTe°s
++;

7858 if–
°¨tsWôh
–
ã°Ca£Info
.
«me
, '#' ) )

7859 
	gC©ch
::
cout
(Ë<< '"' << 
ã°Ca£Info
.
«me
 << '"';

7861 
	gC©ch
::
cout
(Ë<< 
ã°Ca£Info
.
«me
;

7862 i‡–
	gc⁄fig
.
vîbosôy
(Ë>
Vîbosôy
::
High
 )

7863 
C©ch
::
cout
(Ë<< "\t@" << 
ã°Ca£Info
.
löeInfo
;

7864 
	gC©ch
::
cout
(Ë<< 
°d
::
ídl
;

7866  
	gm©chedTe°s
;

7869 
	gTagInfo
::
add
–
°d
::
°rög
 c⁄°& 
•ñlög
 ) {

7870 ++
cou¡
;

7871 
	g•ñlögs
.
ö£π
–
•ñlög
 );

7874 
	g°d
::
°rög
 
TagInfo
::
Æl
() const {

7875 
°d
::
°rög
 
out
;

7876 áutÿc⁄°& 
	g•ñlög
 : 
•ñlögs
 )

7877 
out
 +"[" + 
•ñlög
 + "]";

7878  
	gout
;

7881 
	g°d
::
size_t
 
li°Tags
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

7882 
Te°S≥c
 
ã°S≥c
 = 
c⁄fig
.testSpec();

7883 if–
	gc⁄fig
.
hasTe°Fûãrs
() )

7884 
	gC©ch
::
cout
() << "Tags for matchingÅest cases:\n";

7886 
	gC©ch
::
cout
() << "AllávailableÅags:\n";

7889 
	g°d
::
m≠
<
°d
::
°rög
, 
	gTagInfo
> 
	gègCou¡s
;

7891 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m©chedTe°Ca£s
 = 
fûãrTe°s
–
gëAŒTe°Ca£sS‹ãd
–
c⁄fig
 ), 
ã°S≥c
, config );

7892 áutÿc⁄°& 
	gã°Ca£
 : 
m©chedTe°Ca£s
 ) {

7893 áutÿc⁄°& 
ègName
 : 
ã°Ca£
.
gëTe°Ca£Info
().
ègs
 ) {

7894 
°d
::
°rög
 
lˇ£TagName
 = 
toLowî
–
ègName
 );

7895 autÿ
	gcou¡It
 = 
ègCou¡s
.
föd
–
lˇ£TagName
 );

7896 if–
	gcou¡It
 =
ègCou¡s
.
íd
() )

7897 
cou¡It
 = 
ègCou¡s
.
ö£π
–
°d
::
make_∑ú
–
lˇ£TagName
, 
TagInfo
(ËË).
	gfú°
;

7898 
	gcou¡It
->
	g£c⁄d
.
add
–
ègName
 );

7902 áutÿc⁄°& 
	gègCou¡
 : 
ègCou¡s
 ) {

7903 
ReußbÀSåögSåóm
 
rss
;

7904 
	grss
 << " " << 
	g°d
::
£tw
(2Ë<< 
ègCou¡
.
£c⁄d
.
cou¡
 << " ";

7905 autÿ
	g°r
 = 
rss
.
°r
();

7906 autÿ
	gwøµî
 = 
Cﬁumn
–
ègCou¡
.
£c⁄d
.
Æl
() )

7907 .
öôülIndít
( 0 )

7908 .
ödít
–
°r
.
size
() )

7909 .
width
–
CATCH_CONFIG_CONSOLE_WIDTH
-10 );

7910 
	gC©ch
::
cout
(Ë<< 
°r
 << 
wøµî
 << '\n';

7912 
	gC©ch
::
cout
(Ë<< 
∂uøli£
–
ègCou¡s
.
size
(), "èg" ) << '\n' << 
	g°d
::
ídl
;

7913  
	gègCou¡s
.
size
();

7916 
	g°d
::
size_t
 
li°Rï‹ãrs
–
C⁄fig
 const& ) {

7917 
C©ch
::
cout
() << "AvailableÑeporters:\n";

7918 
	gIRï‹ãrRegi°ry
::
Fa˘‹yM≠
 c⁄°& 
Á˘‹õs
 = 
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
gëFa˘‹õs
();

7919 
	g°d
::
size_t
 
maxNameLí
 = 0;

7920 áutÿc⁄°& 
	gÁ˘‹yKvp
 : 
Á˘‹õs
 )

7921 
maxNameLí
 = (
°d
::
max
)–maxNameLí, 
	gÁ˘‹yKvp
.
	gfú°
.
size
() );

7923 áutÿc⁄°& 
	gÁ˘‹yKvp
 : 
Á˘‹õs
 ) {

7924 
C©ch
::
cout
()

7925 << 
Cﬁumn
–
Á˘‹yKvp
.
fú°
 + ":" )

7926 .
ödít
(2)

7927 .
width
–5+
maxNameLí
 )

7928 + 
Cﬁumn
–
Á˘‹yKvp
.
£c⁄d
->
gëDes¸ùti⁄
() )

7929 .
öôülIndít
(0)

7930 .
ödít
(2)

7931 .
width
–
CATCH_CONFIG_CONSOLE_WIDTH
 - 
maxNameLí
-8 )

7934 
	gC©ch
::
cout
(Ë<< 
°d
::
ídl
;

7935  
	gÁ˘‹õs
.
size
();

7938 
	gO±i⁄
<
	g°d
::
size_t
> 
li°
–
C⁄fig
 c⁄°& 
c⁄fig
 ) {

7939 
O±i⁄
<
°d
::
size_t
> 
li°edCou¡
;

7940 if–
	gc⁄fig
.
li°Te°s
() )

7941 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Te°s
–
c⁄fig
 );

7942 if–
	gc⁄fig
.
li°Te°NamesO∆y
() )

7943 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Te°sNamesO∆y
–
c⁄fig
 );

7944 if–
	gc⁄fig
.
li°Tags
() )

7945 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Tags
–
c⁄fig
 );

7946 if–
	gc⁄fig
.
li°Rï‹ãrs
() )

7947 
	gli°edCou¡
 = 
li°edCou¡
.
vÆueOr
(0Ë+ 
li°Rï‹ãrs
–
c⁄fig
 );

7948  
	gli°edCou¡
;

7955 
«me•a˚
 
	gC©ch
 {

7956 
«me•a˚
 
	gM©chîs
 {

7957 
«me•a˚
 
	gIm∂
 {

7959 
	g°d
::
°rög
 
M©chîU¡y≥dBa£
::
toSåög
() const {

7960 if–
m_ˇchedToSåög
.
em±y
() )

7961 
m_ˇchedToSåög
 = 
des¸ibe
();

7962  
	gm_ˇchedToSåög
;

7965 
	gM©chîU¡y≥dBa£
::~
M©chîU¡y≥dBa£
() = ;

7970 
usög
 
«me•a˚
 
	gM©chîs
;

7971 
usög
 
	gM©chîs
::
Im∂
::
M©chîBa£
;

7979 
	~<°rög
>

7981 
«me•a˚
 
	gC©ch
 {

7982 
	gãm∂©e
 <
ty≥«me
 
	gT
>

7983 
	g°d
::
°rög
 
to_°rög
(
T
 c⁄°& 
t
) {

7984 #i‡
deföed
(
CATCH_CONFIG_CPP11_TO_STRING
)

7985  
°d
::
to_°rög
(
t
);

7987 
ReußbÀSåögSåóm
 
	grss
;

7988 
	grss
 << 
	gt
;

7989  
	grss
.
°r
();

7995 
	~<c°dlib
>

7996 
	~<c°döt
>

7997 
	~<c°rög
>

7998 
	~<°dex˚±
>

8000 
«me•a˚
 
	gC©ch
 {

8001 
«me•a˚
 
	gM©chîs
 {

8002 
«me•a˚
 
	gFlﬂtög
 {

8003 ˛as†
	cFlﬂtögPoötKöd
 : 
uöt8_t
 {

8004 
Flﬂt
,

8005 
	gDoubÀ


8011 
	g«me•a˚
 {

8013 
	gãm∂©e
 <
ty≥«me
 
	gT
>

8014 
	gC⁄vîãr
;

8016 
	gãm∂©e
 <>

8017 
	gC⁄vîãr
<> {

8018 
°©ic_as£π
((Ë=(
öt32_t
), "Important ULP matcherássumption violated");

8019 
C⁄vîãr
(
f
) {

8020 
	g°d
::
mem˝y
(&
i
, &
f
, (f));

8022 
öt32_t
 
	gi
;

8025 
	gãm∂©e
 <>

8026 
	gC⁄vîãr
<> {

8027 
°©ic_as£π
((Ë=(
öt64_t
), "Important ULP matcherássumption violated");

8028 
C⁄vîãr
(
d
) {

8029 
	g°d
::
mem˝y
(&
i
, &
d
, (d));

8031 
öt64_t
 
	gi
;

8034 
	gãm∂©e
 <
ty≥«me
 
	gT
>

8035 autÿ
c⁄vît
(
T
 
t
Ë-> 
	gC⁄vîãr
<
	gT
> {

8036  
	gC⁄vîãr
<
	gT
>(
	gt
);

8039 
	gãm∂©e
 <
ty≥«me
 
	gFP
>

8040 
boﬁ
 
Æmo°EquÆUÕs
(
FP
 
lhs
, FP 
rhs
, 
maxUÕDiff
) {

8043 i‡(
	g°d
::
i¢™
(
lhs
Ë|| 
°d
::i¢™(
rhs
)) {

8044  
Ál£
;

8047 autÿ
	glc
 = 
c⁄vît
(
lhs
);

8048 autÿ
	grc
 = 
c⁄vît
(
rhs
);

8050 i‡((
	glc
.
	gi
 < 0Ë!(
rc
.
i
 < 0)) {

8052  
lhs
 =
rhs
;

8055 autÿ
	guÕDiff
 = 
°d
::
abs
(
lc
.
i
 - 
rc
.i);

8056  
	guÕDiff
 <
maxUÕDiff
;

8061 
«me•a˚
 
	gC©ch
 {

8062 
«me•a˚
 
	gM©chîs
 {

8063 
«me•a˚
 
	gFlﬂtög
 {

8064 
	gWôhöAbsM©chî
::
WôhöAbsM©chî
(
èrgë
, 
m¨gö
)

8065 :
m_èrgë
{ 
èrgë
 }, 
	gm_m¨gö
{ 
	gm¨gö
 } {

8066 i‡(
	gm_m¨gö
 < 0) {

8067 
throw
 
	g°d
::
domaö_îr‹
("Allowed margin difference hasÅo be >= 0");

8073 
boﬁ
 
	gWôhöAbsM©chî
::
m©ch
(c⁄°& 
m©chì
) const {

8074  (
m©chì
 + 
m_m¨gö
 >
m_èrgë
) && (m_target + m_margin >= matchee);

8077 
	g°d
::
°rög
 
WôhöAbsM©chî
::
des¸ibe
() const {

8078  "i†wôhö " + ::
C©ch
::
Dëaû
::
°rögify
(
m_m¨gö
Ë+ " o‡" + ::C©ch::Dëaû::°rögify(
m_èrgë
);

8081 
	gWôhöUÕsM©chî
::
WôhöUÕsM©chî
(
èrgë
, 
uÕs
, 
FlﬂtögPoötKöd
 
ba£Ty≥
)

8082 :
m_èrgë
{ 
èrgë
 }, 
	gm_uÕs
{ 
	guÕs
 }, 
	gm_ty≥
{ 
	gba£Ty≥
 } {

8083 i‡(
	gm_uÕs
 < 0) {

8084 
throw
 
	g°d
::
domaö_îr‹
("Allowed ulp difference hasÅo be >= 0");

8088 
boﬁ
 
	gWôhöUÕsM©chî
::
m©ch
(c⁄°& 
m©chì
) const {

8089 
m_ty≥
) {

8090 
FlﬂtögPoötKöd
::
Flﬂt
:

8091  
Æmo°EquÆUÕs
<>(
°©ic_ˇ°
<>(
m©chì
), 
	g°©ic_ˇ°
<>(
	gm_èrgë
), 
	gm_uÕs
);

8092 
	gFlﬂtögPoötKöd
::
DoubÀ
:

8093  
Æmo°EquÆUÕs
<>(
m©chì
, 
	gm_èrgë
, 
	gm_uÕs
);

8095 
throw
 
°d
::
domaö_îr‹
("Unknown FloatingPointKind value");

8099 
	g°d
::
°rög
 
WôhöUÕsM©chî
::
des¸ibe
() const {

8100  "i†wôhö " + 
C©ch
::
to_°rög
(
m_uÕs
Ë+ " ULP†o‡" + ::C©ch::
Dëaû
::
°rögify
(
m_èrgë
Ë+ ((
m_ty≥
 =
FlﬂtögPoötKöd
::
Flﬂt
)? "f" : "");

8105 
	gFlﬂtög
::
WôhöUÕsM©chî
 
WôhöULP
(
èrgë
, 
maxUÕDiff
) {

8106  
	gFlﬂtög
::
WôhöUÕsM©chî
(
èrgë
, 
maxUÕDiff
, 
Flﬂtög
::
FlﬂtögPoötKöd
::
DoubÀ
);

8109 
	gFlﬂtög
::
WôhöUÕsM©chî
 
WôhöULP
(
èrgë
, 
maxUÕDiff
) {

8110  
	gFlﬂtög
::
WôhöUÕsM©chî
(
èrgë
, 
maxUÕDiff
, 
Flﬂtög
::
FlﬂtögPoötKöd
::
Flﬂt
);

8113 
	gFlﬂtög
::
WôhöAbsM©chî
 
WôhöAbs
(
èrgë
, 
m¨gö
) {

8114  
	gFlﬂtög
::
WôhöAbsM©chî
(
èrgë
, 
m¨gö
);

8123 
	g°d
::
°rög
 
C©ch
::
M©chîs
::
Gíîic
::
Dëaû
::
föÆizeDes¸ùti⁄
(c⁄° 
°d
::°rög& 
desc
) {

8124 i‡(
desc
.
em±y
()) {

8127  "m©che†¥ediˇã: \"" + 
	gdesc
 + '"';

8133 
	~<ªgex
>

8135 
«me•a˚
 
	gC©ch
 {

8136 
«me•a˚
 
	gM©chîs
 {

8138 
«me•a˚
 
	gStdSåög
 {

8140 
	gCa£dSåög
::
Ca£dSåög
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 )

8141 : 
m_ˇ£Sísôivôy
–
ˇ£Sísôivôy
 ),

8142 
m_°r
–
adju°Såög
–
°r
 ) )

8144 
	g°d
::
°rög
 
Ca£dSåög
::
adju°Såög
–
°d
::°rög c⁄°& 
°r
 ) const {

8145  
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
No


8146 ? 
toLowî
–
°r
 )

8147 : 
°r
;

8149 
	g°d
::
°rög
 
Ca£dSåög
::
ˇ£SísôivôySuffix
() const {

8150  
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
No


8152 : 
°d
::
°rög
();

8155 
	gSåögM©chîBa£
::
SåögM©chîBa£
–
°d
::
°rög
 c⁄°& 
›î©i⁄
, 
Ca£dSåög
 c⁄°& 
com∑øt‹
 )

8156 : 
m_com∑øt‹
–
com∑øt‹
 ),

8157 
m_›î©i⁄
–
›î©i⁄
 ) {

8160 
	g°d
::
°rög
 
SåögM©chîBa£
::
des¸ibe
() const {

8161 
°d
::
°rög
 
des¸ùti⁄
;

8162 
	gdes¸ùti⁄
.
ª£rve
(5 + 
m_›î©i⁄
.
size
(Ë+ 
m_com∑øt‹
.
m_°r
.size() +

8163 
m_com∑øt‹
.
ˇ£SísôivôySuffix
().
size
());

8164 
	gdes¸ùti⁄
 +
m_›î©i⁄
;

8165 
	gdes¸ùti⁄
 += ": \"";

8166 
	gdes¸ùti⁄
 +
m_com∑øt‹
.
m_°r
;

8167 
	gdes¸ùti⁄
 += "\"";

8168 
	gdes¸ùti⁄
 +
m_com∑øt‹
.
ˇ£SísôivôySuffix
();

8169  
	gdes¸ùti⁄
;

8172 
	gEquÆsM©chî
::
EquÆsM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 ) : 
SåögM©chîBa£
( "equals", comparator ) {}

8174 
boﬁ
 
	gEquÆsM©chî
::
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) const {

8175  
m_com∑øt‹
.
adju°Såög
–
sour˚
 ) =m_com∑øt‹.
m_°r
;

8178 
	gC⁄èösM©chî
::
C⁄èösM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 ) : 
SåögM©chîBa£
( "contains", comparator ) {}

8180 
boﬁ
 
	gC⁄èösM©chî
::
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) const {

8181  
c⁄èös
–
m_com∑øt‹
.
adju°Såög
–
sour˚
 ), m_com∑øt‹.
m_°r
 );

8184 
	gSèπsWôhM©chî
::
SèπsWôhM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 ) : 
SåögM©chîBa£
( "starts with", comparator ) {}

8186 
boﬁ
 
	gSèπsWôhM©chî
::
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) const {

8187  
°¨tsWôh
–
m_com∑øt‹
.
adju°Såög
–
sour˚
 ), m_com∑øt‹.
m_°r
 );

8190 
	gEndsWôhM©chî
::
EndsWôhM©chî
–
Ca£dSåög
 c⁄°& 
com∑øt‹
 ) : 
SåögM©chîBa£
( "ends with", comparator ) {}

8192 
boﬁ
 
	gEndsWôhM©chî
::
m©ch
–
°d
::
°rög
 c⁄°& 
sour˚
 ) const {

8193  
ídsWôh
–
m_com∑øt‹
.
adju°Såög
–
sour˚
 ), m_com∑øt‹.
m_°r
 );

8196 
	gRegexM©chî
::
RegexM©chî
(
°d
::
°rög
 
ªgex
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
): 
m_ªgex
(°d::
move
‘egex)), 
m_ˇ£Sísôivôy
(caseSensitivity) {}

8198 
boﬁ
 
	gRegexM©chî
::
m©ch
(
°d
::
°rög
 c⁄°& 
m©chì
) const {

8199 autÿ
Êags
 = 
°d
::
ªgex
::
ECMAS¸ùt
;

8200 i‡(
	gm_ˇ£Sísôivôy
 =
Ca£Sísôive
::
Choi˚
::
No
) {

8201 
Êags
 |
°d
::
ªgex
::
iˇ£
;

8203 autÿ
	gªg
 = 
°d
::
ªgex
(
m_ªgex
, 
Êags
);

8204  
	g°d
::
ªgex_m©ch
(
m©chì
, 
ªg
);

8207 
	g°d
::
°rög
 
RegexM©chî
::
des¸ibe
() const {

8208  "m©che†" + ::
C©ch
::
Dëaû
::
°rögify
(
m_ªgex
Ë+ ((
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
Choi˚
::
Yes
)? " case sensitively" : " case insensitively");

8213 
	gStdSåög
::
EquÆsM©chî
 
EquÆs
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 ) {

8214  
StdSåög
::
EquÆsM©chî
–StdSåög::
Ca£dSåög
–
°r
, 
ˇ£Sísôivôy
) );

8216 
	gStdSåög
::
C⁄èösM©chî
 
C⁄èös
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 ) {

8217  
StdSåög
::
C⁄èösM©chî
–StdSåög::
Ca£dSåög
–
°r
, 
ˇ£Sísôivôy
) );

8219 
	gStdSåög
::
EndsWôhM©chî
 
EndsWôh
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 ) {

8220  
StdSåög
::
EndsWôhM©chî
–StdSåög::
Ca£dSåög
–
°r
, 
ˇ£Sísôivôy
) );

8222 
	gStdSåög
::
SèπsWôhM©chî
 
SèπsWôh
–
°d
::
°rög
 c⁄°& 
°r
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 ) {

8223  
StdSåög
::
SèπsWôhM©chî
–StdSåög::
Ca£dSåög
–
°r
, 
ˇ£Sísôivôy
) );

8226 
	gStdSåög
::
RegexM©chî
 
M©ches
(
°d
::
°rög
 c⁄°& 
ªgex
, 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
) {

8227  
StdSåög
::
RegexM©chî
(
ªgex
, 
ˇ£Sísôivôy
);

8237 
«me•a˚
 
	gC©ch
 {

8238 
boﬁ
 
unˇught_ex˚±i⁄s
();

8242 
«me•a˚
 
	gC©ch
 {

8244 
	gMesßgeInfo
::
MesßgeInfo
–
°d
::
°rög
 c⁄°& 
_ma¸oName
,

8245 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

8246 
Resu…Was
::
OfTy≥
 
_ty≥
 )

8247 : 
ma¸oName
–
_ma¸oName
 ),

8248 
löeInfo
–
_löeInfo
 ),

8249 
ty≥
–
_ty≥
 ),

8250 
£quí˚
–++
globÆCou¡
 )

8253 
boﬁ
 
	gMesßgeInfo
::
›î©‹
==–
MesßgeInfo
 c⁄°& 
Ÿhî
 ) const {

8254  
£quí˚
 =
Ÿhî
.sequence;

8257 
boﬁ
 
	gMesßgeInfo
::
›î©‹
<–
MesßgeInfo
 c⁄°& 
Ÿhî
 ) const {

8258  
£quí˚
 < 
Ÿhî
.sequence;

8262 
	gMesßgeInfo
::
globÆCou¡
 = 0;

8266 
	gC©ch
::
MesßgeBuûdî
::MesßgeBuûdî–
°d
::
°rög
 c⁄°& 
ma¸oName
,

8267 
Sour˚LöeInfo
 c⁄°& 
löeInfo
,

8268 
Resu…Was
::
OfTy≥
 
ty≥
 )

8269 :
m_öfo
(
ma¸oName
, 
löeInfo
, 
ty≥
) {}

8273 
	gSc›edMesßge
::
Sc›edMesßge
–
MesßgeBuûdî
 c⁄°& 
buûdî
 )

8274 : 
m_öfo
–
buûdî
.m_info )

8276 
m_öfo
.
mesßge
 = 
buûdî
.
m_°ªam
.
°r
();

8277 
gëResu…C≠tuª
().
pushSc›edMesßge
–
m_öfo
 );

8280 
	gSc›edMesßge
::~
Sc›edMesßge
() {

8281 i‡–!
unˇught_ex˚±i⁄s
() ){

8282 
gëResu…C≠tuª
().
p›Sc›edMesßge
(
m_öfo
);

8290 #i‚de‡
TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H


8291 
	#TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H


	)

8293 
	~<c°dio
>

8294 
	~<iosfwd
>

8295 
	~<°rög
>

8297 
«me•a˚
 
	gC©ch
 {

8299 ˛as†
	cRedúe˘edSåóm
 {

8300 
	g°d
::
o°ªam
& 
m_‹igöÆSåóm
;

8301 
	g°d
::
o°ªam
& 
m_ªdúe˘i⁄Såóm
;

8302 
	g°d
::
°ªambuf
* 
m_¥evBuf
;

8304 
	gpublic
:

8305 
Redúe˘edSåóm
–
°d
::
o°ªam
& 
‹igöÆSåóm
, std::o°ªam& 
ªdúe˘i⁄Såóm
 );

8306 ~
Redúe˘edSåóm
();

8309 ˛as†
	cRedúe˘edStdOut
 {

8310 
ReußbÀSåögSåóm
 
	gm_rss
;

8311 
Redúe˘edSåóm
 
	gm_cout
;

8312 
	gpublic
:

8313 
Redúe˘edStdOut
();

8314 autÿ
°r
(Ëc⁄° -> 
	g°d
::
°rög
;

8320 ˛as†
	cRedúe˘edStdEº
 {

8321 
ReußbÀSåögSåóm
 
	gm_rss
;

8322 
Redúe˘edSåóm
 
	gm_˚º
;

8323 
Redúe˘edSåóm
 
	gm_˛og
;

8324 
	gpublic
:

8325 
Redúe˘edStdEº
();

8326 autÿ
°r
(Ëc⁄° -> 
	g°d
::
°rög
;

8329 #i‡
	$deföed
(
CATCH_CONFIG_NEW_CAPTURE
)

8335 ˛as†
	cTempFûe
 {

8336 
public
:

8337 
	`TempFûe
(
TempFûe
 c⁄°&Ë
dñëe
;

8338 
TempFûe
& 
›î©‹
=(TempFûêc⁄°&Ë
dñëe
;

8339 
	`TempFûe
(
TempFûe
&&Ë
dñëe
;

8340 
TempFûe
& 
›î©‹
=(TempFûe&&Ë
dñëe
;

8342 
	`TempFûe
();

8343 ~
	`TempFûe
();

8345 
°d
::
FILE
* 
	`gëFûe
();

8346 
°d
::
°rög
 
	`gëC⁄ã¡s
();

8348 
¥iv©e
:

8349 
°d
::
FILE
* 
m_fûe
 = 
nuŒ±r
;

8350 #i‡
	`deföed
(
_MSC_VER
)

8351 
m_buf„r
[
L_tm≤am
] = { 0 };

8353 
	}
};

8355 ˛as†
	cOuçutRedúe˘
 {

8356 
	gpublic
:

8357 
OuçutRedúe˘
(OuçutRedúe˘ c⁄°&Ë
dñëe
;

8358 
	gOuçutRedúe˘
& 
	g›î©‹
=(
OuçutRedúe˘
 c⁄°&Ë
dñëe
;

8359 
OuçutRedúe˘
(OuçutRedúe˘&&Ë
dñëe
;

8360 
	gOuçutRedúe˘
& 
	g›î©‹
=(
OuçutRedúe˘
&&Ë
dñëe
;

8362 
OuçutRedúe˘
(
°d
::
°rög
& 
°dout_de°
, std::°rög& 
°dîr_de°
);

8363 ~
OuçutRedúe˘
();

8365 
	g¥iv©e
:

8366 
m_‹igöÆStdout
 = -1;

8367 
	gm_‹igöÆStdîr
 = -1;

8368 
TempFûe
 
	gm_°doutFûe
;

8369 
TempFûe
 
	gm_°dîrFûe
;

8370 
	g°d
::
°rög
& 
m_°doutDe°
;

8371 
	g°d
::
°rög
& 
m_°dîrDe°
;

8380 
	~<c°dio
>

8381 
	~<c°rög
>

8382 
	~<f°ªam
>

8383 
	~<s°ªam
>

8384 
	~<°dex˚±
>

8386 #i‡
deföed
(
CATCH_CONFIG_NEW_CAPTURE
)

8387 #i‡
deföed
(
_MSC_VER
)

8388 
	~<io.h
>

8389 
	#dup
 
_dup


	)

8390 
	#dup2
 
_dup2


	)

8391 
	#fûío
 
_fûío


	)

8393 
	~<uni°d.h
>

8397 
«me•a˚
 
	gC©ch
 {

8399 
	gRedúe˘edSåóm
::
Redúe˘edSåóm
–
°d
::
o°ªam
& 
‹igöÆSåóm
, std::o°ªam& 
ªdúe˘i⁄Såóm
 )

8400 : 
m_‹igöÆSåóm
–
‹igöÆSåóm
 ),

8401 
m_ªdúe˘i⁄Såóm
–
ªdúe˘i⁄Såóm
 ),

8402 
m_¥evBuf
–
m_‹igöÆSåóm
.
rdbuf
() )

8404 
	gm_‹igöÆSåóm
.
rdbuf
–
m_ªdúe˘i⁄Såóm
.rdbuf() );

8407 
	gRedúe˘edSåóm
::~
Redúe˘edSåóm
() {

8408 
m_‹igöÆSåóm
.
rdbuf
–
m_¥evBuf
 );

8411 
	gRedúe˘edStdOut
::
Redúe˘edStdOut
(Ë: 
m_cout
–
C©ch
::
cout
(), 
m_rss
.
gë
() ) {}

8412 autÿ
	gRedúe˘edStdOut
::
°r
(Ëc⁄° -> 
°d
::
°rög
 {  
m_rss
.str(); }

8414 
	gRedúe˘edStdEº
::
Redúe˘edStdEº
()

8415 : 
m_˚º
–
C©ch
::
˚º
(), 
m_rss
.
gë
() ),

8416 
m_˛og
–
C©ch
::
˛og
(), 
m_rss
.
gë
() )

8418 autÿ
	gRedúe˘edStdEº
::
°r
(Ëc⁄° -> 
°d
::
°rög
 {  
m_rss
.str(); }

8420 #i‡
deföed
(
CATCH_CONFIG_NEW_CAPTURE
)

8422 #i‡
deföed
(
_MSC_VER
)

8423 
	gTempFûe
::
TempFûe
() {

8424 i‡(
tm≤am_s
(
m_buf„r
)) {

8425 
throw
 
°d
::
ru¡ime_îr‹
("CouldÇot getáÅemp filename");

8427 i‡(
f›í_s
(&
m_fûe
, 
m_buf„r
, "w")) {

8428 
	gbuf„r
[100];

8429 i‡(
°ªº‹_s
(
buf„r
, 
î∫o
)) {

8430 
throw
 
	g°d
::
ru¡ime_îr‹
("CouldÇotÅranslateÉrrnoÅo string");

8432 
throw
 
	g°d
::
ru¡ime_îr‹
("CouldÇŸ o≥¿thêãm∞fûe: " + 
°d
::
°rög
(
m_buf„r
Ë+ 
buf„r
);

8436 
	gTempFûe
::
TempFûe
() {

8437 
m_fûe
 = 
°d
::
tmpfûe
();

8438 i‡(!
	gm_fûe
) {

8439 
throw
 
	g°d
::
ru¡ime_îr‹
("CouldÇot createáÅemp file.");

8445 
	gTempFûe
::~
TempFûe
() {

8447 
°d
::
f˛o£
(
m_fûe
);

8450 #i‡
deföed
(
_MSC_VER
)

8451 
	g°d
::
ªmove
(
m_buf„r
);

8455 
FILE
* 
	gTempFûe
::
gëFûe
() {

8456  
m_fûe
;

8459 
	g°d
::
°rög
 
TempFûe
::
gëC⁄ã¡s
() {

8460 
°d
::
°rög°ªam
 
s°r
;

8461 
	gbuf„r
[100] = {};

8462 
	g°d
::
ªwöd
(
m_fûe
);

8463 
	g°d
::
fgës
(
buf„r
, (buf„r), 
m_fûe
)) {

8464 
	gs°r
 << 
	gbuf„r
;

8466  
	gs°r
.
°r
();

8469 
	gOuçutRedúe˘
::
OuçutRedúe˘
(
°d
::
°rög
& 
°dout_de°
, std::°rög& 
°dîr_de°
) :

8470 
m_‹igöÆStdout
(
dup
(1)),

8471 
m_‹igöÆStdîr
(
dup
(2)),

8472 
m_°doutDe°
(
°dout_de°
),

8473 
m_°dîrDe°
(
°dîr_de°
) {

8474 
dup2
(
fûío
(
m_°doutFûe
.
gëFûe
()), 1);

8475 
dup2
(
fûío
(
m_°dîrFûe
.
gëFûe
()), 2);

8478 
	gOuçutRedúe˘
::~
OuçutRedúe˘
() {

8479 
C©ch
::
cout
(Ë<< 
°d
::
Êush
;

8480 
fÊush
(
°dout
);

8483 
	gC©ch
::
˚º
(Ë<< 
°d
::
Êush
;

8484 
	gC©ch
::
˛og
(Ë<< 
°d
::
Êush
;

8485 
fÊush
(
°dîr
);

8487 
dup2
(
m_‹igöÆStdout
, 1);

8488 
dup2
(
m_‹igöÆStdîr
, 2);

8490 
	gm_°doutDe°
 +
m_°doutFûe
.
gëC⁄ã¡s
();

8491 
	gm_°dîrDe°
 +
m_°dîrFûe
.
gëC⁄ã¡s
();

8498 #i‡
deföed
(
CATCH_CONFIG_NEW_CAPTURE
)

8499 #i‡
deföed
(
_MSC_VER
)

8500 #unde‡
dup


8501 #unde‡
dup2


8502 #unde‡
fûío


8510 
	~<Æg‹ôhm
>

8511 
	~<øndom
>

8513 
«me•a˚
 
	gC©ch
 {

8515 
	gIC⁄fig
;

8517 
	g°d
::
mt19937
& 
∫g
();

8518 
£edRng
–
IC⁄fig
 c⁄°& 
c⁄fig
 );

8519 
∫gSìd
();

8524 
«me•a˚
 
	gC©ch
 {

8526 
	g°d
::
mt19937
& 
∫g
() {

8527 
°d
::
mt19937
 
s_∫g
;

8528  
	gs_∫g
;

8531 
£edRng
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

8532 if–
	gc⁄fig
.
∫gSìd
() != 0 ) {

8533 
°d
::
§™d
–
c⁄fig
.
∫gSìd
() );

8534 
∫g
().
£ed
–
c⁄fig
.
∫gSìd
() );

8538 
∫gSìd
() {

8539  
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
∫gSìd
();

8547 
	~<ve˘‹
>

8548 
	~<£t
>

8549 
	~<Æg‹ôhm
>

8550 
	~<ios
>

8552 
«me•a˚
 
	gC©ch
 {

8554 
˛ass
 
	gTe°Ca£
;

8555 
	gIC⁄fig
;

8557 
	g°d
::
ve˘‹
<
Te°Ca£
> 
s‹tTe°s
–
IC⁄fig
 c⁄°& 
c⁄fig
, 
°d
::ve˘‹<Te°Ca£> c⁄°& 
uns‹ãdTe°Ca£s
 );

8558 
boﬁ
 
m©chTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 );

8560 
íf‹˚NoDu∂iˇãTe°Ca£s
–
°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
fun˘i⁄s
 );

8562 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãrTe°s
–
°d
::ve˘‹<Te°Ca£> c⁄°& 
ã°Ca£s
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 );

8563 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°Ca£sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 );

8565 ˛as†
	cTe°Regi°ry
 : 
public
 
ITe°Ca£Regi°ry
 {

8566 
public
:

8567 
vútuÆ
 ~
Te°Regi°ry
() = ;

8569 
vútuÆ
 
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
 );

8571 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°s
(Ëc⁄° 
ovîride
;

8572 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) c⁄° 
ovîride
;

8574 
	g¥iv©e
:

8575 
°d
::
ve˘‹
<
Te°Ca£
> 
m_fun˘i⁄s
;

8576 
muèbÀ
 
	gRunTe°s
::
InWh©Ordî
 
m_cuºítS‹tOrdî
 = 
RunTe°s
::
InDe˛¨©i⁄Ordî
;

8577 
muèbÀ
 
	g°d
::
ve˘‹
<
Te°Ca£
> 
m_s‹ãdFun˘i⁄s
;

8578 
	g°d
::
size_t
 
m_u¬amedCou¡
 = 0;

8579 
	g°d
::
ios_ba£
::
Inô
 
m_o°ªamInô
;

8584 ˛as†
	cTe°InvokîAsFun˘i⁄
 : 
public
 
ITe°Invokî
 {

8585 (*
m_ã°AsFun˘i⁄
)();

8586 
	gpublic
:

8587 
Te°InvokîAsFun˘i⁄
–(*
ã°AsFun˘i⁄
)(ËË
n€x˚±
;

8589 
övoke
(Ëc⁄° 
	govîride
;

8592 
	g°d
::
°rög
 
exåa˘CœssName
–
SåögRef
 c⁄°& 
˛assOrQuÆifõdMëhodName
 );

8601 
	~<m≠
>

8603 
«me•a˚
 
	gC©ch
 {

8605 ˛as†
	cRï‹ãrRegi°ry
 : 
public
 
IRï‹ãrRegi°ry
 {

8607 
public
:

8609 ~
Rï‹ãrRegi°ry
(Ë
ovîride
;

8611 
ISåómögRï‹ãrPå
 
¸óã
–
°d
::
°rög
 c⁄°& 
«me
, 
IC⁄figPå
 c⁄°& 
c⁄fig
 ) c⁄° 
	govîride
;

8613 
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 );

8614 
ªgi°îLi°íî
–
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 );

8616 
Fa˘‹yM≠
 c⁄°& 
gëFa˘‹õs
(Ëc⁄° 
	govîride
;

8617 
Li°íîs
 c⁄°& 
gëLi°íîs
(Ëc⁄° 
	govîride
;

8619 
	g¥iv©e
:

8620 
Fa˘‹yM≠
 
m_Á˘‹õs
;

8621 
Li°íîs
 
	gm_li°íîs
;

8630 
	~<°rög
>

8632 
«me•a˚
 
	gC©ch
 {

8634 
	sTagAlüs
 {

8635 
TagAlüs
(
°d
::
°rög
 c⁄°& 
_èg
, 
Sour˚LöeInfo
 
_löeInfo
);

8637 
	g°d
::
°rög
 
èg
;

8638 
Sour˚LöeInfo
 
	glöeInfo
;

8644 
	~<m≠
>

8646 
«me•a˚
 
	gC©ch
 {

8648 ˛as†
	cTagAlüsRegi°ry
 : 
public
 
ITagAlüsRegi°ry
 {

8649 
public
:

8650 ~
TagAlüsRegi°ry
(Ë
ovîride
;

8651 
TagAlüs
 c⁄°* 
föd
–
°d
::
°rög
 c⁄°& 
Æüs
 ) c⁄° 
ovîride
;

8652 
	g°d
::
°rög
 
ex∑ndAlü£s
–
°d
::°rög c⁄°& 
u√x∑ndedTe°S≥c
 ) c⁄° 
ovîride
;

8653 
add
–
°d
::
°rög
 c⁄°& 
Æüs
, std::°rög c⁄°& 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 );

8655 
	g¥iv©e
:

8656 
°d
::
m≠
<°d::
°rög
, 
	gTagAlüs
> 
	gm_ªgi°ry
;

8664 
	~<ve˘‹
>

8665 
	~<ex˚±i⁄
>

8667 
«me•a˚
 
	gC©ch
 {

8669 ˛as†
	cSèπupEx˚±i⁄Regi°ry
 {

8670 
	gpublic
:

8671 
add
(
°d
::
ex˚±i⁄_±r
 c⁄°& 
ex˚±i⁄
Ë
n€x˚±
;

8672 
	g°d
::
ve˘‹
<
°d
::
ex˚±i⁄_±r
> c⁄°& 
gëEx˚±i⁄s
(Ëc⁄° 
n€x˚±
;

8673 
	g¥iv©e
:

8674 
°d
::
ve˘‹
<°d::
ex˚±i⁄_±r
> 
m_ex˚±i⁄s
;

8680 
«me•a˚
 
	gC©ch
 {

8682 
	g«me•a˚
 {

8684 
˛ass
 
	gRegi°ryHub
 : 
public
 
IRegi°ryHub
,Öubli¯
	gIMuèbÀRegi°ryHub
,

8685 
¥iv©e
 
	gN⁄C›yabÀ
 {

8687 
	gpublic
:

8688 
Regi°ryHub
() = ;

8689 
IRï‹ãrRegi°ry
 c⁄°& 
gëRï‹ãrRegi°ry
(Ëc⁄° 
	govîride
 {

8690  
	gm_ªp‹ãrRegi°ry
;

8692 
ITe°Ca£Regi°ry
 c⁄°& 
gëTe°Ca£Regi°ry
(Ëc⁄° 
	govîride
 {

8693  
	gm_ã°Ca£Regi°ry
;

8695 
	gIEx˚±i⁄Tøn¶©‹Regi°ry
& 
gëEx˚±i⁄Tøn¶©‹Regi°ry
(Ë
	govîride
 {

8696  
	gm_ex˚±i⁄Tøn¶©‹Regi°ry
;

8698 
ITagAlüsRegi°ry
 c⁄°& 
gëTagAlüsRegi°ry
(Ëc⁄° 
	govîride
 {

8699  
	gm_ègAlüsRegi°ry
;

8701 
SèπupEx˚±i⁄Regi°ry
 c⁄°& 
gëSèπupEx˚±i⁄Regi°ry
(Ëc⁄° 
	govîride
 {

8702  
	gm_ex˚±i⁄Regi°ry
;

8705 
	gpublic
:

8706 
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 ) 
	govîride
 {

8707 
	gm_ªp‹ãrRegi°ry
.
ªgi°îRï‹ãr
–
«me
, 
Á˘‹y
 );

8709 
ªgi°îLi°íî
–
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 ) 
	govîride
 {

8710 
	gm_ªp‹ãrRegi°ry
.
ªgi°îLi°íî
–
Á˘‹y
 );

8712 
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Info
 ) 
	govîride
 {

8713 
	gm_ã°Ca£Regi°ry
.
ªgi°îTe°
–
ã°Info
 );

8715 
ªgi°îTøn¶©‹
–c⁄° 
IEx˚±i⁄Tøn¶©‹
* 
å™¶©‹
 ) 
	govîride
 {

8716 
	gm_ex˚±i⁄Tøn¶©‹Regi°ry
.
ªgi°îTøn¶©‹
–
å™¶©‹
 );

8718 
ªgi°îTagAlüs
–
°d
::
°rög
 c⁄°& 
Æüs
, std::°rög c⁄°& 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 ) 
	govîride
 {

8719 
	gm_ègAlüsRegi°ry
.
add
–
Æüs
, 
èg
, 
löeInfo
 );

8721 
ªgi°îSèπupEx˚±i⁄
(Ë
n€x˚±
 
	govîride
 {

8722 
	gm_ex˚±i⁄Regi°ry
.
add
(
°d
::
cuºít_ex˚±i⁄
());

8725 
	g¥iv©e
:

8726 
Te°Regi°ry
 
m_ã°Ca£Regi°ry
;

8727 
Rï‹ãrRegi°ry
 
	gm_ªp‹ãrRegi°ry
;

8728 
Ex˚±i⁄Tøn¶©‹Regi°ry
 
	gm_ex˚±i⁄Tøn¶©‹Regi°ry
;

8729 
TagAlüsRegi°ry
 
	gm_ègAlüsRegi°ry
;

8730 
SèπupEx˚±i⁄Regi°ry
 
	gm_ex˚±i⁄Regi°ry
;

8734 
	gRegi°ryHub
*& 
gëTheRegi°ryHub
() {

8735 
Regi°ryHub
* 
	gtheRegi°ryHub
 = 
nuŒ±r
;

8736 if–!
	gtheRegi°ryHub
 )

8737 
	gtheRegi°ryHub
 = 
√w
 
Regi°ryHub
();

8738  
	gtheRegi°ryHub
;

8742 
	gIRegi°ryHub
& 
gëRegi°ryHub
() {

8743  *
gëTheRegi°ryHub
();

8745 
	gIMuèbÀRegi°ryHub
& 
gëMuèbÀRegi°ryHub
() {

8746  *
gëTheRegi°ryHub
();

8748 
˛ónUp
() {

8749 
dñëe
 
gëTheRegi°ryHub
();

8750 
gëTheRegi°ryHub
(Ë
nuŒ±r
;

8751 
˛ónUpC⁄ãxt
();

8752 
	gReußbÀSåögSåóm
::
˛ónup
();

8754 
	g°d
::
°rög
 
å™¶©eA˘iveEx˚±i⁄
() {

8755  
gëRegi°ryHub
().
gëEx˚±i⁄Tøn¶©‹Regi°ry
().
å™¶©eA˘iveEx˚±i⁄
();

8762 
«me•a˚
 
	gC©ch
 {

8764 
	gRï‹ãrRegi°ry
::~
Rï‹ãrRegi°ry
() = ;

8766 
ISåómögRï‹ãrPå
 
	gRï‹ãrRegi°ry
::
¸óã
–
°d
::
°rög
 c⁄°& 
«me
, 
IC⁄figPå
 c⁄°& 
c⁄fig
 ) const {

8767 autÿ
	gô
 = 
m_Á˘‹õs
.
föd
–
«me
 );

8768 if–
	gô
 =
m_Á˘‹õs
.
íd
() )

8769  
nuŒ±r
;

8770  
	gô
->
	g£c⁄d
->
¸óã
–
Rï‹ãrC⁄fig
–
c⁄fig
 ) );

8773 
	gRï‹ãrRegi°ry
::
ªgi°îRï‹ãr
–
°d
::
°rög
 c⁄°& 
«me
, 
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 ) {

8774 
	gm_Á˘‹õs
.
em∂a˚
(
«me
, 
Á˘‹y
);

8776 
	gRï‹ãrRegi°ry
::
ªgi°îLi°íî
–
IRï‹ãrFa˘‹yPå
 c⁄°& 
Á˘‹y
 ) {

8777 
m_li°íîs
.
push_back
–
Á˘‹y
 );

8780 
	gIRï‹ãrRegi°ry
::
Fa˘‹yM≠
 c⁄°& 
Rï‹ãrRegi°ry
::
gëFa˘‹õs
() const {

8781  
m_Á˘‹õs
;

8783 
	gIRï‹ãrRegi°ry
::
Li°íîs
 c⁄°& 
Rï‹ãrRegi°ry
::
gëLi°íîs
() const {

8784  
m_li°íîs
;

8791 
«me•a˚
 
	gC©ch
 {

8793 
boﬁ
 
isOk
–
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
 ) {

8794  ( 
ªsu…Ty≥
 & 
Resu…Was
::
FaûuªBô
 ) == 0;

8796 
boﬁ
 
isJu°Info
–
Êags
 ) {

8797  
	gÊags
 =
Resu…Was
::
Info
;

8800 
	gResu…Di•osôi⁄
::
Fœgs
 
›î©‹
 | ( 
Resu…Di•osôi⁄
::Fœg†
lhs
, Resu…Di•osôi⁄::Fœg†
rhs
 ) {

8801  
°©ic_ˇ°
<
Resu…Di•osôi⁄
::
Fœgs
>–°©ic_ˇ°<>–
lhs
 ) | sètic_ˇ°<>–
rhs
 ) );

8804 
boﬁ
 
shouldC⁄töueOnFaûuª
–
Êags
 ) {  ( 
	gÊags
 & 
	gResu…Di•osôi⁄
::
C⁄töueOnFaûuª
 ) != 0; }

8805 
boﬁ
 
shouldSuµªssFaûuª
–
Êags
 ) {  ( 
	gÊags
 & 
	gResu…Di•osôi⁄
::
SuµªssFaû
 ) != 0; }

8811 
	~<ˇs£π
>

8812 
	~<Æg‹ôhm
>

8813 
	~<s°ªam
>

8815 
«me•a˚
 
	gC©ch
 {

8817 
	gRunC⁄ãxt
::
RunC⁄ãxt
(
IC⁄figPå
 c⁄°& 
_c⁄fig
, 
ISåómögRï‹ãrPå
&& 
ªp‹ãr
)

8818 : 
m_runInfo
(
_c⁄fig
->
«me
()),

8819 
m_c⁄ãxt
(
gëCuºítMuèbÀC⁄ãxt
()),

8820 
m_c⁄fig
(
_c⁄fig
),

8821 
m_ªp‹ãr
(
°d
::
move
(
ªp‹ãr
)),

8822 
	gm_œ°As£πi⁄Info
{ 
SåögRef
(), 
Sour˚LöeInfo
("",0), SåögRef(), 
	gResu…Di•osôi⁄
::
N‹mÆ
 },

8823 
m_ö˛udeSuc˚ssfulResu…s
–
m_c⁄fig
->
ö˛udeSuc˚ssfulResu…s
(Ë|| 
m_ªp‹ãr
->
gëPª„ªn˚s
().
shouldRï‹tAŒAs£πi⁄s
 )

8825 
	gm_c⁄ãxt
.
£tRu¬î
(
this
);

8826 
	gm_c⁄ãxt
.
£tC⁄fig
(
m_c⁄fig
);

8827 
	gm_c⁄ãxt
.
£tResu…C≠tuª
(
this
);

8828 
	gm_ªp‹ãr
->
ã°RunSèπög
(
m_runInfo
);

8831 
	gRunC⁄ãxt
::~
RunC⁄ãxt
() {

8832 
m_ªp‹ãr
->
ã°RunEnded
(
Te°RunSèts
(
m_runInfo
, 
m_tŸÆs
, 
ab‹tög
()));

8835 
	gRunC⁄ãxt
::
ã°GroupSèπög
(
°d
::
°rög
 c⁄°& 
ã°S≥c
, std::
size_t
 
groupIndex
, std::size_à
groupsCou¡
) {

8836 
m_ªp‹ãr
->
ã°GroupSèπög
(
GroupInfo
(
ã°S≥c
, 
groupIndex
, 
groupsCou¡
));

8839 
	gRunC⁄ãxt
::
ã°GroupEnded
(
°d
::
°rög
 c⁄°& 
ã°S≥c
, 
TŸÆs
 c⁄°& 
tŸÆs
, std::
size_t
 
groupIndex
, std::size_à
groupsCou¡
) {

8840 
m_ªp‹ãr
->
ã°GroupEnded
(
Te°GroupSèts
(
GroupInfo
(
ã°S≥c
, 
groupIndex
, 
groupsCou¡
), 
tŸÆs
, 
ab‹tög
()));

8843 
TŸÆs
 
	gRunC⁄ãxt
::
runTe°
(
Te°Ca£
 c⁄°& 
ã°Ca£
) {

8844 
TŸÆs
 
¥evTŸÆs
 = 
m_tŸÆs
;

8846 
	g°d
::
°rög
 
ªdúe˘edCout
;

8847 
	g°d
::
°rög
 
ªdúe˘edCîr
;

8849 autÿc⁄°& 
	gã°Info
 = 
ã°Ca£
.
gëTe°Ca£Info
();

8851 
	gm_ªp‹ãr
->
ã°Ca£Sèπög
(
ã°Info
);

8853 
	gm_a˘iveTe°Ca£
 = &
ã°Ca£
;

8855 
	gITøckî
& 
	groŸTøckî
 = 
m_åackîC⁄ãxt
.
°¨tRun
();

8856 
as£π
(
roŸTøckî
.
isSe˘i⁄Tøckî
());

8857 
	g°©ic_ˇ°
<
	gSe˘i⁄Tøckî
&>(
	groŸTøckî
).
addInôülFûãrs
(
m_c⁄fig
->
gëSe˘i⁄sToRun
());

8859 
	gm_åackîC⁄ãxt
.
°¨tCy˛e
();

8860 
	gm_ã°Ca£Tøckî
 = &
Se˘i⁄Tøckî
::
acquúe
(
m_åackîC⁄ãxt
, 
Te°Ca£Tøckög
::
NameAndLoˇti⁄
(
ã°Info
.
«me
,Åe°Info.
löeInfo
));

8861 
runCuºítTe°
(
ªdúe˘edCout
, 
ªdúe˘edCîr
);

8862 } !
	gm_ã°Ca£Tøckî
->
isSuc˚ssfuŒyCom∂ëed
(Ë&& !
ab‹tög
());

8864 
TŸÆs
 
	gdñèTŸÆs
 = 
m_tŸÆs
.
dñè
(
¥evTŸÆs
);

8865 i‡(
	gã°Info
.
ex≥˘edToFaû
(Ë&& 
	gdñèTŸÆs
.
	gã°Ca£s
.
	g∑s£d
 > 0) {

8866 
	gdñèTŸÆs
.
	gas£πi⁄s
.
	gÁûed
++;

8867 
	gdñèTŸÆs
.
	gã°Ca£s
.
	g∑s£d
--;

8868 
	gdñèTŸÆs
.
	gã°Ca£s
.
	gÁûed
++;

8870 
	gm_tŸÆs
.
	gã°Ca£s
 +
dñèTŸÆs
.
ã°Ca£s
;

8871 
	gm_ªp‹ãr
->
ã°Ca£Ended
(
Te°Ca£Sèts
(
ã°Info
,

8872 
dñèTŸÆs
,

8873 
ªdúe˘edCout
,

8874 
ªdúe˘edCîr
,

8875 
ab‹tög
()));

8877 
	gm_a˘iveTe°Ca£
 = 
nuŒ±r
;

8878 
	gm_ã°Ca£Tøckî
 = 
nuŒ±r
;

8880  
	gdñèTŸÆs
;

8883 
IC⁄figPå
 
	gRunC⁄ãxt
::
c⁄fig
() const {

8884  
m_c⁄fig
;

8887 
	gISåómögRï‹ãr
& 
	gRunC⁄ãxt
::
ªp‹ãr
() const {

8888  *
m_ªp‹ãr
;

8891 
	gRunC⁄ãxt
::
as£πi⁄Ended
(
As£πi⁄Resu…
 c⁄° & 
ªsu…
) {

8892 i‡(
ªsu…
.
gëResu…Ty≥
(Ë=
Resu…Was
::
Ok
) {

8893 
m_tŸÆs
.
as£πi⁄s
.
∑s£d
++;

8894 
	gm_œ°As£πi⁄Pas£d
 = 
åue
;

8895 } i‡(!
	gªsu…
.
isOk
()) {

8896 
	gm_œ°As£πi⁄Pas£d
 = 
Ál£
;

8897 if–
	gm_a˘iveTe°Ca£
->
gëTe°Ca£Info
().
okToFaû
() )

8898 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûedButOk
++;

8900 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûed
++;

8903 
	gm_œ°As£πi⁄Pas£d
 = 
åue
;

8908 
	g°©ic_ˇ°
<>(
	gm_ªp‹ãr
->
as£πi⁄Ended
(
As£πi⁄Sèts
(
ªsu…
, 
m_mesßges
, 
m_tŸÆs
)));

8911 
ª£tAs£πi⁄Info
();

8912 
	gm_œ°Resu…
 = 
ªsu…
;

8914 
	gRunC⁄ãxt
::
ª£tAs£πi⁄Info
() {

8915 
m_œ°As£πi⁄Info
.
ma¸oName
 = 
SåögRef
();

8916 
	gm_œ°As£πi⁄Info
.
	gˇ±uªdEx¥essi⁄
 = "{Unknow¿ex¥essi⁄á·îÅhêªp‹ãdÜöe}"
_§
;

8919 
boﬁ
 
	gRunC⁄ãxt
::
£˘i⁄Sèπed
(
Se˘i⁄Info
 c⁄° & 
£˘i⁄Info
, 
Cou¡s
 & 
as£πi⁄s
) {

8920 
	gITøckî
& 
	g£˘i⁄Tøckî
 = 
Se˘i⁄Tøckî
::
acquúe
(
m_åackîC⁄ãxt
, 
Te°Ca£Tøckög
::
NameAndLoˇti⁄
(
£˘i⁄Info
.
«me
, se˘i⁄Info.
löeInfo
));

8921 i‡(!
	g£˘i⁄Tøckî
.
isO≥n
())

8922  
	gÁl£
;

8923 
	gm_a˘iveSe˘i⁄s
.
push_back
(&
£˘i⁄Tøckî
);

8925 
	gm_œ°As£πi⁄Info
.
	glöeInfo
 = 
£˘i⁄Info
.
löeInfo
;

8927 
	gm_ªp‹ãr
->
£˘i⁄Sèπög
(
£˘i⁄Info
);

8929 
	gas£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
;

8931  
	gåue
;

8934 
boﬁ
 
	gRunC⁄ãxt
::
ã°F‹MissögAs£πi⁄s
(
Cou¡s
& 
as£πi⁄s
) {

8935 i‡(
as£πi⁄s
.
tŸÆ
() != 0)

8936  
Ál£
;

8937 i‡(!
	gm_c⁄fig
->
w¨nAboutMissögAs£πi⁄s
())

8938  
	gÁl£
;

8939 i‡(
	gm_åackîC⁄ãxt
.
cuºítTøckî
().
hasChûdªn
())

8940  
	gÁl£
;

8941 
	gm_tŸÆs
.
	gas£πi⁄s
.
	gÁûed
++;

8942 
	gas£πi⁄s
.
	gÁûed
++;

8943  
	gåue
;

8946 
	gRunC⁄ãxt
::
£˘i⁄Ended
(
Se˘i⁄EndInfo
 c⁄° & 
ídInfo
) {

8947 
Cou¡s
 
as£πi⁄s
 = 
m_tŸÆs
.as£πi⁄†- 
ídInfo
.
¥evAs£πi⁄s
;

8948 
boﬁ
 
	gmissögAs£πi⁄s
 = 
ã°F‹MissögAs£πi⁄s
(
as£πi⁄s
);

8950 i‡(!
	gm_a˘iveSe˘i⁄s
.
em±y
()) {

8951 
	gm_a˘iveSe˘i⁄s
.
back
()->
˛o£
();

8952 
	gm_a˘iveSe˘i⁄s
.
p›_back
();

8955 
	gm_ªp‹ãr
->
£˘i⁄Ended
(
Se˘i⁄Sèts
(
ídInfo
.
£˘i⁄Info
, 
as£πi⁄s
,ÉndInfo.
duøti⁄InSec⁄ds
, 
missögAs£πi⁄s
));

8956 
	gm_mesßges
.
˛ór
();

8959 
	gRunC⁄ãxt
::
£˘i⁄EndedE¨ly
(
Se˘i⁄EndInfo
 c⁄° & 
ídInfo
) {

8960 i‡(
m_unföishedSe˘i⁄s
.
em±y
())

8961 
m_a˘iveSe˘i⁄s
.
back
()->
Áû
();

8963 
	gm_a˘iveSe˘i⁄s
.
back
()->
˛o£
();

8964 
	gm_a˘iveSe˘i⁄s
.
p›_back
();

8966 
	gm_unföishedSe˘i⁄s
.
push_back
(
ídInfo
);

8968 
	gRunC⁄ãxt
::
bíchm¨kSèπög
–
Bíchm¨kInfo
 c⁄°& 
öfo
 ) {

8969 
m_ªp‹ãr
->
bíchm¨kSèπög
–
öfo
 );

8971 
	gRunC⁄ãxt
::
bíchm¨kEnded
–
Bíchm¨kSèts
 c⁄°& 
°©s
 ) {

8972 
m_ªp‹ãr
->
bíchm¨kEnded
–
°©s
 );

8975 
	gRunC⁄ãxt
::
pushSc›edMesßge
(
MesßgeInfo
 c⁄° & 
mesßge
) {

8976 
m_mesßges
.
push_back
(
mesßge
);

8979 
	gRunC⁄ãxt
::
p›Sc›edMesßge
(
MesßgeInfo
 c⁄° & 
mesßge
) {

8980 
m_mesßges
.
îa£
(
°d
::
ªmove
(m_mesßges.
begö
(), m_mesßges.
íd
(), 
mesßge
), m_messages.end());

8983 
	g°d
::
°rög
 
RunC⁄ãxt
::
gëCuºítTe°Name
() const {

8984  
m_a˘iveTe°Ca£


8985 ? 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
().
«me


8986 : 
°d
::
°rög
();

8989 c⁄° 
As£πi⁄Resu…
 * 
	gRunC⁄ãxt
::
gëLa°Resu…
() const {

8990  &(*
m_œ°Resu…
);

8993 
	gRunC⁄ãxt
::
ex˚±i⁄E¨lyRï‹ãd
() {

8994 
m_shouldRï‹tU√x≥˘ed
 = 
Ál£
;

8997 
	gRunC⁄ãxt
::
h™dÀF©ÆEº‹C⁄dôi⁄
–
SåögRef
 
mesßge
 ) {

8999 
m_ªp‹ãr
->
ÁèlEº‹Encou¡îed
(
mesßge
);

9003 
As£πi⁄Resu…D©a
 
ãmpResu…
–
Resu…Was
::
F©ÆEº‹C⁄dôi⁄
, { 
Ál£
 } );

9004 
	gãmpResu…
.
	gmesßge
 = 
mesßge
;

9005 
As£πi⁄Resu…
 
ªsu…
(
m_œ°As£πi⁄Info
, 
ãmpResu…
);

9007 
as£πi⁄Ended
(
ªsu…
);

9009 
h™dÀUnföishedSe˘i⁄s
();

9012 autÿc⁄°& 
	gã°Ca£Info
 = 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
();

9013 
Se˘i⁄Info
 
ã°Ca£Se˘i⁄
(
ã°Ca£Info
.
löeInfo
,Åe°Ca£Info.
«me
);

9015 
Cou¡s
 
	gas£πi⁄s
;

9016 
	gas£πi⁄s
.
	gÁûed
 = 1;

9017 
Se˘i⁄Sèts
 
ã°Ca£Se˘i⁄Sèts
(
ã°Ca£Se˘i⁄
, 
as£πi⁄s
, 0, 
Ál£
);

9018 
	gm_ªp‹ãr
->
£˘i⁄Ended
(
ã°Ca£Se˘i⁄Sèts
);

9020 autÿc⁄°& 
	gã°Info
 = 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
();

9022 
TŸÆs
 
	gdñèTŸÆs
;

9023 
	gdñèTŸÆs
.
	gã°Ca£s
.
	gÁûed
 = 1;

9024 
	gdñèTŸÆs
.
	gas£πi⁄s
.
	gÁûed
 = 1;

9025 
	gm_ªp‹ãr
->
ã°Ca£Ended
(
Te°Ca£Sèts
(
ã°Info
,

9026 
dñèTŸÆs
,

9027 
°d
::
°rög
(),

9028 
°d
::
°rög
(),

9029 
Ál£
));

9030 
	gm_tŸÆs
.
	gã°Ca£s
.
	gÁûed
++;

9031 
ã°GroupEnded
(
°d
::
°rög
(), 
m_tŸÆs
, 1, 1);

9032 
	gm_ªp‹ãr
->
ã°RunEnded
(
Te°RunSèts
(
m_runInfo
, 
m_tŸÆs
, 
Ál£
));

9035 
boﬁ
 
	gRunC⁄ãxt
::
œ°As£πi⁄Pas£d
() {

9036  
m_œ°As£πi⁄Pas£d
;

9039 
	gRunC⁄ãxt
::
as£πi⁄Pas£d
() {

9040 
m_œ°As£πi⁄Pas£d
 = 
åue
;

9041 ++
	gm_tŸÆs
.
	gas£πi⁄s
.
	g∑s£d
;

9042 
ª£tAs£πi⁄Info
();

9045 
boﬁ
 
	gRunC⁄ãxt
::
ab‹tög
() const {

9046  
m_tŸÆs
.
as£πi⁄s
.
Áûed
 =
°©ic_ˇ°
<
°d
::
size_t
>(
m_c⁄fig
->
ab‹tA·î
());

9049 
	gRunC⁄ãxt
::
runCuºítTe°
(
°d
::
°rög
 & 
ªdúe˘edCout
, std::°rög & 
ªdúe˘edCîr
) {

9050 autÿc⁄°& 
ã°Ca£Info
 = 
m_a˘iveTe°Ca£
->
gëTe°Ca£Info
();

9051 
Se˘i⁄Info
 
ã°Ca£Se˘i⁄
(
ã°Ca£Info
.
löeInfo
,Åe°Ca£Info.
«me
);

9052 
	gm_ªp‹ãr
->
£˘i⁄Sèπög
(
ã°Ca£Se˘i⁄
);

9053 
Cou¡s
 
	g¥evAs£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
;

9054 
	gduøti⁄
 = 0;

9055 
	gm_shouldRï‹tU√x≥˘ed
 = 
åue
;

9056 
	gm_œ°As£πi⁄Info
 = { "TEST_CASE"
_§
, 
ã°Ca£Info
.
löeInfo
, 
SåögRef
(), 
Resu…Di•osôi⁄
::
N‹mÆ
 };

9058 
£edRng
(*
m_c⁄fig
);

9060 
Timî
 
	gtimî
;

9061 
	gåy
 {

9062 i‡(
	gm_ªp‹ãr
->
gëPª„ªn˚s
().
	gshouldRedúe˘StdOut
) {

9063 #i‡!
deföed
(
CATCH_CONFIG_EXPERIMENTAL_REDIRECT
)

9064 
Redúe˘edStdOut
 
	gªdúe˘edStdOut
;

9065 
Redúe˘edStdEº
 
	gªdúe˘edStdEº
;

9067 
	gtimî
.
°¨t
();

9068 
övokeA˘iveTe°Ca£
();

9069 
	gªdúe˘edCout
 +
ªdúe˘edStdOut
.
°r
();

9070 
	gªdúe˘edCîr
 +
ªdúe˘edStdEº
.
°r
();

9072 
OuçutRedúe˘
 
r
(
ªdúe˘edCout
, 
ªdúe˘edCîr
);

9073 
	gtimî
.
°¨t
();

9074 
övokeA˘iveTe°Ca£
();

9077 
	gtimî
.
°¨t
();

9078 
övokeA˘iveTe°Ca£
();

9080 
	gduøti⁄
 = 
timî
.
gëEœp£dSec⁄ds
();

9081 } 
ˇtch
 (
Te°FaûuªEx˚±i⁄
&) {

9083 } 
ˇtch
 (...) {

9086 if–
	gm_shouldRï‹tU√x≥˘ed
 ) {

9087 
As£πi⁄Ró˘i⁄
 
	gdummyRó˘i⁄
;

9088 
h™dÀU√x≥˘edInÊightEx˚±i⁄
–
m_œ°As£πi⁄Info
, 
å™¶©eA˘iveEx˚±i⁄
(), 
dummyRó˘i⁄
 );

9091 
Cou¡s
 
	gas£πi⁄s
 = 
m_tŸÆs
.
as£πi⁄s
 - 
¥evAs£πi⁄s
;

9092 
boﬁ
 
	gmissögAs£πi⁄s
 = 
ã°F‹MissögAs£πi⁄s
(
as£πi⁄s
);

9094 
	gm_ã°Ca£Tøckî
->
˛o£
();

9095 
h™dÀUnföishedSe˘i⁄s
();

9096 
	gm_mesßges
.
˛ór
();

9098 
Se˘i⁄Sèts
 
ã°Ca£Se˘i⁄Sèts
(
ã°Ca£Se˘i⁄
, 
as£πi⁄s
, 
duøti⁄
, 
missögAs£πi⁄s
);

9099 
	gm_ªp‹ãr
->
£˘i⁄Ended
(
ã°Ca£Se˘i⁄Sèts
);

9102 
	gRunC⁄ãxt
::
övokeA˘iveTe°Ca£
() {

9103 
F©ÆC⁄dôi⁄H™dÀr
 
ÁèlC⁄dôi⁄H™dÀr
;

9104 
	gm_a˘iveTe°Ca£
->
övoke
();

9105 
	gÁèlC⁄dôi⁄H™dÀr
.
ª£t
();

9108 
	gRunC⁄ãxt
::
h™dÀUnföishedSe˘i⁄s
() {

9111 autÿ
ô
 = 
m_unföishedSe˘i⁄s
.
rbegö
(),

9112 
	gôEnd
 = 
m_unföishedSe˘i⁄s
.
ªnd
();

9113 
	gô
 !
ôEnd
;

9114 ++
	gô
)

9115 
£˘i⁄Ended
(*
ô
);

9116 
	gm_unföishedSe˘i⁄s
.
˛ór
();

9119 
	gRunC⁄ãxt
::
h™dÀEx¥
(

9120 
As£πi⁄Info
 c⁄°& 
öfo
,

9121 
ITønsõ¡Ex¥essi⁄
 c⁄°& 
ex¥
,

9122 
As£πi⁄Ró˘i⁄
& 
ªa˘i⁄


9124 
	gm_ªp‹ãr
->
as£πi⁄Sèπög
–
öfo
 );

9126 
boﬁ
 
	g√g©ed
 = 
isFÆ£Te°
–
öfo
.
ªsu…Di•osôi⁄
 );

9127 
boﬁ
 
	gªsu…
 = 
ex¥
.
gëResu…
(Ë!
√g©ed
;

9129 if–
	gªsu…
 ) {

9130 i‡(!
	gm_ö˛udeSuc˚ssfulResu…s
) {

9131 
as£πi⁄Pas£d
();

9134 
ªp‹tEx¥
(
öfo
, 
Resu…Was
::
Ok
, &
ex¥
, 
√g©ed
);

9138 
ªp‹tEx¥
(
öfo
, 
Resu…Was
::
Ex¥essi⁄Faûed
, &
ex¥
, 
√g©ed
 );

9139 
p›uœãRó˘i⁄
–
ªa˘i⁄
 );

9142 
	gRunC⁄ãxt
::
ªp‹tEx¥
(

9143 
As£πi⁄Info
 c⁄° &
öfo
,

9144 
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
,

9145 
ITønsõ¡Ex¥essi⁄
 c⁄° *
ex¥
,

9146 
boﬁ
 
√g©ed
 ) {

9148 
	gm_œ°As£πi⁄Info
 = 
öfo
;

9149 
As£πi⁄Resu…D©a
 
d©a
–
ªsu…Ty≥
, 
LazyEx¥essi⁄
–
√g©ed
 ) );

9151 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
{ 
	göfo
, 
	gd©a
 };

9152 
	gas£πi⁄Resu…
.
	gm_ªsu…D©a
.
	gœzyEx¥essi⁄
.
	gm_å™sõ¡Ex¥essi⁄
 = 
ex¥
;

9154 
as£πi⁄Ended
–
as£πi⁄Resu…
 );

9157 
	gRunC⁄ãxt
::
h™dÀMesßge
(

9158 
As£πi⁄Info
 c⁄°& 
öfo
,

9159 
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
,

9160 
SåögRef
 c⁄°& 
mesßge
,

9161 
As£πi⁄Ró˘i⁄
& 
ªa˘i⁄


9163 
	gm_ªp‹ãr
->
as£πi⁄Sèπög
–
öfo
 );

9165 
	gm_œ°As£πi⁄Info
 = 
öfo
;

9167 
As£πi⁄Resu…D©a
 
d©a
–
ªsu…Ty≥
, 
LazyEx¥essi⁄
–
Ál£
 ) );

9168 
	gd©a
.
	gmesßge
 = 
mesßge
;

9169 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
{ 
	gm_œ°As£πi⁄Info
, 
	gd©a
 };

9170 
as£πi⁄Ended
–
as£πi⁄Resu…
 );

9171 if–!
	gas£πi⁄Resu…
.
isOk
() )

9172 
p›uœãRó˘i⁄
–
ªa˘i⁄
 );

9174 
	gRunC⁄ãxt
::
h™dÀU√x≥˘edEx˚±i⁄NŸThrown
(

9175 
As£πi⁄Info
 c⁄°& 
öfo
,

9176 
As£πi⁄Ró˘i⁄
& 
ªa˘i⁄


9178 
h™dÀN⁄Ex¥
(
öfo
, 
C©ch
::
Resu…Was
::
Did¡ThrowEx˚±i⁄
, 
ªa˘i⁄
);

9181 
	gRunC⁄ãxt
::
h™dÀU√x≥˘edInÊightEx˚±i⁄
(

9182 
As£πi⁄Info
 c⁄°& 
öfo
,

9183 
°d
::
°rög
 c⁄°& 
mesßge
,

9184 
As£πi⁄Ró˘i⁄
& 
ªa˘i⁄


9186 
	gm_œ°As£πi⁄Info
 = 
öfo
;

9188 
As£πi⁄Resu…D©a
 
d©a
–
Resu…Was
::
ThªwEx˚±i⁄
, 
LazyEx¥essi⁄
–
Ál£
 ) );

9189 
	gd©a
.
	gmesßge
 = 
mesßge
;

9190 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
{ 
	göfo
, 
	gd©a
 };

9191 
as£πi⁄Ended
–
as£πi⁄Resu…
 );

9192 
p›uœãRó˘i⁄
–
ªa˘i⁄
 );

9195 
	gRunC⁄ãxt
::
p›uœãRó˘i⁄
–
As£πi⁄Ró˘i⁄
& 
ªa˘i⁄
 ) {

9196 
ªa˘i⁄
.
shouldDebugBªak
 = 
m_c⁄fig
->shouldDebugBreak();

9197 
	gªa˘i⁄
.
	gshouldThrow
 = 
ab‹tög
(Ë|| (
m_œ°As£πi⁄Info
.
ªsu…Di•osôi⁄
 & 
Resu…Di•osôi⁄
::
N‹mÆ
);

9200 
	gRunC⁄ãxt
::
h™dÀIncom∂ëe
(

9201 
As£πi⁄Info
 c⁄°& 
öfo


9203 
m_œ°As£πi⁄Info
 = 
öfo
;

9205 
As£πi⁄Resu…D©a
 
d©a
–
Resu…Was
::
ThªwEx˚±i⁄
, 
LazyEx¥essi⁄
–
Ál£
 ) );

9206 
	gd©a
.
	gmesßge
 = "ExceptionÅranslation was disabled by CATCH_CONFIG_FAST_COMPILE";

9207 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
{ 
	göfo
, 
	gd©a
 };

9208 
as£πi⁄Ended
–
as£πi⁄Resu…
 );

9210 
	gRunC⁄ãxt
::
h™dÀN⁄Ex¥
(

9211 
As£πi⁄Info
 c⁄° &
öfo
,

9212 
Resu…Was
::
OfTy≥
 
ªsu…Ty≥
,

9213 
As£πi⁄Ró˘i⁄
 &
ªa˘i⁄


9215 
	gm_œ°As£πi⁄Info
 = 
öfo
;

9217 
As£πi⁄Resu…D©a
 
d©a
–
ªsu…Ty≥
, 
LazyEx¥essi⁄
–
Ál£
 ) );

9218 
As£πi⁄Resu…
 
	gas£πi⁄Resu…
{ 
	göfo
, 
	gd©a
 };

9219 
as£πi⁄Ended
–
as£πi⁄Resu…
 );

9221 if–!
	gas£πi⁄Resu…
.
isOk
() )

9222 
p›uœãRó˘i⁄
–
ªa˘i⁄
 );

9225 
	gIResu…C≠tuª
& 
gëResu…C≠tuª
() {

9226 i‡◊uto* 
	gˇ±uª
 = 
gëCuºítC⁄ãxt
().
gëResu…C≠tuª
())

9227  *
ˇ±uª
;

9229 
CATCH_INTERNAL_ERROR
("NoÑesult capture instance");

9235 
«me•a˚
 
	gC©ch
 {

9237 
	gSe˘i⁄
::
Se˘i⁄
–
Se˘i⁄Info
 c⁄°& 
öfo
 )

9238 : 
m_öfo
–
öfo
 ),

9239 
m_£˘i⁄In˛uded
–
gëResu…C≠tuª
().
£˘i⁄Sèπed
–
m_öfo
, 
m_as£πi⁄s
 ) )

9241 
	gm_timî
.
°¨t
();

9244 
	gSe˘i⁄
::~
Se˘i⁄
() {

9245 if–
m_£˘i⁄In˛uded
 ) {

9246 
Se˘i⁄EndInfo
 
ídInfo
{ 
m_öfo
, 
	gm_as£πi⁄s
, 
	gm_timî
.
gëEœp£dSec⁄ds
() };

9247 if–
unˇught_ex˚±i⁄s
() )

9248 
gëResu…C≠tuª
().
£˘i⁄EndedE¨ly
–
ídInfo
 );

9250 
gëResu…C≠tuª
().
£˘i⁄Ended
–
ídInfo
 );

9255 
	gSe˘i⁄
::
›î©‹
 
boﬁ
() const {

9256  
m_£˘i⁄In˛uded
;

9263 
«me•a˚
 
	gC©ch
 {

9265 
	gSe˘i⁄Info
::
Se˘i⁄Info


9266 –
Sour˚LöeInfo
 c⁄°& 
_löeInfo
,

9267 
	g°d
::
°rög
 c⁄°& 
_«me
 )

9268 : 
«me
–
_«me
 ),

9269 
löeInfo
–
_löeInfo
 )

9278 
	~<mem‹y
>

9280 
«me•a˚
 
	gC©ch
 {

9282 ˛as†
	cSessi⁄
 : 
N⁄C›yabÀ
 {

9283 
public
:

9285 
Sessi⁄
();

9286 ~
Sessi⁄
(Ë
	govîride
;

9288 
showHñp
() const;

9289 
libIdítify
();

9291 
≠∂yComm™dLöe
–
¨gc
, c⁄° * c⁄° * 
¨gv
 );

9293 
u£C⁄figD©a
–
C⁄figD©a
 c⁄°& 
c⁄figD©a
 );

9295 
run
–
¨gc
, * 
¨gv
[] );

9296 #i‡
deföed
(
CATCH_CONFIG_WCHAR
Ë&& deföed(
WIN32
Ë&& deföed(
UNICODE
)

9297 
run
–
¨gc
, 
wch¨_t
* c⁄° 
¨gv
[] );

9299 
run
();

9301 
	g˛¨a
::
P¨£r
 c⁄°& 
˛i
() const;

9302 
˛i
–
˛¨a
::
P¨£r
 c⁄°& 
√wP¨£r
 );

9303 
	gC⁄figD©a
& 
c⁄figD©a
();

9304 
	gC⁄fig
& 
c⁄fig
();

9305 
	g¥iv©e
:

9306 
runI¡î«l
();

9308 
	g˛¨a
::
P¨£r
 
m_˛i
;

9309 
C⁄figD©a
 
	gm_c⁄figD©a
;

9310 
	g°d
::
sh¨ed_±r
<
C⁄fig
> 
m_c⁄fig
;

9311 
boﬁ
 
	gm_°¨tupEx˚±i⁄s
 = 
Ál£
;

9319 
	~<iosfwd
>

9321 
«me•a˚
 
	gC©ch
 {

9324 
	sVîsi⁄
 {

9325 
Vîsi⁄
–Vîsi⁄ c⁄°& ) = 
dñëe
;

9326 
	gVîsi⁄
& 
	g›î©‹
=–
Vîsi⁄
 c⁄°& ) = 
dñëe
;

9327 
Vîsi⁄
–
_maj‹Vîsi⁄
,

9328 
_mö‹Vîsi⁄
,

9329 
_∑tchNumbî
,

9330 c⁄° * c⁄° 
_bønchName
,

9331 
_buûdNumbî
 );

9333 c⁄° 
	gmaj‹Vîsi⁄
;

9334 c⁄° 
	gmö‹Vîsi⁄
;

9335 c⁄° 
	g∑tchNumbî
;

9338 c⁄° * c⁄° 
	gbønchName
;

9339 c⁄° 
	gbuûdNumbî
;

9341 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Vîsi⁄
 c⁄°& 
	gvîsi⁄
 );

9344 
Vîsi⁄
 c⁄°& 
libøryVîsi⁄
();

9348 
	~<c°dlib
>

9349 
	~<iom™ù
>

9351 
«me•a˚
 
	gC©ch
 {

9353 
	g«me•a˚
 {

9354 c⁄° 
	gMaxExôCode
 = 255;

9356 
ISåómögRï‹ãrPå
 
¸óãRï‹ãr
(
°d
::
°rög
 c⁄°& 
ªp‹ãrName
, 
IC⁄figPå
 c⁄°& 
c⁄fig
) {

9357 autÿ
	gªp‹ãr
 = 
C©ch
::
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
¸óã
(
ªp‹ãrName
, 
c⁄fig
);

9358 
CATCH_ENFORCE
(
ªp‹ãr
, "Nÿªp‹ã∏ªgi°îed wôhÇame: '" << 
ªp‹ãrName
 << "'");

9360  
	gªp‹ãr
;

9363 
ISåómögRï‹ãrPå
 
makeRï‹ãr
(
°d
::
sh¨ed_±r
<
C⁄fig
> c⁄°& 
c⁄fig
) {

9364 i‡(
C©ch
::
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
gëLi°íîs
().
em±y
()) {

9365  
¸óãRï‹ãr
(
c⁄fig
->
gëRï‹ãrName
(), config);

9368 autÿ
	gmu…i
 = 
°d
::
unique_±r
<
Li°íögRï‹ãr
>(
√w
 ListeningReporter);

9370 autÿc⁄°& 
	gli°íîs
 = 
C©ch
::
gëRegi°ryHub
().
gëRï‹ãrRegi°ry
().
gëLi°íîs
();

9371 autÿc⁄°& 
	gli°íî
 : 
li°íîs
) {

9372 
mu…i
->
addLi°íî
(
li°íî
->
¸óã
(
C©ch
::
Rï‹ãrC⁄fig
(
c⁄fig
)));

9374 
	gmu…i
->
addRï‹ãr
(
¸óãRï‹ãr
(
c⁄fig
->
gëRï‹ãrName
(), config));

9375  
	g°d
::
move
(
mu…i
);

9378 
	gC©ch
::
TŸÆs
 
runTe°s
(
°d
::
sh¨ed_±r
<
C⁄fig
> c⁄°& 
c⁄fig
) {

9381 autÿ
ªp‹ãr
 = 
makeRï‹ãr
(
c⁄fig
);

9383 
RunC⁄ãxt
 
c⁄ãxt
(
c⁄fig
, 
°d
::
move
(
ªp‹ãr
));

9385 
TŸÆs
 
	gtŸÆs
;

9387 
	gc⁄ãxt
.
ã°GroupSèπög
(
c⁄fig
->
«me
(), 1, 1);

9389 
Te°S≥c
 
	gã°S≥c
 = 
c⁄fig
->
ã°S≥c
();

9391 autÿc⁄°& 
	gÆlTe°Ca£s
 = 
gëAŒTe°Ca£sS‹ãd
(*
c⁄fig
);

9392 autÿc⁄°& 
	gã°Ca£
 : 
ÆlTe°Ca£s
) {

9393 i‡(!
c⁄ãxt
.
ab‹tög
(Ë&& 
m©chTe°
(
ã°Ca£
, 
ã°S≥c
, *
c⁄fig
))

9394 
	gtŸÆs
 +
c⁄ãxt
.
runTe°
(
ã°Ca£
);

9396 
	gc⁄ãxt
.
ªp‹ãr
().
skùTe°
(
ã°Ca£
);

9399 i‡(
	gc⁄fig
->
w¨nAboutNoTe°s
(Ë&& 
	gtŸÆs
.
	gã°Ca£s
.
tŸÆ
() == 0) {

9400 
ReußbÀSåögSåóm
 
ã°C⁄fig
;

9402 
boﬁ
 
	gfú°
 = 
åue
;

9403 c⁄°áuto& 
	göput
 : 
c⁄fig
->
gëTe°sOrTags
()) {

9404 i‡(!
fú°
Ë{ 
ã°C⁄fig
 << ' '; }

9405 
	gfú°
 = 
Ál£
;

9406 
	gã°C⁄fig
 << 
	göput
;

9409 
	gc⁄ãxt
.
ªp‹ãr
().
noM©chögTe°Ca£s
(
ã°C⁄fig
.
°r
());

9410 
	gtŸÆs
.
	gîr‹
 = -1;

9413 
	gc⁄ãxt
.
ã°GroupEnded
(
c⁄fig
->
«me
(), 
tŸÆs
, 1, 1);

9414  
	gtŸÆs
;

9417 
≠∂yFûíamesAsTags
(
C©ch
::
IC⁄fig
 c⁄°& 
c⁄fig
) {

9418 auto& 
ã°s
 = 
c⁄°_ˇ°
<
°d
::
ve˘‹
<
Te°Ca£
>&>(
gëAŒTe°Ca£sS‹ãd
(
c⁄fig
));

9419 auto& 
	gã°Ca£
 : 
ã°s
) {

9420 autÿ
ègs
 = 
ã°Ca£
.tags;

9422 
	g°d
::
°rög
 
fûíame
 = 
ã°Ca£
.
löeInfo
.
fûe
;

9423 autÿ
	gœ°Sœsh
 = 
fûíame
.
föd_œ°_of
("\\/");

9424 i‡(
	gœ°Sœsh
 !
°d
::
°rög
::
≈os
) {

9425 
fûíame
.
îa£
(0, 
œ°Sœsh
);

9426 
	gfûíame
[0] = '#';

9429 autÿ
	gœ°DŸ
 = 
fûíame
.
föd_œ°_of
('.');

9430 i‡(
	gœ°DŸ
 !
°d
::
°rög
::
≈os
) {

9431 
fûíame
.
îa£
(
œ°DŸ
);

9434 
	gègs
.
push_back
(
°d
::
move
(
fûíame
));

9435 
£tTags
(
ã°Ca£
, 
ègs
);

9441 
	gSessi⁄
::
Sessi⁄
() {

9442 
boﬁ
 
ÆªadyIn°™tüãd
 = 
Ál£
;

9443 if–
	gÆªadyIn°™tüãd
 ) {

9444 
	gåy
 { 
CATCH_INTERNAL_ERROR
( "Only one instance of Catch::Session canÉver be used" ); }

9445 
ˇtch
(...Ë{ 
gëMuèbÀRegi°ryHub
().
ªgi°îSèπupEx˚±i⁄
(); }

9448 c⁄°áuto& 
	gex˚±i⁄s
 = 
gëRegi°ryHub
().
gëSèπupEx˚±i⁄Regi°ry
().
gëEx˚±i⁄s
();

9449 i‡–!
	gex˚±i⁄s
.
em±y
() ) {

9450 
	gm_°¨tupEx˚±i⁄s
 = 
åue
;

9451 
Cﬁour
 
cﬁourGu¨d
–Cﬁour::
Red
 );

9452 
	gC©ch
::
˚º
() << "Errors occurred during startup!" << '\n';

9454  c⁄°áuto& 
	gex_±r
 : 
ex˚±i⁄s
 ) {

9455 
åy
 {

9456 
°d
::
ªthrow_ex˚±i⁄
(
ex_±r
);

9457 } 
ˇtch
 ( 
°d
::
ex˚±i⁄
 c⁄°& 
ex
 ) {

9458 
C©ch
::
˚º
(Ë<< 
Cﬁumn
–
ex
.
wh©
(Ë).
ödít
(2) << '\n';

9463 
	gÆªadyIn°™tüãd
 = 
åue
;

9464 
	gm_˛i
 = 
makeComm™dLöeP¨£r
–
m_c⁄figD©a
 );

9466 
	gSessi⁄
::~
Sessi⁄
() {

9467 
C©ch
::
˛ónUp
();

9470 
	gSessi⁄
::
showHñp
() const {

9471 
C©ch
::
cout
()

9472 << "\nC©ch v" << 
libøryVîsi⁄
() << "\n"

9473 << 
m_˛i
 << 
°d
::
ídl


9474 << "F‹ m‹êdëaûed ußgê∂ó£ sìÅhê¥oje˘ docs\n" << 
°d
::
ídl
;

9476 
	gSessi⁄
::
libIdítify
() {

9477 
C©ch
::
cout
()

9478 << 
°d
::
À·
 << std::
£tw
(16) << "description: " << "A CatchÅestÉxecutable\n"

9479 << 
°d
::
À·
 << std::
£tw
(16) << "category: " << "testframework\n"

9480 << 
°d
::
À·
 << std::
£tw
(16) << "framework: " << "Catch Test\n"

9481 << 
°d
::
À·
 << std::
£tw
(16Ë<< "vîsi⁄: " << 
libøryVîsi⁄
(Ë<< std::
ídl
;

9484 
	gSessi⁄
::
≠∂yComm™dLöe
–
¨gc
, c⁄° * c⁄° * 
¨gv
 ) {

9485 if–
	gm_°¨tupEx˚±i⁄s
 )

9488 autÿ
	gªsu…
 = 
m_˛i
.
∑r£
–
˛¨a
::
Args
–
¨gc
, 
¨gv
 ) );

9489 if–!
	gªsu…
 ) {

9490 
	gC©ch
::
˚º
()

9491 << 
Cﬁour
–Cﬁour::
Red
 )

9493 << 
Cﬁumn
–
ªsu…
.
îr‹Mesßge
(Ë).
ödít
( 2 )

9495 
	gC©ch
::
˚º
(Ë<< "Ru¿wôh -? f‹ ußge\n" << 
°d
::
ídl
;

9496  
	gMaxExôCode
;

9499 if–
	gm_c⁄figD©a
.
	gshowHñp
 )

9500 
showHñp
();

9501 if–
	gm_c⁄figD©a
.
	glibIdítify
 )

9502 
libIdítify
();

9503 
	gm_c⁄fig
.
ª£t
();

9507 
	gSessi⁄
::
u£C⁄figD©a
–
C⁄figD©a
 c⁄°& 
c⁄figD©a
 ) {

9508 
m_c⁄figD©a
 = 
c⁄figD©a
;

9509 
	gm_c⁄fig
.
ª£t
();

9512 
	gSessi⁄
::
run
–
¨gc
, * 
¨gv
[] ) {

9513 if–
	gm_°¨tupEx˚±i⁄s
 )

9515 
	gªtu∫Code
 = 
≠∂yComm™dLöe
–
¨gc
, 
¨gv
 );

9516 if–
	gªtu∫Code
 == 0 )

9517 
ªtu∫Code
 = 
run
();

9518  
	gªtu∫Code
;

9521 #i‡
deföed
(
CATCH_CONFIG_WCHAR
Ë&& deföed(
WIN32
Ë&& deföed(
UNICODE
)

9522 
	gSessi⁄
::
run
–
¨gc
, 
wch¨_t
* c⁄° 
¨gv
[] ) {

9524 **
	gutf8Argv
 = 
√w
 *[ 
¨gc
 ];

9526  
	gi
 = 0; i < 
	g¨gc
; ++i ) {

9527 
	gbufSize
 = 
WideCh¨ToMu…iByã
–
CP_UTF8
, 0, 
¨gv
[
i
], -1, 
NULL
, 0, NULL, NULL );

9529 
	gutf8Argv
[ 
i
 ] = 
√w
 [ 
bufSize
 ];

9531 
WideCh¨ToMu…iByã
–
CP_UTF8
, 0, 
¨gv
[
i
], -1, 
utf8Argv
[i], 
bufSize
, 
NULL
, NULL );

9534 
	gªtu∫Code
 = 
run
–
¨gc
, 
utf8Argv
 );

9536  
	gi
 = 0; i < 
	g¨gc
; ++i )

9537 
	gdñëe
 [] 
	gutf8Argv
[ 
i
 ];

9539 
	gdñëe
 [] 
	gutf8Argv
;

9541  
	gªtu∫Code
;

9544 
	gSessi⁄
::
run
() {

9545 if––
m_c⁄figD©a
.
waôF‹Key¥ess
 & 
WaôF‹Key¥ess
::
Bef‹eSèπ
 ) != 0 ) {

9546 
C©ch
::
cout
(Ë<< "...waôög f‹É¡î/Ñëu∫ bef‹ê°¨tög" << 
°d
::
ídl
;

9547 
	g°©ic_ˇ°
<>(
	g°d
::
gëch¨
());

9549 
	gexôCode
 = 
runI¡î«l
();

9550 if––
	gm_c⁄figD©a
.
	gwaôF‹Key¥ess
 & 
	gWaôF‹Key¥ess
::
Bef‹eExô
 ) != 0 ) {

9551 
C©ch
::
cout
(Ë<< "...waôög f‹É¡î/Ñëu∫ bef‹êexôög, wôh code: " << 
exôCode
 << 
°d
::
ídl
;

9552 
	g°©ic_ˇ°
<>(
	g°d
::
gëch¨
());

9554  
	gexôCode
;

9557 
	g˛¨a
::
P¨£r
 c⁄°& 
Sessi⁄
::
˛i
() const {

9558  
m_˛i
;

9560 
	gSessi⁄
::
˛i
–
˛¨a
::
P¨£r
 c⁄°& 
√wP¨£r
 ) {

9561 
m_˛i
 = 
√wP¨£r
;

9563 
	gC⁄figD©a
& 
	gSessi⁄
::
c⁄figD©a
() {

9564  
m_c⁄figD©a
;

9566 
	gC⁄fig
& 
	gSessi⁄
::
c⁄fig
() {

9567 if–!
m_c⁄fig
 )

9568 
m_c⁄fig
 = 
°d
::
make_sh¨ed
<
C⁄fig
>–
m_c⁄figD©a
 );

9569  *
	gm_c⁄fig
;

9572 
	gSessi⁄
::
runI¡î«l
() {

9573 if–
m_°¨tupEx˚±i⁄s
 )

9576 if–
	gm_c⁄figD©a
.
	gshowHñp
 || m_c⁄figD©a.
	glibIdítify
 )

9579 
	gåy


9581 
c⁄fig
();

9583 
£edRng
–*
m_c⁄fig
 );

9585 if–
	gm_c⁄figD©a
.
	gfûíamesAsTags
 )

9586 
≠∂yFûíamesAsTags
–*
m_c⁄fig
 );

9589 if–
	gO±i⁄
<
	g°d
::
size_t
> 
li°ed
 = 
li°
–
c⁄fig
() ) )

9590  
°©ic_ˇ°
<>–*
li°ed
 );

9592 autÿ
	gtŸÆs
 = 
runTe°s
–
m_c⁄fig
 );

9596  (
	g°d
::
mö
Ë(
MaxExôCode
, (°d::
max
Ë(
tŸÆs
.
îr‹
, 
	g°©ic_ˇ°
<>(
	gtŸÆs
.
	gas£πi⁄s
.
	gÁûed
)));

9598 
ˇtch
–
°d
::
ex˚±i⁄
& 
ex
 ) {

9599 
C©ch
::
˚º
(Ë<< 
ex
.
wh©
(Ë<< 
°d
::
ídl
;

9600  
	gMaxExôCode
;

9608 
«me•a˚
 
	gC©ch
 {

9609 
	gSèπupEx˚±i⁄Regi°ry
::
add
–
°d
::
ex˚±i⁄_±r
 c⁄°& 
ex˚±i⁄
 ) 
n€x˚±
 {

9610 
åy
 {

9611 
m_ex˚±i⁄s
.
push_back
(
ex˚±i⁄
);

9613 
ˇtch
(...) {

9615 
	g°d
::
ãrmö©e
();

9619 
	g°d
::
ve˘‹
<
°d
::
ex˚±i⁄_±r
> c⁄°& 
SèπupEx˚±i⁄Regi°ry
::
gëEx˚±i⁄s
(Ëc⁄° 
n€x˚±
 {

9620  
m_ex˚±i⁄s
;

9627 
	~<c°dio
>

9628 
	~<io°ªam
>

9629 
	~<f°ªam
>

9630 
	~<s°ªam
>

9631 
	~<ve˘‹
>

9632 
	~<mem‹y
>

9634 #i‡
deföed
(
__˛™g__
)

9635 #¥agm®
˛™g
 
dügno°ic
 
push


9636 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wexit-time-destructors"

9639 
«me•a˚
 
	gC©ch
 {

9641 
	gC©ch
::
ISåóm
::~IStream() = ;

9643 
«me•a˚
 
	gdëaû
 { 
	g«me•a˚
 {

9644 
	gãm∂©e
<
ty≥«me
 
	gWrôîF
, 
	g°d
::
size_t
 
buf„rSize
=256>

9645 ˛as†
	cSåómBufIm∂
 : 
public
 
°d
::
°ªambuf
 {

9646 
d©a
[
buf„rSize
];

9647 
WrôîF
 
	gm_wrôî
;

9649 
	gpublic
:

9650 
SåómBufIm∂
() {

9651 
£ç
–
d©a
, data + (data) );

9654 ~
SåómBufIm∂
(Ë
	gn€x˚±
 {

9655 
	gSåómBufIm∂
::
sync
();

9658 
	g¥iv©e
:

9659 
ovîÊow
–
c
 ) 
ovîride
 {

9660 
sync
();

9662 if–
	gc
 !
EOF
 ) {

9663 if–
pba£
(Ë=
ï±r
() )

9664 
m_wrôî
–
°d
::
°rög
–1, 
°©ic_ˇ°
<>–
c
 ) ) );

9666 
•utc
–
°©ic_ˇ°
<>–
c
 ) );

9671 
sync
(Ë
	govîride
 {

9672 if–
pba£
(Ë!
µå
() ) {

9673 
m_wrôî
–
°d
::
°rög
–
pba£
(), 
°©ic_ˇ°
<°d::°rög::
size_ty≥
>–
µå
() -Öbase() ) ) );

9674 
£ç
–
pba£
(), 
ï±r
() );

9682 
	sOuçutDebugWrôî
 {

9684 
›î©‹
()–
	g°d
::
°rög
 c⁄°&
°r
 ) {

9685 
wrôeToDebugC⁄sﬁe
–
°r
 );

9691 ˛as†
	cFûeSåóm
 : 
public
 
ISåóm
 {

9692 
muèbÀ
 
°d
::
of°ªam
 
m_ofs
;

9693 
	gpublic
:

9694 
FûeSåóm
–
SåögRef
 
fûíame
 ) {

9695 
m_ofs
.
›í
–
fûíame
.
c_°r
() );

9696 
CATCH_ENFORCE
–!
m_ofs
.
Áû
(), "U«bÀÅÿ›í fûe: '" << 
fûíame
 << "'" );

9698 ~
FûeSåóm
(Ë
	govîride
 = ;

9699 
	gpublic
:

9700 
°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
ovîride
 {

9701  
m_ofs
;

9707 ˛as†
	cCoutSåóm
 : 
public
 
ISåóm
 {

9708 
muèbÀ
 
°d
::
o°ªam
 
m_os
;

9709 
	gpublic
:

9712 
CoutSåóm
(Ë: 
m_os
–
C©ch
::
cout
().
rdbuf
() ) {}

9713 ~
CoutSåóm
(Ë
ovîride
 = ;

9715 
	gpublic
:

9716 
°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
ovîride
 {  
m_os
; }

9721 ˛as†
	cDebugOutSåóm
 : 
public
 
ISåóm
 {

9722 
°d
::
unique_±r
<
SåómBufIm∂
<
OuçutDebugWrôî
>> 
m_°ªamBuf
;

9723 
muèbÀ
 
	g°d
::
o°ªam
 
m_os
;

9724 
	gpublic
:

9725 
DebugOutSåóm
()

9726 : 
m_°ªamBuf
–
√w
 
SåómBufIm∂
<
OuçutDebugWrôî
>() ),

9727 
m_os
–
m_°ªamBuf
.
gë
() )

9730 ~
DebugOutSåóm
(Ë
	govîride
 = ;

9732 
	gpublic
:

9733 
°d
::
o°ªam
& 
°ªam
(Ëc⁄° 
ovîride
 {  
m_os
; }

9740 autÿ
makeSåóm
–
SåögRef
 c⁄° &
fûíame
 ) -> 
ISåóm
 const* {

9741 if–
	gfûíame
.
em±y
() )

9742  
√w
 
	gdëaû
::
CoutSåóm
();

9743 if–
	gfûíame
[0] == '%' ) {

9744 if–
fûíame
 == "%debug" )

9745  
√w
 
dëaû
::
DebugOutSåóm
();

9747 
CATCH_ERROR
–"Uƒecogni£d såóm: '" << 
fûíame
 << "'" );

9750  
√w
 
	gdëaû
::
FûeSåóm
–
fûíame
 );

9754 
	sSåögSåóms
 {

9755 
	g°d
::
ve˘‹
<
°d
::
unique_±r
<°d::
o°rög°ªam
>> 
m_°ªams
;

9756 
	g°d
::
ve˘‹
<
°d
::
size_t
> 
m_unu£d
;

9757 
	g°d
::
o°rög°ªam
 
m_ª„ªn˚Såóm
;

9758 
SåögSåóms
* 
	gs_ö°™˚
;

9760 autÿ
add
(Ë-> 
	g°d
::
size_t
 {

9761 if–
m_unu£d
.
em±y
() ) {

9762 
m_°ªams
.
push_back
–
°d
::
unique_±r
<°d::
o°rög°ªam
>–
√w
 std::ostringstream ) );

9763  
	gm_°ªams
.
size
()-1;

9766 autÿ
	gödex
 = 
m_unu£d
.
back
();

9767 
	gm_unu£d
.
p›_back
();

9768  
	gödex
;

9772 
ªÀa£
–
°d
::
size_t
 
ödex
 ) {

9773 
m_°ªams
[
ödex
]->
c›yfmt
–
m_ª„ªn˚Såóm
 );

9774 
	gm_unu£d
.
push_back
(
ödex
);

9778 autÿ
ö°™˚
(Ë-> 
	gSåögSåóms
& {

9779 if–!
	gs_ö°™˚
 )

9780 
	gs_ö°™˚
 = 
√w
 
SåögSåóms
();

9781  *
	gs_ö°™˚
;

9783 
˛ónup
() {

9784 
dñëe
 
	gs_ö°™˚
;

9785 
	gs_ö°™˚
 = 
nuŒ±r
;

9789 
SåögSåóms
* 
	gSåögSåóms
::
s_ö°™˚
 = 
nuŒ±r
;

9791 
	gReußbÀSåögSåóm
::
	$˛ónup
() {

9792 
SåögSåóms
::
	`˛ónup
();

9793 
	}
}

9795 
	gReußbÀSåögSåóm
::
	$ReußbÀSåögSåóm
()

9796 : 
	`m_ödex
–
SåögSåóms
::
	`ö°™˚
().
	`add
() ),

9797 
	`m_oss
–
SåögSåóms
::
	`ö°™˚
().
m_°ªams
[
m_ödex
].
	$gë
() )

9798 {
	}
}

9800 
ReußbÀSåögSåóm
::~
	$ReußbÀSåögSåóm
() {

9801 
°©ic_ˇ°
<
°d
::
o°rög°ªam
*>–
m_oss
 )->
	`°r
("");

9802 
m_oss
->
	`˛ór
();

9803 
SåögSåóms
::
	`ö°™˚
().
	`ªÀa£
–
m_ödex
 );

9804 
	}
}

9806 autÿ
	gReußbÀSåögSåóm
::
	$°r
(Ëc⁄° -> 
°d
::
°rög
 {

9807  
°©ic_ˇ°
<
°d
::
o°rög°ªam
*>–
m_oss
 )->
	`°r
();

9808 
	}
}

9812 #i‚de‡
CATCH_CONFIG_NOSTDOUT


9813 
	g°d
::
o°ªam
& 
	$cout
(Ë{  
°d
::
cout
; 
	}
}

9814 
	g°d
::
o°ªam
& 
	$˚º
(Ë{  
°d
::
˚º
; 
	}
}

9815 
	g°d
::
o°ªam
& 
	$˛og
(Ë{  
°d
::
˛og
; 
	}
}

9819 #i‡
deföed
(
__˛™g__
)

9820 #¥agm®
˛™g
 
dügno°ic
 
p›


9825 
	~<Æg‹ôhm
>

9826 
	~<o°ªam
>

9827 
	~<c°rög
>

9828 
	~<c˘y≥
>

9830 
«me•a˚
 
	gC©ch
 {

9832 
	g«me•a˚
 {

9833 
toLowîCh
(
c
) {

9834  
	g°©ic_ˇ°
<>–
	g°d
::
tﬁowî
–
c
 ) );

9838 
boﬁ
 
°¨tsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
¥efix
 ) {

9839  
s
.
size
(Ë>
¥efix
.size(Ë&& 
°d
::
equÆ
’ªfix.
begö
(),Öªfix.
íd
(), s.begin());

9841 
boﬁ
 
°¨tsWôh
–
°d
::
°rög
 c⁄°& 
s
, 
¥efix
 ) {

9842  !
	gs
.
em±y
(Ë&& s[0] =
¥efix
;

9844 
boﬁ
 
ídsWôh
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
suffix
 ) {

9845  
s
.
size
(Ë>
suffix
.size(Ë&& 
°d
::
equÆ
(suffix.
rbegö
(), suffix.
ªnd
(), s.rbegin());

9847 
boﬁ
 
ídsWôh
–
°d
::
°rög
 c⁄°& 
s
, 
suffix
 ) {

9848  !
	gs
.
em±y
(Ë&& s[
s
.
size
()-1] =
suffix
;

9850 
boﬁ
 
c⁄èös
–
°d
::
°rög
 c⁄°& 
s
, std::°rög c⁄°& 
öfix
 ) {

9851  
s
.
föd
–
öfix
 ) !
°d
::
°rög
::
≈os
;

9853 
toLowîInPœ˚
–
°d
::
°rög
& 
s
 ) {

9854 
°d
::
å™sf‹m
–
s
.
begö
(), s.
íd
(), s.begö(), 
toLowîCh
 );

9856 
	g°d
::
°rög
 
toLowî
–
°d
::°rög c⁄°& 
s
 ) {

9857 
°d
::
°rög
 
lc
 = 
s
;

9858 
toLowîInPœ˚
–
lc
 );

9859  
	glc
;

9861 
	g°d
::
°rög
 
åim
–
°d
::°rög c⁄°& 
°r
 ) {

9862 c⁄°* 
whôe•a˚Ch¨s
 = "\n\r\t ";

9863 
	g°d
::
°rög
::
size_ty≥
 
°¨t
 = 
°r
.
föd_fú°_nŸ_of
–
whôe•a˚Ch¨s
 );

9864 
	g°d
::
°rög
::
size_ty≥
 
íd
 = 
°r
.
föd_œ°_nŸ_of
–
whôe•a˚Ch¨s
 );

9866  
	g°¨t
 !
°d
::
°rög
::
≈os
 ? 
°r
.
sub°r
–
°¨t
, 1+
íd
-start ) : std::string();

9869 
boﬁ
 
ª∂a˚InPœ˚
–
°d
::
°rög
& 
°r
, std::°rög c⁄°& 
ª∂a˚This
, std::°rög c⁄°& 
wôhThis
 ) {

9870 
boﬁ
 
ª∂a˚d
 = 
Ál£
;

9871 
	g°d
::
size_t
 
i
 = 
°r
.
föd
–
ª∂a˚This
 );

9872  
	gi
 !
°d
::
°rög
::
≈os
 ) {

9873 
ª∂a˚d
 = 
åue
;

9874 
	g°r
 = 
°r
.
sub°r
–0, 
i
 ) + 
	gwôhThis
 + så.sub°r–i+
ª∂a˚This
.
size
() );

9875 if–
	gi
 < 
	g°r
.
size
()-
	gwôhThis
.size() )

9876 
	gi
 = 
°r
.
föd
–
ª∂a˚This
, 
i
+
wôhThis
.
size
() );

9878 
	gi
 = 
°d
::
°rög
::
≈os
;

9880  
	gª∂a˚d
;

9883 
	g∂uøli£
::
∂uøli£
–
°d
::
size_t
 
cou¡
, std::
°rög
 c⁄°& 
œbñ
 )

9884 : 
m_cou¡
–
cou¡
 ),

9885 
m_œbñ
–
œbñ
 )

9888 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
∂uøli£
 c⁄°& 
	g∂uøli£r
 ) {

9889 
	gos
 << 
	g∂uøli£r
.
	gm_cou¡
 << ' ' <<Öluøli£r.
	gm_œbñ
;

9890 if–
	g∂uøli£r
.
	gm_cou¡
 != 1 )

9891 
os
 << 's';

9892  
	gos
;

9899 #i‡
deföed
(
__˛™g__
)

9900 #¥agm®
˛™g
 
dügno°ic
 
push


9901 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wexit-time-destructors"

9904 
	~<o°ªam
>

9905 
	~<c°rög
>

9906 
	~<c°döt
>

9908 
	g«me•a˚
 {

9909 c⁄° 
uöt32_t
 
	gbyã_2_Àad
 = 0xC0;

9910 c⁄° 
uöt32_t
 
	gbyã_3_Àad
 = 0xE0;

9911 c⁄° 
uöt32_t
 
	gbyã_4_Àad
 = 0xF0;

9914 
«me•a˚
 
	gC©ch
 {

9915 
	gSåögRef
::
SåögRef
–c⁄°* 
øwCh¨s
 ) 
n€x˚±


9916 : 
SåögRef
–
øwCh¨s
, 
°©ic_ˇ°
<SåögRef::
size_ty≥
>(
°d
::
°æí
(rawChars) ) )

9919 
SåögRef
::
›î©‹
 
°d
::
°rög
() const {

9920  
°d
::
°rög
–
m_°¨t
, 
m_size
 );

9923 
	gSåögRef
::
sw≠
–
SåögRef
& 
Ÿhî
 ) 
n€x˚±
 {

9924 
°d
::
sw≠
–
m_°¨t
, 
Ÿhî
.m_start );

9925 
	g°d
::
sw≠
–
m_size
, 
Ÿhî
.m_size );

9926 
	g°d
::
sw≠
–
m_d©a
, 
Ÿhî
.m_data );

9929 autÿ
	gSåögRef
::
c_°r
() const -> const* {

9930 if–
isSub°rög
() )

9931 
c⁄°_ˇ°
<
SåögRef
*>–
this
 )->
èkeOw√rshù
();

9932  
	gm_°¨t
;

9934 autÿ
	gSåögRef
::
cuºítD©a
(Ëc⁄° 
n€x˚±
 -> const* {

9935  
m_°¨t
;

9938 autÿ
	gSåögRef
::
isOw√d
(Ëc⁄° 
n€x˚±
 -> 
boﬁ
 {

9939  
m_d©a
 !
nuŒ±r
;

9941 autÿ
	gSåögRef
::
isSub°rög
(Ëc⁄° 
n€x˚±
 -> 
boﬁ
 {

9942  
m_°¨t
[
m_size
] != '\0';

9945 
	gSåögRef
::
èkeOw√rshù
() {

9946 if–!
isOw√d
() ) {

9947 
m_d©a
 = 
√w
 [
m_size
+1];

9948 
mem˝y
–
m_d©a
, 
m_°¨t
, 
m_size
 );

9949 
	gm_d©a
[
m_size
] = '\0';

9950 
	gm_°¨t
 = 
m_d©a
;

9953 autÿ
	gSåögRef
::
sub°r
–
size_ty≥
 
°¨t
, size_ty≥ 
size
 ) c⁄° 
	gn€x˚±
 -> StringRef {

9954 if–
	g°¨t
 < 
	gm_size
 )

9955  
SåögRef
–
m_°¨t
+
°¨t
, 
size
 );

9957  
SåögRef
();

9959 autÿ
	gSåögRef
::
›î©‹
 =–
SåögRef
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
 -> 
boﬁ
 {

9961 
size
(Ë=
Ÿhî
.size() &&

9962 (
°d
::
°∫cmp
–
m_°¨t
, 
Ÿhî
.m_°¨t, 
size
() ) == 0);

9964 autÿ
	gSåögRef
::
›î©‹
 !–
SåögRef
 c⁄°& 
Ÿhî
 ) c⁄° 
n€x˚±
 -> 
boﬁ
 {

9965  !
›î©‹
==–
Ÿhî
 );

9968 autÿ
	gSåögRef
::
›î©‹
[](
size_ty≥
 
ödex
Ëc⁄° 
n€x˚±
 -> {

9969  
m_°¨t
[
ödex
];

9972 autÿ
	gSåögRef
::
numbîOfCh¨a˘îs
(Ëc⁄° 
n€x˚±
 -> 
size_ty≥
 {

9973 
size_ty≥
 
noCh¨s
 = 
m_size
;

9975  
size_ty≥
 
	gi
=0; i < 
	gm_size
; ++i ) {

9976 
	gc
 = 
m_°¨t
[
i
];

9977 if––
	gc
 & 
	gbyã_2_Àad
 ) =
byã_2_Àad
 ) {

9978 
noCh¨s
--;

9979 i‡(–
	gc
 & 
	gbyã_3_Àad
 ) =
byã_3_Àad
 )

9980 
noCh¨s
--;

9981 if––
	gc
 & 
	gbyã_4_Àad
 ) =
byã_4_Àad
 )

9982 
noCh¨s
--;

9985  
	gnoCh¨s
;

9988 autÿ
	g›î©‹
 + ( 
SåögRef
 c⁄°& 
	glhs
, SåögRe‡c⁄°& 
	grhs
 ) -> 
	g°d
::
°rög
 {

9989 
°d
::
°rög
 
°r
;

9990 
	g°r
.
ª£rve
–
lhs
.
size
(Ë+ 
rhs
.size() );

9991 
	g°r
 +
lhs
;

9992 
	g°r
 +
rhs
;

9993  
	g°r
;

9995 autÿ
	g›î©‹
 + ( 
SåögRef
 c⁄°& 
	glhs
, c⁄° * 
	grhs
 ) -> 
	g°d
::
°rög
 {

9996  
°d
::
°rög
–
lhs
 ) + std::°rög–
rhs
 );

9998 autÿ
	g›î©‹
 + ( c⁄°* 
	glhs
, 
SåögRef
 c⁄°& 
	grhs
 ) -> 
	g°d
::
°rög
 {

9999  
°d
::
°rög
–
lhs
 ) + std::°rög–
rhs
 );

10002 autÿ
	g›î©‹
 << ( 
	g°d
::
o°ªam
& 
os
, 
SåögRef
 c⁄°& 
	g°r
 ) -> std::ostream& {

10003  
os
.
wrôe
(
°r
.
cuºítD©a
(), så.
size
());

10006 autÿ
	g›î©‹
+=–
°d
::
°rög
& 
lhs
, 
SåögRef
 c⁄°& 
	grhs
 ) -> 
	g°d
::string& {

10007 
lhs
.
≠≥nd
(
rhs
.
cuºítD©a
(),Ñhs.
size
());

10008  
	glhs
;

10013 #i‡
deföed
(
__˛™g__
)

10014 #¥agm®
˛™g
 
dügno°ic
 
p›


10019 
«me•a˚
 
	gC©ch
 {

10020 
	gTagAlüs
::
TagAlüs
(
°d
::
°rög
 c⁄° & 
_èg
, 
Sour˚LöeInfo
 
_löeInfo
): 
èg
(_èg), 
löeInfo
(_lineInfo) {}

10025 
«me•a˚
 
	gC©ch
 {

10027 
	gRegi°ørF‹TagAlü£s
::
Regi°ørF‹TagAlü£s
(c⁄°* 
Æüs
, c⁄°* 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
) {

10028 
	gåy
 {

10029 
gëMuèbÀRegi°ryHub
().
ªgi°îTagAlüs
(
Æüs
, 
èg
, 
löeInfo
);

10030 } 
ˇtch
 (...) {

10032 
gëMuèbÀRegi°ryHub
().
ªgi°îSèπupEx˚±i⁄
();

10040 
	~<s°ªam
>

10042 
«me•a˚
 
	gC©ch
 {

10044 
	gTagAlüsRegi°ry
::~
TagAlüsRegi°ry
() {}

10046 
TagAlüs
 c⁄°* 
TagAlüsRegi°ry
::
föd
–
°d
::
°rög
 c⁄°& 
Æüs
 ) const {

10047 autÿ
ô
 = 
m_ªgi°ry
.
föd
–
Æüs
 );

10048 if–
	gô
 !
m_ªgi°ry
.
íd
() )

10049  &(
ô
->
£c⁄d
);

10051  
	gnuŒ±r
;

10054 
	g°d
::
°rög
 
TagAlüsRegi°ry
::
ex∑ndAlü£s
–
°d
::°rög c⁄°& 
u√x∑ndedTe°S≥c
 ) const {

10055 
°d
::
°rög
 
ex∑ndedTe°S≥c
 = 
u√x∑ndedTe°S≥c
;

10056 áutÿc⁄°& 
	gªgi°ryKvp
 : 
m_ªgi°ry
 ) {

10057 
°d
::
size_t
 
pos
 = 
ex∑ndedTe°S≥c
.
föd
–
ªgi°ryKvp
.
fú°
 );

10058 if–
	gpos
 !
°d
::
°rög
::
≈os
 ) {

10059 
ex∑ndedTe°S≥c
 =Éx∑ndedTe°S≥c.
sub°r
–0, 
pos
 ) +

10060 
	gªgi°ryKvp
.
	g£c⁄d
.
	gèg
 +

10061 
	gex∑ndedTe°S≥c
.
sub°r
–
pos
 + 
ªgi°ryKvp
.
fú°
.
size
() );

10064  
	gex∑ndedTe°S≥c
;

10067 
	gTagAlüsRegi°ry
::
add
–
°d
::
°rög
 c⁄°& 
Æüs
, std::°rög c⁄°& 
èg
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
 ) {

10068 
CATCH_ENFORCE
–
°¨tsWôh
(
Æüs
, "[@"Ë&& 
ídsWôh
(alias, ']'),

10069 "îr‹:Åagálüs, '" << 
Æüs
 << "' i†nŸ o‡thêf‹m [@Æü†«me].\n" << 
löeInfo
 );

10071 
CATCH_ENFORCE
–
m_ªgi°ry
.
ö£π
(
°d
::
make_∑ú
(
Æüs
, 
TagAlüs
(
èg
, 
löeInfo
))).
£c⁄d
,

10072 "îr‹:Åagálüs, '" << 
Æüs
 << "'álreadyÑegistered.\n"

10073 << "\tFú° sì¿©: " << 
föd
(
Æüs
)->
löeInfo
 << "\n"

10074 << "\tRedeföedát: " << 
löeInfo
 );

10077 
	gITagAlüsRegi°ry
::~
ITagAlüsRegi°ry
() {}

10079 
ITagAlüsRegi°ry
 c⁄°& ITagAlüsRegi°ry::
gë
() {

10080  
gëRegi°ryHub
().
gëTagAlüsRegi°ry
();

10087 
	~<c˘y≥
>

10088 
	~<ex˚±i⁄
>

10089 
	~<Æg‹ôhm
>

10090 
	~<s°ªam
>

10092 
«me•a˚
 
	gC©ch
 {

10094 
	g«me•a˚
 {

10095 
	gTe°Ca£Info
::
S≥cülPr›îtõs
 
∑r£S≥cülTag
–
°d
::
°rög
 c⁄°& 
èg
 ) {

10096 if–
°¨tsWôh
–
èg
, '.' ) ||

10097 
	gèg
 == "!hide" )

10098  
Te°Ca£Info
::
IsHiddí
;

10099 if–
	gèg
 == "!throws" )

10100  
Te°Ca£Info
::
Throws
;

10101 if–
	gèg
 == "!shouldfail" )

10102  
Te°Ca£Info
::
ShouldFaû
;

10103 if–
	gèg
 == "!mayfail" )

10104  
Te°Ca£Info
::
MayFaû
;

10105 if–
	gèg
 == "!nonportable" )

10106  
Te°Ca£Info
::
N⁄P‹èbÀ
;

10107 if–
	gèg
 == "!benchmark" )

10108  
°©ic_ˇ°
<
Te°Ca£Info
::
S≥cülPr›îtõs
>–Te°Ca£Info::
Bíchm¨k
 | Te°Ca£Info::
IsHiddí
 );

10110  
	gTe°Ca£Info
::
N⁄e
;

10112 
boﬁ
 
isRe£rvedTag
–
°d
::
°rög
 c⁄°& 
èg
 ) {

10113  
∑r£S≥cülTag
–
èg
 ) =
Te°Ca£Info
::
N⁄e
 &&Åag.
size
(Ë> 0 && !
°d
::
iß um
–
°©ic_ˇ°
<>(tag[0]) );

10115 
íf‹˚NŸRe£rvedTag
–
°d
::
°rög
 c⁄°& 
èg
, 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 ) {

10116 
CATCH_ENFORCE
–!
isRe£rvedTag
(
èg
),

10117 "TagÇame: [" << 
èg
 << "] isÇotállowed.\n"

10119 << 
_löeInfo
 );

10123 
Te°Ca£
 
makeTe°Ca£
–
ITe°Invokî
* 
_ã°Ca£
,

10124 
°d
::
°rög
 c⁄°& 
_˛assName
,

10125 
NameAndTags
 c⁄°& 
«meAndTags
,

10126 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 )

10128 
boﬁ
 
	gisHiddí
 = 
Ál£
;

10131 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
ègs
;

10132 
	g°d
::
°rög
 
desc
, 
	gèg
;

10133 
boﬁ
 
	göTag
 = 
Ál£
;

10134 
	g°d
::
°rög
 
_descOrTags
 = 
«meAndTags
.
ègs
;

10135 
	gc
 : 
_descOrTags
) {

10136 if–!
öTag
 ) {

10137 if–
c
 == '[' )

10138 
öTag
 = 
åue
;

10140 
	gdesc
 +
c
;

10143 if–
	gc
 == ']' ) {

10144 
Te°Ca£Info
::
S≥cülPr›îtõs
 
¥›
 = 
∑r£S≥cülTag
–
èg
 );

10145 if––
	g¥›
 & 
	gTe°Ca£Info
::
IsHiddí
 ) != 0 )

10146 
isHiddí
 = 
åue
;

10147 if–
	g¥›
 =
Te°Ca£Info
::
N⁄e
 )

10148 
íf‹˚NŸRe£rvedTag
–
èg
, 
_löeInfo
 );

10150 
	gègs
.
push_back
–
èg
 );

10151 
	gèg
.
˛ór
();

10152 
	göTag
 = 
Ál£
;

10155 
	gèg
 +
c
;

10158 if–
	gisHiddí
 ) {

10159 
	gègs
.
push_back
( "." );

10162 
Te°Ca£Info
 
öfo
–
«meAndTags
.
«me
, 
_˛assName
, 
desc
, 
ègs
, 
_löeInfo
 );

10163  
Te°Ca£
–
_ã°Ca£
, 
°d
::
move
(
öfo
) );

10166 
£tTags
–
Te°Ca£Info
& 
ã°Ca£Info
, 
°d
::
ve˘‹
<°d::
°rög
> 
ègs
 ) {

10167 
°d
::
s‹t
(
begö
(
ègs
), 
íd
(tags));

10168 
	gègs
.
îa£
(
°d
::
unique
(
begö
(
ègs
), 
íd
(tags)),Énd(tags));

10169 
	gã°Ca£Info
.
	glˇ£Tags
.
˛ór
();

10171 áutÿc⁄°& 
	gèg
 : 
ègs
 ) {

10172 
°d
::
°rög
 
lˇ£Tag
 = 
toLowî
–
èg
 );

10173 
	gã°Ca£Info
.
	g¥›îtõs
 = 
°©ic_ˇ°
<
Te°Ca£Info
::
S≥cülPr›îtõs
>–
ã°Ca£Info
.
¥›îtõs
 | 
∑r£S≥cülTag
–
lˇ£Tag
 ) );

10174 
	gã°Ca£Info
.
	glˇ£Tags
.
push_back
–
lˇ£Tag
 );

10176 
	gã°Ca£Info
.
	gègs
 = 
°d
::
move
(
ègs
);

10179 
	gTe°Ca£Info
::
Te°Ca£Info
–
°d
::
°rög
 c⁄°& 
_«me
,

10180 
°d
::
°rög
 c⁄°& 
_˛assName
,

10181 
°d
::
°rög
 c⁄°& 
_des¸ùti⁄
,

10182 
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
_ègs
,

10183 
Sour˚LöeInfo
 c⁄°& 
_löeInfo
 )

10184 : 
«me
–
_«me
 ),

10185 
˛assName
–
_˛assName
 ),

10186 
des¸ùti⁄
–
_des¸ùti⁄
 ),

10187 
löeInfo
–
_löeInfo
 ),

10188 
¥›îtõs
–
N⁄e
 )

10190 
£tTags
–*
this
, 
_ègs
 );

10193 
boﬁ
 
	gTe°Ca£Info
::
isHiddí
() const {

10194  ( 
¥›îtõs
 & 
IsHiddí
 ) != 0;

10196 
boﬁ
 
	gTe°Ca£Info
::
throws
() const {

10197  ( 
¥›îtõs
 & 
Throws
 ) != 0;

10199 
boﬁ
 
	gTe°Ca£Info
::
okToFaû
() const {

10200  ( 
¥›îtõs
 & (
ShouldFaû
 | 
MayFaû
 ) ) != 0;

10202 
boﬁ
 
	gTe°Ca£Info
::
ex≥˘edToFaû
() const {

10203  ( 
¥›îtõs
 & (
ShouldFaû
 ) ) != 0;

10206 
	g°d
::
°rög
 
Te°Ca£Info
::
ègsAsSåög
() const {

10207 
°d
::
°rög
 
ªt
;

10209 
	g°d
::
size_t
 
fuŒ_size
 = 2 * 
ègs
.
size
();

10210 c⁄°áuto& 
	gèg
 : 
ègs
) {

10211 
fuŒ_size
 +
èg
.
size
();

10213 
	gªt
.
ª£rve
(
fuŒ_size
);

10214 c⁄°áuto& 
	gèg
 : 
ègs
) {

10215 
ªt
.
push_back
('[');

10216 
	gªt
.
≠≥nd
(
èg
);

10217 
	gªt
.
push_back
(']');

10220  
	gªt
;

10223 
	gTe°Ca£
::
Te°Ca£
–
ITe°Invokî
* 
ã°Ca£
, 
Te°Ca£Info
&& 
öfo
 ) : Te°Ca£Info–
°d
::
move
(öfoË), 
ã°
(ÅestCase ) {}

10225 
Te°Ca£
 
	gTe°Ca£
::
wôhName
–
°d
::
°rög
 c⁄°& 
_√wName
 ) const {

10226 
Te°Ca£
 
Ÿhî
–*
this
 );

10227 
	gŸhî
.
	g«me
 = 
_√wName
;

10228  
	gŸhî
;

10231 
	gTe°Ca£
::
övoke
() const {

10232 
ã°
->
övoke
();

10235 
boﬁ
 
	gTe°Ca£
::
›î©‹
 =–
Te°Ca£
 c⁄°& 
Ÿhî
 ) const {

10236  
ã°
.
gë
(Ë=
Ÿhî
.test.get() &&

10237 
«me
 =
Ÿhî
.name &&

10238 
˛assName
 =
Ÿhî
.className;

10241 
boﬁ
 
	gTe°Ca£
::
›î©‹
 < ( 
Te°Ca£
 c⁄°& 
Ÿhî
 ) const {

10242  
«me
 < 
Ÿhî
.name;

10245 
Te°Ca£Info
 c⁄°& 
	gTe°Ca£
::
gëTe°Ca£Info
() const

10247  *
this
;

10254 
	~<s°ªam
>

10256 
«me•a˚
 
	gC©ch
 {

10258 
	g°d
::
ve˘‹
<
Te°Ca£
> 
s‹tTe°s
–
IC⁄fig
 c⁄°& 
c⁄fig
, 
°d
::ve˘‹<Te°Ca£> c⁄°& 
uns‹ãdTe°Ca£s
 ) {

10260 
°d
::
ve˘‹
<
Te°Ca£
> 
s‹ãd
 = 
uns‹ãdTe°Ca£s
;

10262  
	gc⁄fig
.
runOrdî
() ) {

10263 
	gRunTe°s
::
InLexicogøphiˇlOrdî
:

10264 
°d
::
s‹t
–
s‹ãd
.
begö
(), s‹ãd.
íd
() );

10266 
	gRunTe°s
::
InR™domOrdî
:

10267 
£edRng
–
c⁄fig
 );

10268 
	g°d
::
shufÊe
–
s‹ãd
.
begö
(), s‹ãd.
íd
(), 
∫g
() );

10270 
	gRunTe°s
::
InDe˛¨©i⁄Ordî
:

10274  
	gs‹ãd
;

10276 
boﬁ
 
m©chTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

10277  
	gã°S≥c
.
m©ches
–
ã°Ca£
 ) && ( 
	gc⁄fig
.
ÆlowThrows
(Ë|| !
	gã°Ca£
.
throws
() );

10280 
íf‹˚NoDu∂iˇãTe°Ca£s
–
°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
fun˘i⁄s
 ) {

10281 
°d
::
£t
<
Te°Ca£
> 
£íFun˘i⁄s
;

10282 áutÿc⁄°& 
	gfun˘i⁄
 : 
fun˘i⁄s
 ) {

10283 autÿ
¥ev
 = 
£íFun˘i⁄s
.
ö£π
–
fun˘i⁄
 );

10284 
CATCH_ENFORCE
–
¥ev
.
£c⁄d
,

10285 "îr‹: TEST_CASE–\"" << 
fun˘i⁄
.
«me
 << "\" )álready defined.\n"

10286 << "\tFú° sì¿© " << 
¥ev
.
fú°
->
gëTe°Ca£Info
().
löeInfo
 << "\n"

10287 << "\tRedeföedáà" << 
fun˘i⁄
.
gëTe°Ca£Info
().
löeInfo
 );

10291 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãrTe°s
–
°d
::ve˘‹<Te°Ca£> c⁄°& 
ã°Ca£s
, 
Te°S≥c
 c⁄°& 
ã°S≥c
, 
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

10292 
	g°d
::
ve˘‹
<
Te°Ca£
> 
fûãªd
;

10293 
	gfûãªd
.
ª£rve
–
ã°Ca£s
.
size
() );

10294 áutÿc⁄°& 
	gã°Ca£
 : 
ã°Ca£s
 )

10295 if–
m©chTe°
–
ã°Ca£
, 
ã°S≥c
, 
c⁄fig
 ) )

10296 
	gfûãªd
.
push_back
–
ã°Ca£
 );

10297  
	gfûãªd
;

10299 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
gëAŒTe°Ca£sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) {

10300  
gëRegi°ryHub
().
gëTe°Ca£Regi°ry
().
gëAŒTe°sS‹ãd
–
c⁄fig
 );

10303 
	gTe°Regi°ry
::
ªgi°îTe°
–
Te°Ca£
 c⁄°& 
ã°Ca£
 ) {

10304 
°d
::
°rög
 
«me
 = 
ã°Ca£
.
gëTe°Ca£Info
().name;

10305 if–
	g«me
.
em±y
() ) {

10306 
ReußbÀSåögSåóm
 
	grss
;

10307 
	grss
 << "An⁄ymou†ã° ca£ " << ++
	gm_u¬amedCou¡
;

10308  
ªgi°îTe°
–
ã°Ca£
.
wôhName
–
rss
.
°r
() ) );

10310 
	gm_fun˘i⁄s
.
push_back
–
ã°Ca£
 );

10313 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
Te°Regi°ry
::
gëAŒTe°s
() const {

10314  
m_fun˘i⁄s
;

10316 
	g°d
::
ve˘‹
<
Te°Ca£
> c⁄°& 
Te°Regi°ry
::
gëAŒTe°sS‹ãd
–
IC⁄fig
 c⁄°& 
c⁄fig
 ) const {

10317 if–
m_s‹ãdFun˘i⁄s
.
em±y
() )

10318 
íf‹˚NoDu∂iˇãTe°Ca£s
–
m_fun˘i⁄s
 );

10320 if–
	gm_cuºítS‹tOrdî
 !
c⁄fig
.
runOrdî
(Ë|| 
m_s‹ãdFun˘i⁄s
.
em±y
() ) {

10321 
m_s‹ãdFun˘i⁄s
 = 
s‹tTe°s
–
c⁄fig
, 
m_fun˘i⁄s
 );

10322 
	gm_cuºítS‹tOrdî
 = 
c⁄fig
.
runOrdî
();

10324  
	gm_s‹ãdFun˘i⁄s
;

10328 
	gTe°InvokîAsFun˘i⁄
::
Te°InvokîAsFun˘i⁄
–(*
ã°AsFun˘i⁄
)(ËË
n€x˚±
 : 
m_ã°AsFun˘i⁄
(ÅestAsFunction ) {}

10330 
Te°InvokîAsFun˘i⁄
::
övoke
() const {

10331 
m_ã°AsFun˘i⁄
();

10334 
	g°d
::
°rög
 
exåa˘CœssName
–
SåögRef
 c⁄°& 
˛assOrQuÆifõdMëhodName
 ) {

10335 
°d
::
°rög
 
˛assName
 = 
˛assOrQuÆifõdMëhodName
;

10336 if–
°¨tsWôh
–
˛assName
, '&' ) )

10338 
	g°d
::
size_t
 
œ°Cﬁ⁄s
 = 
˛assName
.
rföd
( "::" );

10339 
	g°d
::
size_t
 
≥nu…im©eCﬁ⁄s
 = 
˛assName
.
rföd
–"::", 
œ°Cﬁ⁄s
-1 );

10340 if–
	g≥nu…im©eCﬁ⁄s
 =
°d
::
°rög
::
≈os
 )

10341 
≥nu…im©eCﬁ⁄s
 = 1;

10342 
	g˛assName
 = 
˛assName
.
sub°r
–
≥nu…im©eCﬁ⁄s
, 
œ°Cﬁ⁄s
-penultimateColons );

10344  
	g˛assName
;

10351 
	~<Æg‹ôhm
>

10352 
	~<ˇs£π
>

10353 
	~<°dex˚±
>

10354 
	~<mem‹y
>

10355 
	~<s°ªam
>

10357 #i‡
deföed
(
__˛™g__
)

10358 #¥agm®
˛™g
 
dügno°ic
 
push


10359 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wexit-time-destructors"

10362 
«me•a˚
 
	gC©ch
 {

10363 
«me•a˚
 
	gTe°Ca£Tøckög
 {

10365 
	gNameAndLoˇti⁄
::
NameAndLoˇti⁄
–
°d
::
°rög
 c⁄°& 
_«me
, 
Sour˚LöeInfo
 c⁄°& 
_loˇti⁄
 )

10366 : 
«me
–
_«me
 ),

10367 
loˇti⁄
–
_loˇti⁄
 )

10370 
	gITøckî
::~
ITøckî
() = ;

10372 
	gTøckîC⁄ãxt
& TøckîC⁄ãxt::
ö°™˚
() {

10373 
TøckîC⁄ãxt
 
s_ö°™˚
;

10374  
	gs_ö°™˚
;

10377 
	gITøckî
& 
	gTøckîC⁄ãxt
::
°¨tRun
() {

10378 
m_roŸTøckî
 = 
°d
::
make_sh¨ed
<
Se˘i⁄Tøckî
>–
NameAndLoˇti⁄
–"{roŸ}", 
CATCH_INTERNAL_LINEINFO
 ), *
	gthis
, 
	gnuŒ±r
 );

10379 
	gm_cuºítTøckî
 = 
nuŒ±r
;

10380 
	gm_runSèã
 = 
Executög
;

10381  *
	gm_roŸTøckî
;

10384 
	gTøckîC⁄ãxt
::
ídRun
() {

10385 
m_roŸTøckî
.
ª£t
();

10386 
	gm_cuºítTøckî
 = 
nuŒ±r
;

10387 
	gm_runSèã
 = 
NŸSèπed
;

10390 
	gTøckîC⁄ãxt
::
°¨tCy˛e
() {

10391 
m_cuºítTøckî
 = 
m_roŸTøckî
.
gë
();

10392 
	gm_runSèã
 = 
Executög
;

10394 
	gTøckîC⁄ãxt
::
com∂ëeCy˛e
() {

10395 
m_runSèã
 = 
Com∂ëedCy˛e
;

10398 
boﬁ
 
	gTøckîC⁄ãxt
::
com∂ëedCy˛e
() const {

10399  
m_runSèã
 =
Com∂ëedCy˛e
;

10401 
	gITøckî
& 
	gTøckîC⁄ãxt
::
cuºítTøckî
() {

10402  *
m_cuºítTøckî
;

10404 
	gTøckîC⁄ãxt
::
£tCuºítTøckî
–
ITøckî
* 
åackî
 ) {

10405 
m_cuºítTøckî
 = 
åackî
;

10408 
	gTøckîBa£
::
TøckîHasName
::TøckîHasName–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 ) : 
m_«meAndLoˇti⁄
(ÇameAndLocation ) {}

10409 
boﬁ
 
TøckîBa£
::
TøckîHasName
::
›î©‹
 ()–
ITøckîPå
 c⁄°& 
åackî
 ) const {

10411 
åackî
->
«meAndLoˇti⁄
().
loˇti⁄
 =
m_«meAndLoˇti⁄
.location &&

10412 
åackî
->
«meAndLoˇti⁄
().
«me
 =
m_«meAndLoˇti⁄
.name;

10415 
	gTøckîBa£
::
TøckîBa£
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
 )

10416 : 
m_«meAndLoˇti⁄
–
«meAndLoˇti⁄
 ),

10417 
m_˘x
–
˘x
 ),

10418 
m_∑ª¡
–
∑ª¡
 )

10421 
NameAndLoˇti⁄
 c⁄°& 
	gTøckîBa£
::
«meAndLoˇti⁄
() const {

10422  
m_«meAndLoˇti⁄
;

10424 
boﬁ
 
	gTøckîBa£
::
isCom∂ëe
() const {

10425  
m_runSèã
 =
Com∂ëedSuc˚ssfuŒy
 || m_runSèã =
Faûed
;

10427 
boﬁ
 
	gTøckîBa£
::
isSuc˚ssfuŒyCom∂ëed
() const {

10428  
m_runSèã
 =
Com∂ëedSuc˚ssfuŒy
;

10430 
boﬁ
 
	gTøckîBa£
::
isO≥n
() const {

10431  
m_runSèã
 !
NŸSèπed
 && !
isCom∂ëe
();

10433 
boﬁ
 
	gTøckîBa£
::
hasChûdªn
() const {

10434  !
m_chûdªn
.
em±y
();

10437 
	gTøckîBa£
::
addChûd
–
ITøckîPå
 c⁄°& 
chûd
 ) {

10438 
m_chûdªn
.
push_back
–
chûd
 );

10441 
ITøckîPå
 
	gTøckîBa£
::
födChûd
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 ) {

10442 autÿ
ô
 = 
°d
::
föd_if
–
m_chûdªn
.
begö
(), m_chûdªn.
íd
(), 
TøckîHasName
–
«meAndLoˇti⁄
 ) );

10443 –
	gô
 !
m_chûdªn
.
íd
() )

10444 ? *
ô


10445 : 
nuŒ±r
;

10447 
	gITøckî
& 
	gTøckîBa£
::
∑ª¡
() {

10448 
as£π
–
m_∑ª¡
 );

10449  *
	gm_∑ª¡
;

10452 
	gTøckîBa£
::
›íChûd
() {

10453 if–
m_runSèã
 !
ExecutögChûdªn
 ) {

10454 
m_runSèã
 = 
ExecutögChûdªn
;

10455 if–
	gm_∑ª¡
 )

10456 
	gm_∑ª¡
->
›íChûd
();

10460 
boﬁ
 
	gTøckîBa£
::
isSe˘i⁄Tøckî
(Ëc⁄° {  
Ál£
; }

10461 
boﬁ
 
	gTøckîBa£
::
isIndexTøckî
(Ëc⁄° {  
Ál£
; }

10463 
	gTøckîBa£
::
›í
() {

10464 
m_runSèã
 = 
Executög
;

10465 
moveToThis
();

10466 if–
	gm_∑ª¡
 )

10467 
	gm_∑ª¡
->
›íChûd
();

10470 
	gTøckîBa£
::
˛o£
() {

10473  &
m_˘x
.
cuºítTøckî
(Ë!
this
 )

10474 
m_˘x
.
cuºítTøckî
().
˛o£
();

10476  
	gm_runSèã
 ) {

10477 
	gNìdsAnŸhîRun
:

10480 
	gExecutög
:

10481 
m_runSèã
 = 
Com∂ëedSuc˚ssfuŒy
;

10483 
	gExecutögChûdªn
:

10484 if–
m_chûdªn
.
em±y
(Ë|| m_chûdªn.
back
()->
isCom∂ëe
() )

10485 
m_runSèã
 = 
Com∂ëedSuc˚ssfuŒy
;

10488 
	gNŸSèπed
:

10489 
Com∂ëedSuc˚ssfuŒy
:

10490 
Faûed
:

10491 
CATCH_INTERNAL_ERROR
–"IŒogiˇ»°©e: " << 
m_runSèã
 );

10494 
CATCH_INTERNAL_ERROR
–"Unknow¿°©e: " << 
m_runSèã
 );

10496 
moveToP¨ít
();

10497 
	gm_˘x
.
com∂ëeCy˛e
();

10499 
	gTøckîBa£
::
Áû
() {

10500 
m_runSèã
 = 
Faûed
;

10501 if–
	gm_∑ª¡
 )

10502 
	gm_∑ª¡
->
m¨kAsNìdögAnŸhîRun
();

10503 
moveToP¨ít
();

10504 
	gm_˘x
.
com∂ëeCy˛e
();

10506 
	gTøckîBa£
::
m¨kAsNìdögAnŸhîRun
() {

10507 
m_runSèã
 = 
NìdsAnŸhîRun
;

10510 
	gTøckîBa£
::
moveToP¨ít
() {

10511 
as£π
–
m_∑ª¡
 );

10512 
	gm_˘x
.
£tCuºítTøckî
–
m_∑ª¡
 );

10514 
	gTøckîBa£
::
moveToThis
() {

10515 
m_˘x
.
£tCuºítTøckî
–
this
 );

10518 
	gSe˘i⁄Tøckî
::
Se˘i⁄Tøckî
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
 )

10519 : 
TøckîBa£
–
«meAndLoˇti⁄
, 
˘x
, 
∑ª¡
 )

10521 if–
	g∑ª¡
 ) {

10522  !
	g∑ª¡
->
isSe˘i⁄Tøckî
() )

10523 
	g∑ª¡
 = &
∑ª¡
->parent();

10525 
	gSe˘i⁄Tøckî
& 
	g∑ª¡Se˘i⁄
 = 
°©ic_ˇ°
<
Se˘i⁄Tøckî
&>–*
∑ª¡
 );

10526 
addNextFûãrs
–
∑ª¡Se˘i⁄
.
m_fûãrs
 );

10530 
boﬁ
 
	gSe˘i⁄Tøckî
::
isSe˘i⁄Tøckî
(Ëc⁄° {  
åue
; }

10532 
	gSe˘i⁄Tøckî
& Se˘i⁄Tøckî::
acquúe
–
TøckîC⁄ãxt
& 
˘x
, 
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
 ) {

10533 
	g°d
::
sh¨ed_±r
<
Se˘i⁄Tøckî
> 
£˘i⁄
;

10535 
	gITøckî
& 
	gcuºítTøckî
 = 
˘x
.
cuºítTøckî
();

10536 if–
ITøckîPå
 
	gchûdTøckî
 = 
cuºítTøckî
.
födChûd
–
«meAndLoˇti⁄
 ) ) {

10537 
as£π
–
chûdTøckî
 );

10538 
as£π
–
chûdTøckî
->
isSe˘i⁄Tøckî
() );

10539 
	g£˘i⁄
 = 
°d
::
°©ic_poöãr_ˇ°
<
Se˘i⁄Tøckî
>–
chûdTøckî
 );

10542 
	g£˘i⁄
 = 
°d
::
make_sh¨ed
<
Se˘i⁄Tøckî
>–
«meAndLoˇti⁄
, 
	g˘x
, &
	gcuºítTøckî
 );

10543 
	gcuºítTøckî
.
addChûd
–
£˘i⁄
 );

10545 if–!
	g˘x
.
com∂ëedCy˛e
() )

10546 
	g£˘i⁄
->
åyO≥n
();

10547  *
	g£˘i⁄
;

10550 
	gSe˘i⁄Tøckî
::
åyO≥n
() {

10551 if–!
isCom∂ëe
(Ë&& (
m_fûãrs
.
em±y
(Ë|| m_fûãrs[0].em±y(Ë|| m_fûãrs[0] =
m_«meAndLoˇti⁄
.
«me
 ) )

10552 
›í
();

10555 
	gSe˘i⁄Tøckî
::
addInôülFûãrs
–
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
fûãrs
 ) {

10556 if–!
fûãrs
.
em±y
() ) {

10557 
m_fûãrs
.
push_back
("");

10558 
	gm_fûãrs
.
push_back
("");

10559 
	gm_fûãrs
.
ö£π
–
m_fûãrs
.
íd
(), 
fûãrs
.
begö
(), filters.end() );

10562 
	gSe˘i⁄Tøckî
::
addNextFûãrs
–
°d
::
ve˘‹
<°d::
°rög
> c⁄°& 
fûãrs
 ) {

10563 if–
fûãrs
.
size
() > 1 )

10564 
m_fûãrs
.
ö£π
–m_fûãrs.
íd
(), ++
fûãrs
.
begö
(), filters.end() );

10567 
	gIndexTøckî
::
IndexTøckî
–
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
TøckîC⁄ãxt
& 
˘x
, 
ITøckî
* 
∑ª¡
, 
size
 )

10568 : 
TøckîBa£
–
«meAndLoˇti⁄
, 
˘x
, 
∑ª¡
 ),

10569 
m_size
–
size
 )

10572 
boﬁ
 
	gIndexTøckî
::
isIndexTøckî
(Ëc⁄° {  
åue
; }

10574 
	gIndexTøckî
& IndexTøckî::
acquúe
–
TøckîC⁄ãxt
& 
˘x
, 
NameAndLoˇti⁄
 c⁄°& 
«meAndLoˇti⁄
, 
size
 ) {

10575 
	g°d
::
sh¨ed_±r
<
IndexTøckî
> 
åackî
;

10577 
	gITøckî
& 
	gcuºítTøckî
 = 
˘x
.
cuºítTøckî
();

10578 if–
ITøckîPå
 
	gchûdTøckî
 = 
cuºítTøckî
.
födChûd
–
«meAndLoˇti⁄
 ) ) {

10579 
as£π
–
chûdTøckî
 );

10580 
as£π
–
chûdTøckî
->
isIndexTøckî
() );

10581 
	gåackî
 = 
°d
::
°©ic_poöãr_ˇ°
<
IndexTøckî
>–
chûdTøckî
 );

10584 
	gåackî
 = 
°d
::
make_sh¨ed
<
IndexTøckî
>–
«meAndLoˇti⁄
, 
	g˘x
, &
	gcuºítTøckî
, 
	gsize
 );

10585 
	gcuºítTøckî
.
addChûd
–
åackî
 );

10588 if–!
	g˘x
.
com∂ëedCy˛e
(Ë&& !
	gåackî
->
isCom∂ëe
() ) {

10589 if–
	gåackî
->
	gm_runSèã
 !
ExecutögChûdªn
 && 
åackî
->
m_runSèã
 !
NìdsAnŸhîRun
 )

10590 
åackî
->
moveNext
();

10591 
	gåackî
->
›í
();

10594  *
	gåackî
;

10597 
	gIndexTøckî
::
ödex
(Ëc⁄° {  
m_ödex
; }

10599 
	gIndexTøckî
::
moveNext
() {

10600 
m_ödex
++;

10601 
	gm_chûdªn
.
˛ór
();

10604 
	gIndexTøckî
::
˛o£
() {

10605 
TøckîBa£
::
˛o£
();

10606 if–
	gm_runSèã
 =
Com∂ëedSuc˚ssfuŒy
 && 
m_ödex
 < 
m_size
-1 )

10607 
m_runSèã
 = 
Executög
;

10612 
usög
 
	gTe°Ca£Tøckög
::
ITøckî
;

10613 
usög
 
	gTe°Ca£Tøckög
::
TøckîC⁄ãxt
;

10614 
usög
 
	gTe°Ca£Tøckög
::
Se˘i⁄Tøckî
;

10615 
usög
 
	gTe°Ca£Tøckög
::
IndexTøckî
;

10619 #i‡
deföed
(
__˛™g__
)

10620 #¥agm®
˛™g
 
dügno°ic
 
p›


10625 
«me•a˚
 
	gC©ch
 {

10627 autÿ
makeTe°Invokî
–(*
ã°AsFun˘i⁄
)(ËË
	gn€x˚±
 -> 
	gITe°Invokî
* {

10628  
√w
(
°d
::
nŸhrow
Ë
Te°InvokîAsFun˘i⁄
–
ã°AsFun˘i⁄
 );

10631 
	gNameAndTags
::
NameAndTags
–
SåögRef
 c⁄°& 
«me_
 , SåögRe‡c⁄°& 
ègs_
 ) 
	gn€x˚±
 : 
«me
–«me_ ), 
ègs
(Åags_ ) {}

10633 
	gAutoReg
::
AutoReg
–
ITe°Invokî
* 
övokî
, 
Sour˚LöeInfo
 c⁄°& 
löeInfo
, 
SåögRef
 c⁄°& 
˛assOrMëhod
, 
NameAndTags
 c⁄°& 
«meAndTags
 ) 
	gn€x˚±
 {

10634 
	gåy
 {

10635 
gëMuèbÀRegi°ryHub
()

10636 .
ªgi°îTe°
(

10637 
makeTe°Ca£
(

10638 
övokî
,

10639 
exåa˘CœssName
–
˛assOrMëhod
 ),

10640 
«meAndTags
,

10641 
löeInfo
));

10642 } 
ˇtch
 (...) {

10644 
gëMuèbÀRegi°ryHub
().
ªgi°îSèπupEx˚±i⁄
();

10648 
	gAutoReg
::~
AutoReg
() = ;

10653 
	~<Æg‹ôhm
>

10654 
	~<°rög
>

10655 
	~<ve˘‹
>

10656 
	~<mem‹y
>

10658 
«me•a˚
 
	gC©ch
 {

10660 
	gTe°S≥c
::
P©ã∫
::~Pattern() = ;

10661 
	gTe°S≥c
::
NameP©ã∫
::~NamePattern() = ;

10662 
	gTe°S≥c
::
TagP©ã∫
::~TagPattern() = ;

10663 
	gTe°S≥c
::
Ex˛udedP©ã∫
::~ExcludedPattern() = ;

10665 
	gTe°S≥c
::
NameP©ã∫
::NameP©ã∫–
°d
::
°rög
 c⁄°& 
«me
 )

10666 : 
m_wûdˇrdP©ã∫
–
toLowî
–
«me
 ), 
Ca£Sísôive
::
No
 )

10668 
boﬁ
 
Te°S≥c
::
NameP©ã∫
::
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

10669  
m_wûdˇrdP©ã∫
.
m©ches
–
toLowî
–
ã°Ca£
.
«me
 ) );

10672 
	gTe°S≥c
::
TagP©ã∫
::TagP©ã∫–
°d
::
°rög
 c⁄°& 
èg
 ) : 
m_èg
–
toLowî
(Åag ) ) {}

10673 
boﬁ
 
Te°S≥c
::
TagP©ã∫
::
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

10674  
°d
::
föd
(
begö
(
ã°Ca£
.
lˇ£Tags
),

10675 
íd
(
ã°Ca£
.
lˇ£Tags
),

10676 
m_èg
Ë!
íd
(
ã°Ca£
.
lˇ£Tags
);

10679 
	gTe°S≥c
::
Ex˛udedP©ã∫
::Ex˛udedP©ã∫–
P©ã∫På
 c⁄°& 
undîlyögP©ã∫
 ) : 
m_undîlyögP©ã∫
( underlyingPattern ) {}

10680 
boﬁ
 
Te°S≥c
::
Ex˛udedP©ã∫
::
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) c⁄° {  !
m_undîlyögP©ã∫
->matches(ÅestCase ); }

10682 
boﬁ
 
	gTe°S≥c
::
Fûãr
::
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

10684 áutÿc⁄°& 
∑âîn
 : 
m_∑âîns
 ) {

10685 if–!
∑âîn
->
m©ches
–
ã°Ca£
 ) )

10686  
Ál£
;

10688  
	gåue
;

10691 
boﬁ
 
	gTe°S≥c
::
hasFûãrs
() const {

10692  !
m_fûãrs
.
em±y
();

10694 
boﬁ
 
	gTe°S≥c
::
m©ches
–
Te°Ca£Info
 c⁄°& 
ã°Ca£
 ) const {

10696 áutÿc⁄°& 
fûãr
 : 
m_fûãrs
 )

10697 if–
fûãr
.
m©ches
–
ã°Ca£
 ) )

10698  
åue
;

10699  
	gÁl£
;

10705 
«me•a˚
 
	gC©ch
 {

10707 
	gTe°S≥cP¨£r
::
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
 c⁄°& 
ègAlü£s
 ) : 
m_ègAlü£s
( &tagAliases ) {}

10709 
Te°S≥cP¨£r
& Te°S≥cP¨£r::
∑r£
–
°d
::
°rög
 c⁄°& 
¨g
 ) {

10710 
m_mode
 = 
N⁄e
;

10711 
	gm_ex˛usi⁄
 = 
Ál£
;

10712 
	gm_°¨t
 = 
°d
::
°rög
::
≈os
;

10713 
	gm_¨g
 = 
m_ègAlü£s
->
ex∑ndAlü£s
–
¨g
 );

10714 
	gm_esˇ≥Ch¨s
.
˛ór
();

10715  
	gm_pos
 = 0; m_po†< 
	gm_¨g
.
size
(); ++m_pos )

10716 
visôCh¨
–
m_¨g
[
m_pos
] );

10717 if–
	gm_mode
 =
Name
 )

10718 
addP©ã∫
<
Te°S≥c
::
NameP©ã∫
>();

10719  *
	gthis
;

10721 
Te°S≥c
 
	gTe°S≥cP¨£r
::
ã°S≥c
() {

10722 
addFûãr
();

10723  
	gm_ã°S≥c
;

10726 
	gTe°S≥cP¨£r
::
visôCh¨
–
c
 ) {

10727 if–
m_mode
 =
N⁄e
 ) {

10728  
c
 ) {

10730 '~': 
m_ex˛usi⁄
 = 
åue
; ;

10731 '[':  
°¨tNewMode
–
Tag
, ++
m_pos
 );

10732 '"':  
°¨tNewMode
–
QuŸedName
, ++
m_pos
 );

10733 '\\':  
esˇ≥
();

10734 : 
°¨tNewMode
–
Name
, 
m_pos
 ); ;

10737 if–
	gm_mode
 =
Name
 ) {

10738 if–
c
 == ',' ) {

10739 
addP©ã∫
<
Te°S≥c
::
NameP©ã∫
>();

10740 
addFûãr
();

10742 if–
	gc
 == '[' ) {

10743 if–
subSåög
() == "exclude:" )

10744 
m_ex˛usi⁄
 = 
åue
;

10746 
	gaddP©ã∫
<
	gTe°S≥c
::
NameP©ã∫
>();

10747 
°¨tNewMode
–
Tag
, ++
m_pos
 );

10749 if–
	gc
 == '\\' )

10750 
esˇ≥
();

10752 if–
	gm_mode
 =
Esˇ≥dName
 )

10753 
m_mode
 = 
Name
;

10754 if–
	gm_mode
 =
QuŸedName
 && 
c
 == '"' )

10755 
addP©ã∫
<
Te°S≥c
::
NameP©ã∫
>();

10756 if–
	gm_mode
 =
Tag
 && 
c
 == ']' )

10757 
addP©ã∫
<
Te°S≥c
::
TagP©ã∫
>();

10759 
	gTe°S≥cP¨£r
::
°¨tNewMode
–
Mode
 
mode
, 
°d
::
size_t
 
°¨t
 ) {

10760 
m_mode
 = 
mode
;

10761 
	gm_°¨t
 = 
°¨t
;

10763 
	gTe°S≥cP¨£r
::
esˇ≥
() {

10764 if–
m_mode
 =
N⁄e
 )

10765 
m_°¨t
 = 
m_pos
;

10766 
	gm_mode
 = 
Esˇ≥dName
;

10767 
	gm_esˇ≥Ch¨s
.
push_back
–
m_pos
 );

10769 
	g°d
::
°rög
 
Te°S≥cP¨£r
::
subSåög
(Ëc⁄° {  
m_¨g
.
sub°r
–
m_°¨t
, 
m_pos
 - m_start ); }

10771 
	gTe°S≥cP¨£r
::
addFûãr
() {

10772 if–!
m_cuºítFûãr
.
m_∑âîns
.
em±y
() ) {

10773 
m_ã°S≥c
.
m_fûãrs
.
push_back
–
m_cuºítFûãr
 );

10774 
	gm_cuºítFûãr
 = 
Te°S≥c
::
Fûãr
();

10778 
Te°S≥c
 
∑r£Te°S≥c
–
°d
::
°rög
 c⁄°& 
¨g
 ) {

10779  
Te°S≥cP¨£r
–
ITagAlüsRegi°ry
::
gë
(Ë).
∑r£
–
¨g
 ).
ã°S≥c
();

10786 
	~<chr⁄o
>

10788 c⁄° 
uöt64_t
 
	g«no£c⁄dsInSec⁄d
 = 1000000000;

10790 
«me•a˚
 
	gC©ch
 {

10792 autÿ
gëCuºítN™o£c⁄dsSö˚Epoch
(Ë-> 
	guöt64_t
 {

10793  
	g°d
::
chr⁄o
::
duøti⁄_ˇ°
<
°d
::chr⁄o::
«no£c⁄ds
>–°d::chr⁄o::
high_ªsﬁuti⁄_˛ock
::
now
().
time_sö˚_ïoch
(Ë).
cou¡
();

10796 
	g«me•a˚
 {

10797 autÿ
e°im©eClockResﬁuti⁄
(Ë-> 
	guöt64_t
 {

10798 
uöt64_t
 
	gsum
 = 0;

10799 c⁄° 
uöt64_t
 
	gôî©i⁄s
 = 1000000;

10801 autÿ
	g°¨tTime
 = 
gëCuºítN™o£c⁄dsSö˚Epoch
();

10803  
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gôî©i⁄s
; ++i ) {

10805 
uöt64_t
 
	gticks
;

10806 
uöt64_t
 
	gba£Ticks
 = 
gëCuºítN™o£c⁄dsSö˚Epoch
();

10808 
	gticks
 = 
gëCuºítN™o£c⁄dsSö˚Epoch
();

10809 }  
	gticks
 =
ba£Ticks
 );

10811 autÿ
	gdñè
 = 
ticks
 - 
ba£Ticks
;

10812 
	gsum
 +
dñè
;

10817 i‡(
	gticks
 > 
	g°¨tTime
 + 3 * 
	g«no£c⁄dsInSec⁄d
) {

10818  
	gsum
 / 
	gi
;

10824  
	gsum
/
	gôî©i⁄s
;

10827 autÿ
gëE°im©edClockResﬁuti⁄
(Ë-> 
	guöt64_t
 {

10828 autÿ
	gs_ªsﬁuti⁄
 = 
e°im©eClockResﬁuti⁄
();

10829  
	gs_ªsﬁuti⁄
;

10832 
	gTimî
::
°¨t
() {

10833 
m_«no£c⁄ds
 = 
gëCuºítN™o£c⁄dsSö˚Epoch
();

10835 autÿ
	gTimî
::
gëEœp£dN™o£c⁄ds
(Ëc⁄° -> 
uöt64_t
 {

10836  
gëCuºítN™o£c⁄dsSö˚Epoch
(Ë- 
m_«no£c⁄ds
;

10838 autÿ
	gTimî
::
gëEœp£dMi¸o£c⁄ds
(Ëc⁄° -> 
uöt64_t
 {

10839  
gëEœp£dN™o£c⁄ds
()/1000;

10841 autÿ
	gTimî
::
gëEœp£dMûli£c⁄ds
() const -> {

10842  
°©ic_ˇ°
<>(
gëEœp£dMi¸o£c⁄ds
()/1000);

10844 autÿ
	gTimî
::
gëEœp£dSec⁄ds
() const -> {

10845  
gëEœp£dMi¸o£c⁄ds
()/1000000.0;

10852 #i‡
deföed
(
__˛™g__
)

10853 #¥agm®
˛™g
 
dügno°ic
 
push


10854 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wexit-time-destructors"

10855 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wglobal-constructors"

10859 #i‡!
deföed
(
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
)

10860 
	#CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER


	)

10863 
	~<cm©h
>

10864 
	~<iom™ù
>

10866 
«me•a˚
 
	gC©ch
 {

10868 
«me•a˚
 
	gDëaû
 {

10870 c⁄° 
	g°d
::
°rög
 
u≈röèbÀSåög
 = "{?}";

10872 
	g«me•a˚
 {

10873 c⁄° 
	ghexThªshﬁd
 = 255;

10875 
	sEndü¬ess
 {

10876 
	eArch
 { 
	gBig
, 
	gLôée
 };

10878 
Arch
 
which
() {

10879 
	u_
{

10880 
	gasI¡
;

10881 
	gasCh¨
[ ()];

10882 } 
	gu
;

10884 
	gu
.
	gasI¡
 = 1;

10885  ( 
	gu
.
	gasCh¨
[()-1] =1 ) ? 
Big
 : 
Lôée
;

10890 
	g°d
::
°rög
 
øwMem‹yToSåög
–c⁄° *
obje˘
, 
°d
::
size_t
 
size
 ) {

10892 
i
 = 0, 
	gíd
 = 
°©ic_ˇ°
<>–
size
 ), 
	göc
 = 1;

10893 if–
	gEndü¬ess
::
which
(Ë=
Endü¬ess
::
Lôée
 ) {

10894 
i
 = 
íd
-1;

10895 
	gíd
 = 
öc
 = -1;

10898 c⁄° *
	gbyãs
 = 
°©ic_ˇ°
<c⁄° *>(
obje˘
);

10899 
ReußbÀSåögSåóm
 
	grss
;

10900 
	grss
 << "0x" << 
	g°d
::
£tfûl
('0'Ë<< 
°d
::
hex
;

10901  ; 
	gi
 !
íd
; i +
öc
 )

10902 
rss
 << 
°d
::
£tw
(2Ë<< 
°©ic_ˇ°
<>(
byãs
[
i
]);

10903  
	grss
.
°r
();

10907 
	gãm∂©e
<
ty≥«me
 
	gT
>

10908 
	g°d
::
°rög
 
ÂToSåög
–
T
 
vÆue
, 
¥ecisi⁄
 ) {

10909 i‡(
	g°d
::
i¢™
(
vÆue
)) {

10913 
ReußbÀSåögSåóm
 
	grss
;

10914 
	grss
 << 
	g°d
::
£çªcisi⁄
–
¥ecisi⁄
 )

10915 << 
°d
::
fixed


10916 << 
vÆue
;

10917 
	g°d
::
°rög
 
d
 = 
rss
.
°r
();

10918 
	g°d
::
size_t
 
i
 = 
d
.
föd_œ°_nŸ_of
( '0' );

10919 if–
	gi
 !
°d
::
°rög
::
≈os
 && 
i
 !
d
.
size
()-1 ) {

10920 if–
d
[
i
] == '.' )

10921 
i
++;

10922 
	gd
 = 
d
.
sub°r
–0, 
i
+1 );

10924  
	gd
;

10933 
	g°d
::
°rög
 
SåögMakî
<
°d
::°rög>::
c⁄vît
(c⁄° std::°rög& 
°r
) {

10934 i‡(!
gëCuºítC⁄ãxt
().
gëC⁄fig
()->
showInvisibÀs
()) {

10935  '"' + 
°r
 + '"';

10938 
	g°d
::
°rög
 
s
("\"");

10939 
	gc
 : 
°r
) {

10940 
c
) {

10942 
s
.
≠≥nd
("\\n");

10945 
s
.
≠≥nd
("\\t");

10948 
s
.
push_back
(
c
);

10952 
	gs
.
≠≥nd
("\"");

10953  
	gs
;

10956 #ifde‡
CATCH_CONFIG_WCHAR


10957 
	g°d
::
°rög
 
SåögMakî
<
°d
::
w°rög
>::
c⁄vît
(c⁄° std::w°rög& 
w°r
) {

10958 
°d
::
°rög
 
s
;

10959 
	gs
.
ª£rve
(
w°r
.
size
());

10960 autÿ
	gc
 : 
w°r
) {

10961 
s
 +(
c
 <0xffË? 
°©ic_ˇ°
<>(c) : '?';

10963  ::
C©ch
::
Dëaû
::
°rögify
(
s
);

10967 
	g°d
::
°rög
 
SåögMakî
<c⁄°*>::
c⁄vît
(c⁄°* 
°r
) {

10968 i‡(
°r
) {

10969  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
°rög
{ 
°r
 });

10974 
	g°d
::
°rög
 
SåögMakî
<*>::
c⁄vît
(* 
°r
) {

10975 i‡(
°r
) {

10976  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
°rög
{ 
°r
 });

10981 #ifde‡
CATCH_CONFIG_WCHAR


10982 
	g°d
::
°rög
 
SåögMakî
<
wch¨_t
 c⁄°*>::
c⁄vît
(wch¨_àc⁄° * 
°r
) {

10983 i‡(
°r
) {

10984  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
w°rög
{ 
°r
 });

10989 
	g°d
::
°rög
 
SåögMakî
<
wch¨_t
 *>::
c⁄vît
(wch¨_à* 
°r
) {

10990 i‡(
°r
) {

10991  ::
C©ch
::
Dëaû
::
°rögify
(
°d
::
w°rög
{ 
°r
 });

10998 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

10999  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
vÆue
));

11001 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11002  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
vÆue
));

11004 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11005 
ReußbÀSåögSåóm
 
rss
;

11006 
	grss
 << 
	gvÆue
;

11007 i‡(
	gvÆue
 > 
	gDëaû
::
hexThªshﬁd
) {

11008 
rss
 << " (0x" << 
°d
::
hex
 << 
vÆue
 << ')';

11010  
	grss
.
°r
();

11013 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11014  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
vÆue
));

11016 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11017  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
vÆue
));

11019 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11020 
ReußbÀSåögSåóm
 
rss
;

11021 
	grss
 << 
	gvÆue
;

11022 i‡(
	gvÆue
 > 
	gDëaû
::
hexThªshﬁd
) {

11023 
rss
 << " (0x" << 
°d
::
hex
 << 
vÆue
 << ')';

11025  
	grss
.
°r
();

11028 
	g°d
::
°rög
 
SåögMakî
<
boﬁ
>::
c⁄vît
(boﬁ 
b
) {

11029  
b
 ? "true" : "false";

11032 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11033 i‡(
vÆue
 == '\r') {

11035 } i‡(
	gvÆue
 == '\f') {

11037 } i‡(
	gvÆue
 == '\n') {

11039 } i‡(
	gvÆue
 == '\t') {

11041 } i‡('\0' <
vÆue
 && value < ' ') {

11042  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
vÆue
));

11044 
	gch°r
[] = "' '";

11045 
	gch°r
[1] = 
vÆue
;

11046  
	gch°r
;

11049 
	g°d
::
°rög
 
SåögMakî
<sig√d >::
c⁄vît
(sig√d 
c
) {

11050  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
c
));

11052 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
c
) {

11053  ::
C©ch
::
Dëaû
::
°rögify
(
°©ic_ˇ°
<>(
c
));

11056 
	g°d
::
°rög
 
SåögMakî
<
°d
::
nuŒ±r_t
>::
c⁄vît
(std::nullptr_t) {

11060 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11061  
ÂToSåög
(
vÆue
, 5) + 'f';

11063 
	g°d
::
°rög
 
SåögMakî
<>::
c⁄vît
(
vÆue
) {

11064  
ÂToSåög
(
vÆue
, 10);

11067 
	g°d
::
°rög
 
øtio_°rög
<
°d
::
©to
>::
symbﬁ
() {  "a"; }

11068 
	g°d
::
°rög
 
øtio_°rög
<
°d
::
„mto
>::
symbﬁ
() {  "f"; }

11069 
	g°d
::
°rög
 
øtio_°rög
<
°d
::
pico
>::
symbﬁ
() {  "p"; }

11070 
	g°d
::
°rög
 
øtio_°rög
<
°d
::
«no
>::
symbﬁ
() {  "n"; }

11071 
	g°d
::
°rög
 
øtio_°rög
<
°d
::
mi¸o
>::
symbﬁ
() {  "u"; }

11072 
	g°d
::
°rög
 
øtio_°rög
<
°d
::
mûli
>::
symbﬁ
() {  "m"; }

11076 #i‡
deföed
(
__˛™g__
)

11077 #¥agm®
˛™g
 
dügno°ic
 
p›


11083 
«me•a˚
 
	gC©ch
 {

11085 
Cou¡s
 
	gCou¡s
::
›î©‹
 - ( Cou¡†c⁄°& 
Ÿhî
 ) const {

11086 
Cou¡s
 
diff
;

11087 
	gdiff
.
	g∑s£d
 = 
∑s£d
 - 
Ÿhî
.passed;

11088 
	gdiff
.
	gÁûed
 = 
Áûed
 - 
Ÿhî
.failed;

11089 
	gdiff
.
	gÁûedButOk
 = 
ÁûedButOk
 - 
Ÿhî
.failedButOk;

11090  
	gdiff
;

11093 
	gCou¡s
& Cou¡s::
›î©‹
 +–
Cou¡s
 c⁄°& 
Ÿhî
 ) {

11094 
∑s£d
 +
Ÿhî
.passed;

11095 
	gÁûed
 +
Ÿhî
.
Áûed
;

11096 
	gÁûedButOk
 +
Ÿhî
.
ÁûedButOk
;

11097  *
	gthis
;

11100 
	g°d
::
size_t
 
Cou¡s
::
tŸÆ
() const {

11101  
∑s£d
 + 
Áûed
 + 
ÁûedButOk
;

11103 
boﬁ
 
	gCou¡s
::
ÆlPas£d
() const {

11104  
Áûed
 =0 && 
ÁûedButOk
 == 0;

11106 
boﬁ
 
	gCou¡s
::
ÆlOk
() const {

11107  
Áûed
 == 0;

11110 
TŸÆs
 
	gTŸÆs
::
›î©‹
 - ( TŸÆ†c⁄°& 
Ÿhî
 ) const {

11111 
TŸÆs
 
diff
;

11112 
	gdiff
.
	gas£πi⁄s
 = 
as£πi⁄s
 - 
Ÿhî
.assertions;

11113 
	gdiff
.
	gã°Ca£s
 = 
ã°Ca£s
 - 
Ÿhî
.testCases;

11114  
	gdiff
;

11117 
	gTŸÆs
& TŸÆs::
›î©‹
 +–
TŸÆs
 c⁄°& 
Ÿhî
 ) {

11118 
as£πi⁄s
 +
Ÿhî
.assertions;

11119 
	gã°Ca£s
 +
Ÿhî
.
ã°Ca£s
;

11120  *
	gthis
;

11123 
TŸÆs
 
	gTŸÆs
::
dñè
–TŸÆ†c⁄°& 
¥evTŸÆs
 ) const {

11124 
TŸÆs
 
diff
 = *
this
 - 
¥evTŸÆs
;

11125 if–
	gdiff
.
	gas£πi⁄s
.
	gÁûed
 > 0 )

11126 ++
	gdiff
.
	gã°Ca£s
.
	gÁûed
;

11127 if–
	gdiff
.
	gas£πi⁄s
.
	gÁûedButOk
 > 0 )

11128 ++
	gdiff
.
	gã°Ca£s
.
	gÁûedButOk
;

11130 ++
	gdiff
.
	gã°Ca£s
.
	g∑s£d
;

11131  
	gdiff
;

11138 
	~<ex˚±i⁄
>

11140 
«me•a˚
 
	gC©ch
 {

11141 
boﬁ
 
unˇught_ex˚±i⁄s
() {

11142 #i‡
deföed
(
CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
)

11143  
	g°d
::
unˇught_ex˚±i⁄s
() > 0;

11145  
	g°d
::
unˇught_ex˚±i⁄
();

11152 
	~<o°ªam
>

11154 
«me•a˚
 
	gC©ch
 {

11156 
	gVîsi⁄
::
Vîsi⁄


11157 –
_maj‹Vîsi⁄
,

11158 
	g_mö‹Vîsi⁄
,

11159 
	g_∑tchNumbî
,

11160 c⁄° * c⁄° 
	g_bønchName
,

11161 
	g_buûdNumbî
 )

11162 : 
maj‹Vîsi⁄
–
_maj‹Vîsi⁄
 ),

11163 
mö‹Vîsi⁄
–
_mö‹Vîsi⁄
 ),

11164 
∑tchNumbî
–
_∑tchNumbî
 ),

11165 
bønchName
–
_bønchName
 ),

11166 
buûdNumbî
–
_buûdNumbî
 )

11169 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
Vîsi⁄
 c⁄°& 
	gvîsi⁄
 ) {

11170 
	gos
 << 
	gvîsi⁄
.
	gmaj‹Vîsi⁄
 << '.'

11171 << 
	gvîsi⁄
.
	gmö‹Vîsi⁄
 << '.'

11172 << 
	gvîsi⁄
.
	g∑tchNumbî
;

11174 i‡(
	gvîsi⁄
.
	gbønchName
[0]) {

11175 
	gos
 << '-' << 
	gvîsi⁄
.
	gbønchName


11176 << '.' << 
	gvîsi⁄
.
	gbuûdNumbî
;

11178  
	gos
;

11181 
Vîsi⁄
 c⁄°& 
libøryVîsi⁄
() {

11182 
Vîsi⁄
 
vîsi⁄
( 2, 3, 0, "", 0 );

11183  
	gvîsi⁄
;

11190 
	~<s°ªam
>

11192 
«me•a˚
 
	gC©ch
 {

11194 
	gWûdˇrdP©ã∫
::
WûdˇrdP©ã∫
–
°d
::
°rög
 c⁄°& 
∑âîn
,

11195 
Ca£Sísôive
::
Choi˚
 
ˇ£Sísôivôy
 )

11196 : 
m_ˇ£Sísôivôy
–
ˇ£Sísôivôy
 ),

11197 
m_∑âîn
–
adju°Ca£
–
∑âîn
 ) )

11199 if–
°¨tsWôh
–
m_∑âîn
, '*' ) ) {

11200 
	gm_∑âîn
 = 
m_∑âîn
.
sub°r
( 1 );

11201 
	gm_wûdˇrd
 = 
WûdˇrdAtSèπ
;

11203 if–
ídsWôh
–
m_∑âîn
, '*' ) ) {

11204 
	gm_∑âîn
 = 
m_∑âîn
.
sub°r
–0, m_∑âîn.
size
()-1 );

11205 
	gm_wûdˇrd
 = 
°©ic_ˇ°
<
WûdˇrdPosôi⁄
>–
m_wûdˇrd
 | 
WûdˇrdAtEnd
 );

11209 
boﬁ
 
	gWûdˇrdP©ã∫
::
m©ches
–
°d
::
°rög
 c⁄°& 
°r
 ) const {

11210  
m_wûdˇrd
 ) {

11211 
NoWûdˇrd
:

11212  
m_∑âîn
 =
adju°Ca£
–
°r
 );

11213 
	gWûdˇrdAtSèπ
:

11214  
ídsWôh
–
adju°Ca£
–
°r
 ), 
m_∑âîn
 );

11215 
	gWûdˇrdAtEnd
:

11216  
°¨tsWôh
–
adju°Ca£
–
°r
 ), 
m_∑âîn
 );

11217 
	gWûdˇrdAtBŸhEnds
:

11218  
c⁄èös
–
adju°Ca£
–
°r
 ), 
m_∑âîn
 );

11220 
CATCH_INTERNAL_ERROR
( "UnknownÉnum" );

11224 
	g°d
::
°rög
 
WûdˇrdP©ã∫
::
adju°Ca£
–
°d
::°rög c⁄°& 
°r
 ) const {

11225  
m_ˇ£Sísôivôy
 =
Ca£Sísôive
::
No
 ? 
toLowî
–
°r
 ) : str;

11231 
	~<iom™ù
>

11233 
usög
 
	guch¨
 = ;

11235 
«me•a˚
 
	gC©ch
 {

11237 
	g«me•a˚
 {

11239 
size_t
 
åaûögByãs
(
c
) {

11240 i‡((
	gc
 & 0xE0) == 0xC0) {

11243 i‡((
	gc
 & 0xF0) == 0xE0) {

11246 i‡((
	gc
 & 0xF8) == 0xF0) {

11249 
CATCH_INTERNAL_ERROR
("Invalid multibyte utf-8 start byteÉncountered");

11252 
uöt32_t
 
hódîVÆue
(
c
) {

11253 i‡((
	gc
 & 0xE0) == 0xC0) {

11254  
c
 & 0x1F;

11256 i‡((
	gc
 & 0xF0) == 0xE0) {

11257  
c
 & 0x0F;

11259 i‡((
	gc
 & 0xF8) == 0xF0) {

11260  
c
 & 0x07;

11262 
CATCH_INTERNAL_ERROR
("Invalid multibyte utf-8 start byteÉncountered");

11265 
hexEsˇ≥Ch¨
(
°d
::
o°ªam
& 
os
, 
c
) {

11266 
	gos
 << "\\x"

11267 << 
	g°d
::
uµîˇ£
 << 
°d
::
hex
 << std::
£tfûl
('0'Ë<< std::
£tw
(2)

11268 << 
°©ic_ˇ°
<>(
c
);

11273 
	gXmlEncode
::
XmlEncode
–
°d
::
°rög
 c⁄°& 
°r
, 
F‹Wh©
 
f‹Wh©
 )

11274 : 
m_°r
–
°r
 ),

11275 
m_f‹Wh©
–
f‹Wh©
 )

11278 
	gXmlEncode
::
ícodeTo
–
°d
::
o°ªam
& 
os
 ) const {

11282  
°d
::
size_t
 
idx
 = 0; 
	gidx
 < 
	gm_°r
.
size
(); ++ idx ) {

11283 
uch¨
 
	gc
 = 
m_°r
[
idx
];

11284 
	gc
) {

11285 '<': 
os
 << "&lt;"; ;

11286 '&': 
os
 << "&amp;"; ;

11290 i‡(
idx
 > 2 && 
m_°r
[idx - 1] == ']' && m_str[idx - 2] == ']')

11291 
os
 << "&gt;";

11293 
	gos
 << 
	gc
;

11297 i‡(
m_f‹Wh©
 =
F‹Aâribuãs
)

11298 
os
 << "&quot;";

11300 
	gos
 << 
	gc
;

11308 i‡(
c
 < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) {

11309 
hexEsˇ≥Ch¨
(
os
, 
c
);

11314 i‡(
	gc
 < 0x7F) {

11315 
	gos
 << 
	gc
;

11325 i‡(
	gc
 < 0xC0 ||

11326 
	gc
 >= 0xF8) {

11327 
hexEsˇ≥Ch¨
(
os
, 
c
);

11331 autÿ
	gícByãs
 = 
åaûögByãs
(
c
);

11333 i‡(
	gidx
 + 
	gícByãs
 - 1 >
m_°r
.
size
()) {

11334 
hexEsˇ≥Ch¨
(
os
, 
c
);

11340 
boﬁ
 
	gvÆid
 = 
åue
;

11341 
uöt32_t
 
	gvÆue
 = 
hódîVÆue
(
c
);

11342 
	g°d
::
size_t
 
n
 = 1; 
	gn
 < 
	gícByãs
; ++n) {

11343 
uch¨
 
	gnc
 = 
m_°r
[
idx
 + 
n
];

11344 
	gvÆid
 &((
nc
 & 0xC0) == 0x80);

11345 
	gvÆue
 = (
vÆue
 << 6Ë| (
nc
 & 0x3F);

11350 (!
	gvÆid
) ||

11352 (
	gvÆue
 < 0x80) ||

11353 (0x80 <
vÆue
 && vÆuê< 0x800 && 
ícByãs
 > 2) ||

11354 (0x800 < 
vÆue
 && vÆuê< 0x10000 && 
ícByãs
 > 3) ||

11356 (
vÆue
 >= 0x110000)

11358 
hexEsˇ≥Ch¨
(
os
, 
c
);

11363 
	g°d
::
size_t
 
n
 = 0; 
	gn
 < 
	gícByãs
; ++n) {

11364 
	gos
 << 
	gm_°r
[
idx
 + 
n
];

11366 
	gidx
 +
ícByãs
 - 1;

11372 
	g°d
::
o°ªam
& 
›î©‹
 << ( 
°d
::o°ªam& 
os
, 
XmlEncode
 c⁄°& 
	gxmlEncode
 ) {

11373 
	gxmlEncode
.
ícodeTo
–
os
 );

11374  
	gos
;

11377 
	gXmlWrôî
::
Sc›edEÀmít
::Sc›edEÀmít–
XmlWrôî
* 
wrôî
 )

11378 : 
m_wrôî
–
wrôî
 )

11381 
XmlWrôî
::
Sc›edEÀmít
::Sc›edEÀmít–Sc›edEÀmít&& 
Ÿhî
 ) 
n€x˚±


11382 : 
m_wrôî
–
Ÿhî
.m_writer ){

11383 
Ÿhî
.
m_wrôî
 = 
nuŒ±r
;

11385 
	gXmlWrôî
::
Sc›edEÀmít
& 
XmlWrôî
::Sc›edEÀmít::
›î©‹
=–Sc›edEÀmít&& 
Ÿhî
 ) 
n€x˚±
 {

11386 i‡–
m_wrôî
 ) {

11387 
m_wrôî
->
ídEÀmít
();

11389 
	gm_wrôî
 = 
Ÿhî
.
m_wrôî
;

11390 
	gŸhî
.
	gm_wrôî
 = 
nuŒ±r
;

11391  *
	gthis
;

11394 
	gXmlWrôî
::
Sc›edEÀmít
::~ScopedElement() {

11395 if–
m_wrôî
 )

11396 
m_wrôî
->
ídEÀmít
();

11399 
	gXmlWrôî
::
Sc›edEÀmít
& 
XmlWrôî
::Sc›edEÀmít::
wrôeText
–
°d
::
°rög
 c⁄°& 
ãxt
, 
boﬁ
 
ödít
 ) {

11400 
	gm_wrôî
->
wrôeText
–
ãxt
, 
ödít
 );

11401  *
	gthis
;

11404 
	gXmlWrôî
::
XmlWrôî
–
°d
::
o°ªam
& 
os
 ) : 
m_os
( os )

11406 
wrôeDe˛¨©i⁄
();

11409 
	gXmlWrôî
::~
XmlWrôî
() {

11410  !
m_ègs
.
em±y
() )

11411 
ídEÀmít
();

11414 
	gXmlWrôî
& XmlWrôî::
°¨tEÀmít
–
°d
::
°rög
 c⁄°& 
«me
 ) {

11415 
ísuªTagClo£d
();

11416 
√wlöeIfNe˚sßry
();

11417 
	gm_os
 << 
	gm_ödít
 << '<' << 
	g«me
;

11418 
	gm_ègs
.
push_back
–
«me
 );

11419 
	gm_ödít
 += " ";

11420 
	gm_ègIsO≥n
 = 
åue
;

11421  *
	gthis
;

11424 
	gXmlWrôî
::
Sc›edEÀmít
 
XmlWrôî
::
sc›edEÀmít
–
°d
::
°rög
 c⁄°& 
«me
 ) {

11425 
Sc›edEÀmít
 
sc›ed
–
this
 );

11426 
°¨tEÀmít
–
«me
 );

11427  
	gsc›ed
;

11430 
	gXmlWrôî
& XmlWrôî::
ídEÀmít
() {

11431 
√wlöeIfNe˚sßry
();

11432 
	gm_ödít
 = 
m_ödít
.
sub°r
–0, m_ödít.
size
()-2 );

11433 if–
	gm_ègIsO≥n
 ) {

11434 
	gm_os
 << "/>";

11435 
	gm_ègIsO≥n
 = 
Ál£
;

11438 
	gm_os
 << 
	gm_ödít
 << "</" << 
	gm_ègs
.
back
() << ">";

11440 
	gm_os
 << 
	g°d
::
ídl
;

11441 
	gm_ègs
.
p›_back
();

11442  *
	gthis
;

11445 
	gXmlWrôî
& XmlWrôî::
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, std::°rög c⁄°& 
©åibuã
 ) {

11446 if–!
«me
.
em±y
(Ë&& !
©åibuã
.empty() )

11447 
m_os
 << ' ' << 
«me
 << "=\"" << 
XmlEncode
–
©åibuã
, XmlEncode::
F‹Aâribuãs
 ) << '"';

11448  *
	gthis
;

11451 
	gXmlWrôî
& XmlWrôî::
wrôeAâribuã
–
°d
::
°rög
 c⁄°& 
«me
, 
boﬁ
 
©åibuã
 ) {

11452 
	gm_os
 << ' ' << 
	g«me
 << "=\"" << ( 
	g©åibuã
 ? "true" : "false" ) << '"';

11453  *
	gthis
;

11456 
	gXmlWrôî
& XmlWrôî::
wrôeText
–
°d
::
°rög
 c⁄°& 
ãxt
, 
boﬁ
 
ödít
 ) {

11457 if–!
	gãxt
.
em±y
() ){

11458 
boﬁ
 
	gègWasO≥n
 = 
m_ègIsO≥n
;

11459 
ísuªTagClo£d
();

11460 if–
	gègWasO≥n
 && 
	gödít
 )

11461 
	gm_os
 << 
	gm_ödít
;

11462 
	gm_os
 << 
XmlEncode
–
ãxt
 );

11463 
	gm_√edsNewlöe
 = 
åue
;

11465  *
	gthis
;

11468 
	gXmlWrôî
& XmlWrôî::
wrôeCommít
–
°d
::
°rög
 c⁄°& 
ãxt
 ) {

11469 
ísuªTagClo£d
();

11470 
	gm_os
 << 
	gm_ödít
 << "<!--" << 
	gãxt
 << "-->";

11471 
	gm_√edsNewlöe
 = 
åue
;

11472  *
	gthis
;

11475 
	gXmlWrôî
::
wrôeStyÀshìtRef
–
°d
::
°rög
 c⁄°& 
uæ
 ) {

11476 
m_os
 << "<?xml-°yÀshìàty≥=\"ãxt/x¶\" hªf=\"" << 
uæ
 << "\"?>\n";

11479 
	gXmlWrôî
& XmlWrôî::
wrôeBœnkLöe
() {

11480 
ísuªTagClo£d
();

11481 
	gm_os
 << '\n';

11482  *
	gthis
;

11485 
	gXmlWrôî
::
ísuªTagClo£d
() {

11486 if–
m_ègIsO≥n
 ) {

11487 
m_os
 << ">" << 
°d
::
ídl
;

11488 
	gm_ègIsO≥n
 = 
Ál£
;

11492 
	gXmlWrôî
::
wrôeDe˛¨©i⁄
() {

11493 
m_os
 << "<?xml version=\"1.0\"Éncoding=\"UTF-8\"?>\n";

11496 
	gXmlWrôî
::
√wlöeIfNe˚sßry
() {

11497 if–
m_√edsNewlöe
 ) {

11498 
m_os
 << 
°d
::
ídl
;

11499 
	gm_√edsNewlöe
 = 
Ál£
;

11506 
	~<c°rög
>

11507 
	~<cÊﬂt
>

11508 
	~<c°dio
>

11509 
	~<ˇs£π
>

11510 
	~<mem‹y
>

11512 
«me•a˚
 
	gC©ch
 {

11513 
¥ï¨eEx∑ndedEx¥essi⁄
(
As£πi⁄Resu…
& 
ªsu…
) {

11514 
	gªsu…
.
gëEx∑ndedEx¥essi⁄
();

11519 
	g°d
::
°rög
 
gëF‹m©ãdDuøti⁄
–
duøti⁄
 ) {

11524 c⁄° 
°d
::
size_t
 
maxDoubÀSize
 = 
DBL_MAX_10_EXP
 + 1 + 1 + 3 + 1;

11525 
	gbuf„r
[
maxDoubÀSize
];

11528 
EºnoGu¨d
 
	ggu¨d
;

11529 #ifde‡
_MSC_VER


11530 
•rötf_s
(
buf„r
, "%.3f", 
duøti⁄
);

11532 
•rötf
(
buf„r
, "%.3f", 
duøti⁄
);

11534  
	g°d
::
°rög
(
buf„r
);

11537 
	gTe°EvítLi°íîBa£
::
Te°EvítLi°íîBa£
(
Rï‹ãrC⁄fig
 c⁄° & 
_c⁄fig
)

11538 :
SåómögRï‹ãrBa£
(
_c⁄fig
) {}

11540 
Te°EvítLi°íîBa£
::
as£πi⁄Sèπög
(
As£πi⁄Info
 const &) {}

11542 
boﬁ
 
Te°EvítLi°íîBa£
::
as£πi⁄Ended
(
As£πi⁄Sèts
 const &) {

11543  
Ál£
;

11550 
	g«me•a˚
 {

11552 #ifde‡
CATCH_PLATFORM_MAC


11553 c⁄° * 
ÁûedSåög
() {  "FAILED"; }

11554 c⁄° * 
∑s£dSåög
() {  "PASSED"; }

11556 c⁄° * 
ÁûedSåög
() {  "failed"; }

11557 c⁄° * 
∑s£dSåög
() {  "passed"; }

11561 
	gC©ch
::
Cﬁour
::
Code
 
dimCﬁour
(Ë{  
C©ch
::Cﬁour::
FûeName
; }

11563 
	g°d
::
°rög
 
bŸhOrAŒ
–
°d
::
size_t
 
cou¡
 ) {

11564  
cou¡
 =1 ? 
°d
::
°rög
() :

11565 
cou¡
 == 2 ? "both " : "all " ;

11570 
«me•a˚
 
	gC©ch
 {

11571 
	g«me•a˚
 {

11578 
¥ötTŸÆs
(
°d
::
o°ªam
& 
out
, c⁄° 
TŸÆs
& 
tŸÆs
) {

11579 i‡(
	gtŸÆs
.
	gã°Ca£s
.
tŸÆ
() == 0) {

11580 
out
 << "NoÅestsÑan.";

11581 } i‡(
	gtŸÆs
.
	gã°Ca£s
.
	gÁûed
 =
tŸÆs
.
ã°Ca£s
.
tŸÆ
()) {

11582 
Cﬁour
 
cﬁour
(Cﬁour::
Resu…Eº‹
);

11583 c⁄° 
	g°d
::
°rög
 
quÆify_as£πi⁄s_Áûed
 =

11584 
tŸÆs
.
as£πi⁄s
.
Áûed
 =tŸÆs.as£πi⁄s.
tŸÆ
() ?

11585 
bŸhOrAŒ
(
tŸÆs
.
as£πi⁄s
.
Áûed
Ë: 
°d
::
°rög
();

11586 
	gout
 <<

11587 "Faûed " << 
bŸhOrAŒ
(
tŸÆs
.
ã°Ca£s
.
Áûed
)

11588 << 
∂uøli£
(
tŸÆs
.
ã°Ca£s
.
Áûed
, "test case") << ", "

11589 "Áûed " << 
	gquÆify_as£πi⁄s_Áûed
 <<

11590 
∂uøli£
(
tŸÆs
.
as£πi⁄s
.
Áûed
, "assertion") << '.';

11591 } i‡(
	gtŸÆs
.
	gas£πi⁄s
.
tŸÆ
() == 0) {

11592 
out
 <<

11593 "Pas£d " << 
bŸhOrAŒ
(
tŸÆs
.
ã°Ca£s
.
tŸÆ
())

11594 << 
∂uøli£
(
tŸÆs
.
ã°Ca£s
.
tŸÆ
(), "test case")

11596 } i‡(
	gtŸÆs
.
	gas£πi⁄s
.
	gÁûed
) {

11597 
Cﬁour
 
cﬁour
(Cﬁour::
Resu…Eº‹
);

11598 
	gout
 <<

11599 "Faûed " << 
∂uøli£
(
tŸÆs
.
ã°Ca£s
.
Áûed
, "test case") << ", "

11600 "Áûed " << 
∂uøli£
(
tŸÆs
.
as£πi⁄s
.
Áûed
, "assertion") << '.';

11602 
Cﬁour
 
cﬁour
(Cﬁour::
Resu…Suc˚ss
);

11603 
	gout
 <<

11604 "Pas£d " << 
bŸhOrAŒ
(
tŸÆs
.
ã°Ca£s
.
∑s£d
)

11605 << 
∂uøli£
(
tŸÆs
.
ã°Ca£s
.
∑s£d
, "test case") <<

11606 " wôh " << 
∂uøli£
(
tŸÆs
.
as£πi⁄s
.
∑s£d
, "assertion") << '.';

11611 ˛as†
	cAs£πi⁄Pröãr
 {

11612 
	gpublic
:

11613 
As£πi⁄Pröãr
& 
›î©‹
(As£πi⁄Pröã∏c⁄°&Ë
dñëe
;

11614 
As£πi⁄Pröãr
(As£πi⁄Pröã∏c⁄°&Ë
dñëe
;

11615 
As£πi⁄Pröãr
(
°d
::
o°ªam
& 
_°ªam
, 
As£πi⁄Sèts
 c⁄°& 
_°©s
, 
boﬁ
 
_¥ötInfoMesßges
)

11616 : 
°ªam
(
_°ªam
)

11617 , 
ªsu…
(
_°©s
.
as£πi⁄Resu…
)

11618 , 
mesßges
(
_°©s
.
öfoMesßges
)

11619 , 
ôMesßge
(
_°©s
.
öfoMesßges
.
begö
())

11620 , 
¥ötInfoMesßges
(
_¥ötInfoMesßges
) {}

11622 
¥öt
() {

11623 
¥ötSour˚Info
();

11625 
	gôMesßge
 = 
mesßges
.
begö
();

11627 
	gªsu…
.
gëResu…Ty≥
()) {

11628 
	gResu…Was
::
Ok
:

11629 
¥ötResu…Ty≥
(
Cﬁour
::
Resu…Suc˚ss
, 
∑s£dSåög
());

11630 
¥ötOrigöÆEx¥essi⁄
();

11631 
¥ötRec⁄°ru˘edEx¥essi⁄
();

11632 i‡(!
	gªsu…
.
hasEx¥essi⁄
())

11633 
¥ötRemaöögMesßges
(
Cﬁour
::
N⁄e
);

11635 
¥ötRemaöögMesßges
();

11637 
	gResu…Was
::
Ex¥essi⁄Faûed
:

11638 i‡(
ªsu…
.
isOk
())

11639 
¥ötResu…Ty≥
(
Cﬁour
::
Resu…Suc˚ss
, 
ÁûedSåög
(Ë+ 
°d
::
°rög
(" - but was ok"));

11641 
¥ötResu…Ty≥
(
Cﬁour
::
Eº‹
, 
ÁûedSåög
());

11642 
¥ötOrigöÆEx¥essi⁄
();

11643 
¥ötRec⁄°ru˘edEx¥essi⁄
();

11644 
¥ötRemaöögMesßges
();

11646 
	gResu…Was
::
ThªwEx˚±i⁄
:

11647 
¥ötResu…Ty≥
(
Cﬁour
::
Eº‹
, 
ÁûedSåög
());

11648 
¥ötIssue
("unexpectedÉxception with message:");

11649 
¥ötMesßge
();

11650 
¥ötEx¥essi⁄Was
();

11651 
¥ötRemaöögMesßges
();

11653 
	gResu…Was
::
F©ÆEº‹C⁄dôi⁄
:

11654 
¥ötResu…Ty≥
(
Cﬁour
::
Eº‹
, 
ÁûedSåög
());

11655 
¥ötIssue
("fatalÉrror condition with message:");

11656 
¥ötMesßge
();

11657 
¥ötEx¥essi⁄Was
();

11658 
¥ötRemaöögMesßges
();

11660 
	gResu…Was
::
Did¡ThrowEx˚±i⁄
:

11661 
¥ötResu…Ty≥
(
Cﬁour
::
Eº‹
, 
ÁûedSåög
());

11662 
¥ötIssue
("expectedÉxception, gotÇone");

11663 
¥ötEx¥essi⁄Was
();

11664 
¥ötRemaöögMesßges
();

11666 
	gResu…Was
::
Info
:

11667 
¥ötResu…Ty≥
(
Cﬁour
::
N⁄e
, "info");

11668 
¥ötMesßge
();

11669 
¥ötRemaöögMesßges
();

11671 
	gResu…Was
::
W¨nög
:

11672 
¥ötResu…Ty≥
(
Cﬁour
::
N⁄e
, "warning");

11673 
¥ötMesßge
();

11674 
¥ötRemaöögMesßges
();

11676 
	gResu…Was
::
Ex∂icôFaûuª
:

11677 
¥ötResu…Ty≥
(
Cﬁour
::
Eº‹
, 
ÁûedSåög
());

11678 
¥ötIssue
("explicitly");

11679 
¥ötRemaöögMesßges
(
Cﬁour
::
N⁄e
);

11682 
	gResu…Was
::
Unknown
:

11683 
Resu…Was
::
FaûuªBô
:

11684 
Resu…Was
::
Ex˚±i⁄
:

11685 
¥ötResu…Ty≥
(
Cﬁour
::
Eº‹
, "** internalÉrror **");

11690 
	g¥iv©e
:

11691 
¥ötSour˚Info
() const {

11692 
Cﬁour
 
cﬁourGu¨d
(Cﬁour::
FûeName
);

11693 
	g°ªam
 << 
	gªsu…
.
gëSour˚Info
() << ':';

11696 
¥ötResu…Ty≥
(
Cﬁour
::
Code
 
cﬁour
, 
°d
::
°rög
 c⁄°& 
∑ssOrFaû
) const {

11697 i‡(!
∑ssOrFaû
.
em±y
()) {

11699 
Cﬁour
 
cﬁourGu¨d
(
cﬁour
);

11700 
	g°ªam
 << ' ' << 
	g∑ssOrFaû
;

11702 
	g°ªam
 << ':';

11706 
¥ötIssue
(
°d
::
°rög
 c⁄°& 
issue
) const {

11707 
°ªam
 << ' ' << 
issue
;

11710 
¥ötEx¥essi⁄Was
() {

11711 i‡(
	gªsu…
.
hasEx¥essi⁄
()) {

11712 
	g°ªam
 << ';';

11714 
Cﬁour
 
cﬁour
(
dimCﬁour
());

11715 
	g°ªam
 << "Éxpression was:";

11717 
¥ötOrigöÆEx¥essi⁄
();

11721 
¥ötOrigöÆEx¥essi⁄
() const {

11722 i‡(
	gªsu…
.
hasEx¥essi⁄
()) {

11723 
	g°ªam
 << ' ' << 
	gªsu…
.
gëEx¥essi⁄
();

11727 
¥ötRec⁄°ru˘edEx¥essi⁄
() const {

11728 i‡(
	gªsu…
.
hasEx∑ndedEx¥essi⁄
()) {

11730 
Cﬁour
 
cﬁour
(
dimCﬁour
());

11731 
	g°ªam
 << " for: ";

11733 
	g°ªam
 << 
	gªsu…
.
gëEx∑ndedEx¥essi⁄
();

11737 
¥ötMesßge
() {

11738 i‡(
	gôMesßge
 !
mesßges
.
íd
()) {

11739 
°ªam
 << " '" << 
ôMesßge
->
mesßge
 << '\'';

11740 ++
	gôMesßge
;

11744 
¥ötRemaöögMesßges
(
Cﬁour
::
Code
 
cﬁour
 = 
dimCﬁour
()) {

11745 i‡(
ôMesßge
 =
mesßges
.
íd
())

11749 
	g°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ôEnd
 = 
mesßges
.
íd
();

11750 c⁄° 
	g°d
::
size_t
 
N
 = 
°©ic_ˇ°
<
°d
::size_t>(°d::
di°™˚
(
ôMesßge
, 
ôEnd
));

11753 
Cﬁour
 
cﬁourGu¨d
(
cﬁour
);

11754 
	g°ªam
 << " wôh " << 
∂uøli£
(
N
, "message") << ':';

11757 ; 
	gôMesßge
 !
ôEnd
; ) {

11759 i‡(
	g¥ötInfoMesßges
 || 
	gôMesßge
->
	gty≥
 !
Resu…Was
::
Info
) {

11760 
°ªam
 << " '" << 
ôMesßge
->
mesßge
 << '\'';

11761 i‡(++
	gôMesßge
 !
ôEnd
) {

11762 
Cﬁour
 
cﬁourGu¨d
(
dimCﬁour
());

11763 
	g°ªam
 << "ánd";

11769 
	g¥iv©e
:

11770 
°d
::
o°ªam
& 
°ªam
;

11771 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
;

11772 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
mesßges
;

11773 
	g°d
::
ve˘‹
<
MesßgeInfo
>::
c⁄°_ôî©‹
 
ôMesßge
;

11774 
boﬁ
 
	g¥ötInfoMesßges
;

11779 
	g°d
::
°rög
 
Com∑˘Rï‹ãr
::
	$gëDes¸ùti⁄
() {

11781 
	}
}

11783 
Rï‹ãrPª„ªn˚s
 
	gCom∑˘Rï‹ãr
::
	$gëPª„ªn˚s
() const {

11784  
m_ªp‹ãrPªfs
;

11785 
	}
}

11787 
	gCom∑˘Rï‹ãr
::
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) {

11788 
°ªam
 << "Nÿã° ca£†m©ched '" << 
•ec
 << '\'' << 
°d
::
ídl
;

11791 
	gCom∑˘Rï‹ãr
::
	$as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& ) {
	}
}

11793 
boﬁ
 
Com∑˘Rï‹ãr
::
	$as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
_as£πi⁄Sèts
 ) {

11794 
As£πi⁄Resu…
 c⁄°& 
ªsu…
 = 
_as£πi⁄Sèts
.
as£πi⁄Resu…
;

11796 
boﬁ
 
¥ötInfoMesßges
 = 
åue
;

11799 if–!
m_c⁄fig
->
	`ö˛udeSuc˚ssfulResu…s
(Ë&& 
ªsu…
.
	`isOk
() ) {

11800 if–
ªsu…
.
	`gëResu…Ty≥
(Ë!
Resu…Was
::
W¨nög
 )

11801  
Ál£
;

11802 
¥ötInfoMesßges
 = 
Ál£
;

11805 
As£πi⁄Pröãr
 
	`¥öãr
–
°ªam
, 
_as£πi⁄Sèts
, 
¥ötInfoMesßges
 );

11806 
¥öãr
.
	`¥öt
();

11808 
°ªam
 << 
°d
::
ídl
;

11809  
åue
;

11810 
	}
}

11812 
	gCom∑˘Rï‹ãr
::
	$£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& 
_£˘i⁄Sèts
) {

11813 i‡(
m_c⁄fig
->
	`showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
) {

11814 
°ªam
 << 
	`gëF‹m©ãdDuøti⁄
(
_£˘i⁄Sèts
.
duøti⁄InSec⁄ds
Ë<< " s: " << _£˘i⁄Sèts.
£˘i⁄Info
.
«me
 << 
°d
::
ídl
;

11816 
	}
}

11818 
	gCom∑˘Rï‹ãr
::
	$ã°RunEnded
–
Te°RunSèts
 c⁄°& 
_ã°RunSèts
 ) {

11819 
	`¥ötTŸÆs
–
°ªam
, 
_ã°RunSèts
.
tŸÆs
 );

11820 
°ªam
 << '\n' << 
°d
::
ídl
;

11821 
SåómögRï‹ãrBa£
::
	`ã°RunEnded
–
_ã°RunSèts
 );

11822 
	}
}

11824 
	gCom∑˘Rï‹ãr
::~
	$Com∑˘Rï‹ãr
(Ë{
	}
}

11826 
CATCH_REGISTER_REPORTER
–"com∑˘", 
Com∑˘Rï‹ãr
 )

11832 
	~<cÊﬂt
>

11833 
	~<c°dio
>

11835 #i‡
deföed
(
_MSC_VER
)

11836 #¥agm®
w¨nög
(
push
)

11837 #¥agm®
w¨nög
(
dißbÀ
:4061)

11842 
«me•a˚
 
	gC©ch
 {

11844 
	g«me•a˚
 {

11847 ˛as†
	cC⁄sﬁeAs£πi⁄Pröãr
 {

11848 
	gpublic
:

11849 
C⁄sﬁeAs£πi⁄Pröãr
& 
›î©‹
(C⁄sﬁeAs£πi⁄Pröã∏c⁄°&Ë
dñëe
;

11850 
C⁄sﬁeAs£πi⁄Pröãr
(C⁄sﬁeAs£πi⁄Pröã∏c⁄°&Ë
dñëe
;

11851 
C⁄sﬁeAs£πi⁄Pröãr
(
°d
::
o°ªam
& 
_°ªam
, 
As£πi⁄Sèts
 c⁄°& 
_°©s
, 
boﬁ
 
_¥ötInfoMesßges
)

11852 : 
°ªam
(
_°ªam
),

11853 
°©s
(
_°©s
),

11854 
ªsu…
(
_°©s
.
as£πi⁄Resu…
),

11855 
cﬁour
(
Cﬁour
::
N⁄e
),

11856 
mesßge
(
ªsu…
.
gëMesßge
()),

11857 
mesßges
(
_°©s
.
öfoMesßges
),

11858 
¥ötInfoMesßges
(
_¥ötInfoMesßges
) {

11859 
	gªsu…
.
gëResu…Ty≥
()) {

11860 
	gResu…Was
::
Ok
:

11861 
cﬁour
 = 
Cﬁour
::
Suc˚ss
;

11862 
	g∑ssOrFaû
 = "PASSED";

11864 i‡(
	g_°©s
.
	göfoMesßges
.
size
() == 1)

11865 
mesßgeLabñ
 = "with message";

11866 i‡(
	g_°©s
.
	göfoMesßges
.
size
() > 1)

11867 
	gmesßgeLabñ
 = "with messages";

11869 
	gResu…Was
::
Ex¥essi⁄Faûed
:

11870 i‡(
ªsu…
.
isOk
()) {

11871 
cﬁour
 = 
Cﬁour
::
Suc˚ss
;

11872 
	g∑ssOrFaû
 = "FAILED - but was ok";

11874 
	gcﬁour
 = 
Cﬁour
::
Eº‹
;

11875 
	g∑ssOrFaû
 = "FAILED";

11877 i‡(
	g_°©s
.
	göfoMesßges
.
size
() == 1)

11878 
mesßgeLabñ
 = "with message";

11879 i‡(
	g_°©s
.
	göfoMesßges
.
size
() > 1)

11880 
	gmesßgeLabñ
 = "with messages";

11882 
	gResu…Was
::
ThªwEx˚±i⁄
:

11883 
cﬁour
 = 
Cﬁour
::
Eº‹
;

11884 
	g∑ssOrFaû
 = "FAILED";

11885 
	gmesßgeLabñ
 = "dueÅo unexpectedÉxception with ";

11886 i‡(
	g_°©s
.
	göfoMesßges
.
size
() == 1)

11887 
mesßgeLabñ
 += "message";

11888 i‡(
	g_°©s
.
	göfoMesßges
.
size
() > 1)

11889 
	gmesßgeLabñ
 += "messages";

11891 
	gResu…Was
::
F©ÆEº‹C⁄dôi⁄
:

11892 
cﬁour
 = 
Cﬁour
::
Eº‹
;

11893 
	g∑ssOrFaû
 = "FAILED";

11894 
	gmesßgeLabñ
 = "dueÅoá fatalÉrror condition";

11896 
	gResu…Was
::
Did¡ThrowEx˚±i⁄
:

11897 
cﬁour
 = 
Cﬁour
::
Eº‹
;

11898 
	g∑ssOrFaû
 = "FAILED";

11899 
	gmesßgeLabñ
 = "becauseÇoÉxception wasÅhrown where one wasÉxpected";

11901 
	gResu…Was
::
Info
:

11902 
mesßgeLabñ
 = "info";

11904 
	gResu…Was
::
W¨nög
:

11905 
mesßgeLabñ
 = "warning";

11907 
	gResu…Was
::
Ex∂icôFaûuª
:

11908 
∑ssOrFaû
 = "FAILED";

11909 
	gcﬁour
 = 
Cﬁour
::
Eº‹
;

11910 i‡(
	g_°©s
.
	göfoMesßges
.
size
() == 1)

11911 
mesßgeLabñ
 = "explicitly with message";

11912 i‡(
	g_°©s
.
	göfoMesßges
.
size
() > 1)

11913 
	gmesßgeLabñ
 = "explicitly with messages";

11916 
	gResu…Was
::
Unknown
:

11917 
Resu…Was
::
FaûuªBô
:

11918 
Resu…Was
::
Ex˚±i⁄
:

11919 
∑ssOrFaû
 = "** internalÉrror **";

11920 
	gcﬁour
 = 
Cﬁour
::
Eº‹
;

11925 
¥öt
() const {

11926 
¥ötSour˚Info
();

11927 i‡(
	g°©s
.
	gtŸÆs
.
	gas£πi⁄s
.
tŸÆ
() > 0) {

11928 i‡(
	gªsu…
.
isOk
())

11929 
	g°ªam
 << '\n';

11930 
¥ötResu…Ty≥
();

11931 
¥ötOrigöÆEx¥essi⁄
();

11932 
¥ötRec⁄°ru˘edEx¥essi⁄
();

11934 
	g°ªam
 << '\n';

11936 
¥ötMesßge
();

11939 
	g¥iv©e
:

11940 
¥ötResu…Ty≥
() const {

11941 i‡(!
∑ssOrFaû
.
em±y
()) {

11942 
Cﬁour
 
cﬁourGu¨d
(
cﬁour
);

11943 
	g°ªam
 << 
	g∑ssOrFaû
 << ":\n";

11946 
¥ötOrigöÆEx¥essi⁄
() const {

11947 i‡(
	gªsu…
.
hasEx¥essi⁄
()) {

11948 
Cﬁour
 
cﬁourGu¨d
(Cﬁour::
OrigöÆEx¥essi⁄
);

11949 
	g°ªam
 << " ";

11950 
	g°ªam
 << 
	gªsu…
.
gëEx¥essi⁄InMa¸o
();

11951 
	g°ªam
 << '\n';

11954 
¥ötRec⁄°ru˘edEx¥essi⁄
() const {

11955 i‡(
	gªsu…
.
hasEx∑ndedEx¥essi⁄
()) {

11956 
	g°ªam
 << "withÉxpansion:\n";

11957 
Cﬁour
 
cﬁourGu¨d
(Cﬁour::
Rec⁄°ru˘edEx¥essi⁄
);

11958 
	g°ªam
 << 
Cﬁumn
(
ªsu…
.
gëEx∑ndedEx¥essi⁄
()).
ödít
(2) << '\n';

11961 
¥ötMesßge
() const {

11962 i‡(!
	gmesßgeLabñ
.
em±y
())

11963 
	g°ªam
 << 
	gmesßgeLabñ
 << ':' << '\n';

11964 autÿc⁄°& 
	gmsg
 : 
mesßges
) {

11966 i‡(
¥ötInfoMesßges
 || 
msg
.
ty≥
 !
Resu…Was
::
Info
)

11967 
°ªam
 << 
Cﬁumn
(
msg
.
mesßge
).
ödít
(2) << '\n';

11970 
¥ötSour˚Info
() const {

11971 
Cﬁour
 
cﬁourGu¨d
(Cﬁour::
FûeName
);

11972 
	g°ªam
 << 
	gªsu…
.
gëSour˚Info
() << ": ";

11975 
	g°d
::
o°ªam
& 
°ªam
;

11976 
As£πi⁄Sèts
 c⁄°& 
	g°©s
;

11977 
As£πi⁄Resu…
 c⁄°& 
	gªsu…
;

11978 
	gCﬁour
::
Code
 
cﬁour
;

11979 
	g°d
::
°rög
 
∑ssOrFaû
;

11980 
	g°d
::
°rög
 
mesßgeLabñ
;

11981 
	g°d
::
°rög
 
mesßge
;

11982 
	g°d
::
ve˘‹
<
MesßgeInfo
> 
mesßges
;

11983 
boﬁ
 
	g¥ötInfoMesßges
;

11986 
	g°d
::
size_t
 
makeR©io
(
°d
::size_à
numbî
, std::size_à
tŸÆ
) {

11987 
°d
::
size_t
 
øtio
 = 
tŸÆ
 > 0 ? 
CATCH_CONFIG_CONSOLE_WIDTH
 * 
numbî
 /Åotal : 0;

11988  (
	gøtio
 =0 && 
numbî
 > 0Ë? 1 : 
øtio
;

11991 
	g°d
::
size_t
& 
födMax
(
°d
::size_t& 
i
, std::size_t& 
j
, std::size_t& 
k
) {

11992 i‡(
i
 > 
j
 && i > 
k
)

11993  
i
;

11994 i‡(
	gj
 > 
	gk
)

11995  
	gj
;

11997  
	gk
;

12000 
	sCﬁumnInfo
 {

12001 
	eJu°ifiˇti⁄
 { 
	gLe·
, 
	gRight
 };

12002 
	g°d
::
°rög
 
«me
;

12003 
	gwidth
;

12004 
Ju°ifiˇti⁄
 
	gju°ifiˇti⁄
;

12006 
	sCﬁumnBªak
 {};

12007 
	sRowBªak
 {};

12009 ˛as†
	cDuøti⁄
 {

12010 ˛as†
	cUnô
 {

12011 
	gAuto
,

12012 
	gN™o£c⁄ds
,

12013 
	gMi¸o£c⁄ds
,

12014 
	gMûli£c⁄ds
,

12015 
	gSec⁄ds
,

12016 
	gMöuãs


12018 c⁄° 
uöt64_t
 
	gs_«no£c⁄dsInAMi¸o£c⁄d
 = 1000;

12019 c⁄° 
uöt64_t
 
	gs_«no£c⁄dsInAMûli£c⁄d
 = 1000 * 
s_«no£c⁄dsInAMi¸o£c⁄d
;

12020 c⁄° 
uöt64_t
 
	gs_«no£c⁄dsInASec⁄d
 = 1000 * 
s_«no£c⁄dsInAMûli£c⁄d
;

12021 c⁄° 
uöt64_t
 
	gs_«no£c⁄dsInAMöuã
 = 60 * 
s_«no£c⁄dsInASec⁄d
;

12023 
uöt64_t
 
	gm_öN™o£c⁄ds
;

12024 
Unô
 
	gm_unôs
;

12026 
	gpublic
:

12027 
ex∂icô
 
Duøti⁄
(
uöt64_t
 
öN™o£c⁄ds
, 
Unô
 
unôs
 = Unô::
Auto
)

12028 : 
m_öN™o£c⁄ds
(
öN™o£c⁄ds
),

12029 
m_unôs
(
unôs
) {

12030 i‡(
	gm_unôs
 =
Unô
::
Auto
) {

12031 i‡(
m_öN™o£c⁄ds
 < 
s_«no£c⁄dsInAMi¸o£c⁄d
)

12032 
m_unôs
 = 
Unô
::
N™o£c⁄ds
;

12033 i‡(
	gm_öN™o£c⁄ds
 < 
	gs_«no£c⁄dsInAMûli£c⁄d
)

12034 
	gm_unôs
 = 
Unô
::
Mi¸o£c⁄ds
;

12035 i‡(
	gm_öN™o£c⁄ds
 < 
	gs_«no£c⁄dsInASec⁄d
)

12036 
	gm_unôs
 = 
Unô
::
Mûli£c⁄ds
;

12037 i‡(
	gm_öN™o£c⁄ds
 < 
	gs_«no£c⁄dsInAMöuã
)

12038 
	gm_unôs
 = 
Unô
::
Sec⁄ds
;

12040 
	gm_unôs
 = 
Unô
::
Möuãs
;

12045 autÿ
vÆue
() const -> {

12046 
	gm_unôs
) {

12047 
	gUnô
::
Mi¸o£c⁄ds
:

12048  
m_öN™o£c⁄ds
 / 
°©ic_ˇ°
<>(
s_«no£c⁄dsInAMi¸o£c⁄d
);

12049 
	gUnô
::
Mûli£c⁄ds
:

12050  
m_öN™o£c⁄ds
 / 
°©ic_ˇ°
<>(
s_«no£c⁄dsInAMûli£c⁄d
);

12051 
	gUnô
::
Sec⁄ds
:

12052  
m_öN™o£c⁄ds
 / 
°©ic_ˇ°
<>(
s_«no£c⁄dsInASec⁄d
);

12053 
	gUnô
::
Möuãs
:

12054  
m_öN™o£c⁄ds
 / 
°©ic_ˇ°
<>(
s_«no£c⁄dsInAMöuã
);

12056  
°©ic_ˇ°
<>(
m_öN™o£c⁄ds
);

12059 autÿ
unôsAsSåög
(Ëc⁄° -> 
	g°d
::
°rög
 {

12060 
m_unôs
) {

12061 
Unô
::
N™o£c⁄ds
:

12063 
	gUnô
::
Mi¸o£c⁄ds
:

12065 
	gUnô
::
Mûli£c⁄ds
:

12067 
	gUnô
::
Sec⁄ds
:

12069 
	gUnô
::
Möuãs
:

12076 
‰õnd
áutÿ
	g›î©‹
 << (
	g°d
::
o°ªam
& 
os
, 
Duøti⁄
 c⁄°& 
	gduøti⁄
) -> std::ostream& {

12077  
os
 << 
duøti⁄
.
vÆue
(Ë<< " " << duøti⁄.
unôsAsSåög
();

12082 ˛as†
	cTabÀPröãr
 {

12083 
	g°d
::
o°ªam
& 
m_os
;

12084 
	g°d
::
ve˘‹
<
CﬁumnInfo
> 
m_cﬁumnInfos
;

12085 
	g°d
::
o°rög°ªam
 
m_oss
;

12086 
	gm_cuºítCﬁumn
 = -1;

12087 
boﬁ
 
	gm_isO≥n
 = 
Ál£
;

12089 
	gpublic
:

12090 
TabÀPröãr
–
°d
::
o°ªam
& 
os
, std::
ve˘‹
<
CﬁumnInfo
> 
cﬁumnInfos
 )

12091 : 
m_os
–
os
 ),

12092 
m_cﬁumnInfos
–
°d
::
move
–
cﬁumnInfos
 ) ) {}

12094 autÿ
cﬁumnInfos
(Ëc⁄° -> 
°d
::
ve˘‹
<
CﬁumnInfo
> const& {

12095  
m_cﬁumnInfos
;

12098 
›í
() {

12099 i‡(!
	gm_isO≥n
) {

12100 
	gm_isO≥n
 = 
åue
;

12101 *
	gthis
 << 
RowBªak
();

12102 autÿc⁄°& 
	göfo
 : 
m_cﬁumnInfos
)

12103 *
this
 << 
öfo
.
«me
 << 
CﬁumnBªak
();

12104 *
	gthis
 << 
RowBªak
();

12105 
	gm_os
 << 
	gC©ch
::
gëLöeOfCh¨s
<'-'>() << "\n";

12108 
˛o£
() {

12109 i‡(
	gm_isO≥n
) {

12110 *
	gthis
 << 
RowBªak
();

12111 
	gm_os
 << 
	g°d
::
ídl
;

12112 
	gm_isO≥n
 = 
Ál£
;

12116 
	gãm∂©e
<
ty≥«me
 
	gT
>

12117 
‰õnd
 
	gTabÀPröãr
& 
	g›î©‹
 << (TabÀPröãr& 
	gç
, 
T
 c⁄°& 
	gvÆue
) {

12118 
	gç
.
	gm_oss
 << 
	gvÆue
;

12119  
	gç
;

12122 
‰õnd
 
	gTabÀPröãr
& 
	g›î©‹
 << (TabÀPröãr& 
	gç
, 
	gCﬁumnBªak
) {

12123 autÿ
	gcﬁSå
 = 
ç
.
m_oss
.
°r
();

12125 autÿ
	g°rSize
 = 
C©ch
::
SåögRef
(
cﬁSå
).
numbîOfCh¨a˘îs
();

12126 
	gç
.
	gm_oss
.
°r
("");

12127 
	gç
.
›í
();

12128 i‡(
	gç
.
	gm_cuºítCﬁumn
 =
°©ic_ˇ°
<>(
ç
.
m_cﬁumnInfos
.
size
() - 1)) {

12129 
ç
.
m_cuºítCﬁumn
 = -1;

12130 
	gç
.
	gm_os
 << "\n";

12132 
	gç
.
	gm_cuºítCﬁumn
++;

12134 autÿ
	gcﬁInfo
 = 
ç
.
m_cﬁumnInfos
[ç.
m_cuºítCﬁumn
];

12135 autÿ
	g∑ddög
 = (
°rSize
 + 2 < 
°©ic_ˇ°
<
°d
::
size_t
>(
cﬁInfo
.
width
))

12136 ? 
°d
::
°rög
(
cﬁInfo
.
width
 - (
°rSize
 + 2), ' ')

12137 : 
°d
::
°rög
();

12138 i‡(
	gcﬁInfo
.
	gju°ifiˇti⁄
 =
CﬁumnInfo
::
Le·
)

12139 
ç
.
m_os
 << 
cﬁSå
 << 
∑ddög
 << " ";

12141 
	gç
.
	gm_os
 << 
	g∑ddög
 << 
	gcﬁSå
 << " ";

12142  
	gç
;

12145 
‰õnd
 
	gTabÀPröãr
& 
	g›î©‹
 << (TabÀPröãr& 
	gç
, 
	gRowBªak
) {

12146 i‡(
	gç
.
	gm_cuºítCﬁumn
 > 0) {

12147 
	gç
.
	gm_os
 << "\n";

12148 
	gç
.
	gm_cuºítCﬁumn
 = -1;

12150  
	gç
;

12154 
	gC⁄sﬁeRï‹ãr
::
	$C⁄sﬁeRï‹ãr
(
Rï‹ãrC⁄fig
 c⁄°& 
c⁄fig
)

12155 : 
	`SåómögRï‹ãrBa£
(
c⁄fig
),

12156 
	`m_èbÀPröãr
(
√w
 
	`TabÀPröãr
(
c⁄fig
.
	`°ªam
(),

12158 { "bíchm¨kÇame", 
CATCH_CONFIG_CONSOLE_WIDTH
 - 32, 
CﬁumnInfo
::
Le·
 },

12159 { "ôîs", 8, 
CﬁumnInfo
::
Right
 },

12160 { "ñ≠£dÇs", 14, 
CﬁumnInfo
::
Right
 },

12161 { "avîage", 14, 
CﬁumnInfo
::
Right
 }

12162 
	}
})) {}

12163 
C⁄sﬁeRï‹ãr
::~ConsoleReporter() = ;

12165 
	g°d
::
°rög
 
C⁄sﬁeRï‹ãr
::
	$gëDes¸ùti⁄
() {

12167 
	}
}

12169 
	gC⁄sﬁeRï‹ãr
::
noM©chögTe°Ca£s
(
°d
::
°rög
 c⁄°& 
•ec
) {

12170 
°ªam
 << "Nÿã° ca£†m©ched '" << 
•ec
 << '\'' << 
°d
::
ídl
;

12173 
	gC⁄sﬁeRï‹ãr
::
	$as£πi⁄Sèπög
(
As£πi⁄Info
 c⁄°&Ë{
	}
}

12175 
boﬁ
 
C⁄sﬁeRï‹ãr
::
	$as£πi⁄Ended
(
As£πi⁄Sèts
 c⁄°& 
_as£πi⁄Sèts
) {

12176 
As£πi⁄Resu…
 c⁄°& 
ªsu…
 = 
_as£πi⁄Sèts
.
as£πi⁄Resu…
;

12178 
boﬁ
 
ö˛udeResu…s
 = 
m_c⁄fig
->
	`ö˛udeSuc˚ssfulResu…s
(Ë|| !
ªsu…
.
	`isOk
();

12181 i‡(!
ö˛udeResu…s
 && 
ªsu…
.
	`gëResu…Ty≥
(Ë!
Resu…Was
::
W¨nög
)

12182  
Ál£
;

12184 
	`œzyPröt
();

12186 
C⁄sﬁeAs£πi⁄Pröãr
 
	`¥öãr
(
°ªam
, 
_as£πi⁄Sèts
, 
ö˛udeResu…s
);

12187 
¥öãr
.
	`¥öt
();

12188 
°ªam
 << 
°d
::
ídl
;

12189  
åue
;

12190 
	}
}

12192 
	gC⁄sﬁeRï‹ãr
::
	$£˘i⁄Sèπög
(
Se˘i⁄Info
 c⁄°& 
_£˘i⁄Info
) {

12193 
m_hódîPröãd
 = 
Ál£
;

12194 
SåómögRï‹ãrBa£
::
	`£˘i⁄Sèπög
(
_£˘i⁄Info
);

12195 
	}
}

12196 
	gC⁄sﬁeRï‹ãr
::
	$£˘i⁄Ended
(
Se˘i⁄Sèts
 c⁄°& 
_£˘i⁄Sèts
) {

12197 
m_èbÀPröãr
->
	`˛o£
();

12198 i‡(
_£˘i⁄Sèts
.
missögAs£πi⁄s
) {

12199 
	`œzyPröt
();

12200 
Cﬁour
 
	`cﬁour
(Cﬁour::
Resu…Eº‹
);

12201 i‡(
m_£˘i⁄Sèck
.
	`size
() > 1)

12202 
°ªam
 << "\nNoássertions in section";

12204 
°ªam
 << "\nNoássertions inÅest case";

12205 
°ªam
 << " '" << 
_£˘i⁄Sèts
.
£˘i⁄Info
.
«me
 << "'\n" << 
°d
::
ídl
;

12207 i‡(
m_c⁄fig
->
	`showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
) {

12208 
°ªam
 << 
	`gëF‹m©ãdDuøti⁄
(
_£˘i⁄Sèts
.
duøti⁄InSec⁄ds
Ë<< " s: " << _£˘i⁄Sèts.
£˘i⁄Info
.
«me
 << 
°d
::
ídl
;

12210 i‡(
m_hódîPröãd
) {

12211 
m_hódîPröãd
 = 
Ál£
;

12213 
SåómögRï‹ãrBa£
::
	`£˘i⁄Ended
(
_£˘i⁄Sèts
);

12214 
	}
}

12216 
	gC⁄sﬁeRï‹ãr
::
	$bíchm¨kSèπög
(
Bíchm¨kInfo
 c⁄°& 
öfo
) {

12217 
	`œzyPrötWôhoutClosögBíchm¨kTabÀ
();

12219 autÿ
«meCﬁ
 = 
	`Cﬁumn
–
öfo
.
«me
 ).
	`width
–
°©ic_ˇ°
<
°d
::
size_t
>–
m_èbÀPröãr
->
	`cﬁumnInfos
()[0].
width
 - 2 ) );

12221 
boﬁ
 
fú°Löe
 = 
åue
;

12222 autÿ
löe
 : 
«meCﬁ
) {

12223 i‡(!
fú°Löe
)

12224 (*
m_èbÀPröãr
Ë<< 
	`CﬁumnBªak
() << ColumnBreak() << ColumnBreak();

12226 
fú°Löe
 = 
Ál£
;

12228 (*
m_èbÀPröãr
Ë<< 
löe
 << 
	`CﬁumnBªak
();

12230 
	}
}

12231 
	gC⁄sﬁeRï‹ãr
::
	$bíchm¨kEnded
(
Bíchm¨kSèts
 c⁄°& 
°©s
) {

12232 
Duøti⁄
 
	`avîage
(
°©s
.
ñ≠£dTimeInN™o£c⁄ds
 / sèts.
ôî©i⁄s
);

12233 (*
m_èbÀPröãr
)

12234 << 
°©s
.
ôî©i⁄s
 << 
	`CﬁumnBªak
()

12235 << 
°©s
.
ñ≠£dTimeInN™o£c⁄ds
 << 
	`CﬁumnBªak
()

12236 << 
avîage
 << 
	`CﬁumnBªak
();

12237 
	}
}

12239 
	gC⁄sﬁeRï‹ãr
::
	$ã°Ca£Ended
(
Te°Ca£Sèts
 c⁄°& 
_ã°Ca£Sèts
) {

12240 
m_èbÀPröãr
->
	`˛o£
();

12241 
SåómögRï‹ãrBa£
::
	`ã°Ca£Ended
(
_ã°Ca£Sèts
);

12242 
m_hódîPröãd
 = 
Ál£
;

12243 
	}
}

12244 
	gC⁄sﬁeRï‹ãr
::
	$ã°GroupEnded
(
Te°GroupSèts
 c⁄°& 
_ã°GroupSèts
) {

12245 i‡(
cuºítGroupInfo
.
u£d
) {

12246 
	`¥ötSumm¨yDividî
();

12247 
°ªam
 << "Summ¨y f‹ grou∞'" << 
_ã°GroupSèts
.
groupInfo
.
«me
 << "':\n";

12248 
	`¥ötTŸÆs
(
_ã°GroupSèts
.
tŸÆs
);

12249 
°ªam
 << '\n' << 
°d
::
ídl
;

12251 
SåómögRï‹ãrBa£
::
	`ã°GroupEnded
(
_ã°GroupSèts
);

12252 
	}
}

12253 
	gC⁄sﬁeRï‹ãr
::
	$ã°RunEnded
(
Te°RunSèts
 c⁄°& 
_ã°RunSèts
) {

12254 
	`¥ötTŸÆsDividî
(
_ã°RunSèts
.
tŸÆs
);

12255 
	`¥ötTŸÆs
(
_ã°RunSèts
.
tŸÆs
);

12256 
°ªam
 << 
°d
::
ídl
;

12257 
SåómögRï‹ãrBa£
::
	`ã°RunEnded
(
_ã°RunSèts
);

12258 
	}
}

12260 
	gC⁄sﬁeRï‹ãr
::
	$œzyPröt
() {

12262 
m_èbÀPröãr
->
	`˛o£
();

12263 
	`œzyPrötWôhoutClosögBíchm¨kTabÀ
();

12264 
	}
}

12266 
	gC⁄sﬁeRï‹ãr
::
	$œzyPrötWôhoutClosögBíchm¨kTabÀ
() {

12268 i‡(!
cuºítTe°RunInfo
.
u£d
)

12269 
	`œzyPrötRunInfo
();

12270 i‡(!
cuºítGroupInfo
.
u£d
)

12271 
	`œzyPrötGroupInfo
();

12273 i‡(!
m_hódîPröãd
) {

12274 
	`¥ötTe°Ca£AndSe˘i⁄Hódî
();

12275 
m_hódîPröãd
 = 
åue
;

12277 
	}
}

12278 
	gC⁄sﬁeRï‹ãr
::
	$œzyPrötRunInfo
() {

12279 
°ªam
 << '\n' << 
gëLöeOfCh¨s
<'~'>() << '\n';

12280 
Cﬁour
 
	`cﬁour
(Cﬁour::
Sec⁄d¨yText
);

12281 
°ªam
 << 
cuºítTe°RunInfo
->
«me


12282 << " i†®C©ch v" << 
	`libøryVîsi⁄
() << " hostápplication.\n"

12285 i‡(
m_c⁄fig
->
	`∫gSìd
() != 0)

12286 
°ªam
 << "R™dom√s†£ededÅo: " << 
m_c⁄fig
->
	`∫gSìd
() << "\n\n";

12288 
cuºítTe°RunInfo
.
u£d
 = 
åue
;

12289 
	}
}

12290 
	gC⁄sﬁeRï‹ãr
::
	$œzyPrötGroupInfo
() {

12291 i‡(!
cuºítGroupInfo
->
«me
.
	`em±y
(Ë&& cuºítGroupInfo->
groupsCou¡s
 > 1) {

12292 
	`¥ötClo£dHódî
("Group: " + 
cuºítGroupInfo
->
«me
);

12293 
cuºítGroupInfo
.
u£d
 = 
åue
;

12295 
	}
}

12296 
	gC⁄sﬁeRï‹ãr
::
	$¥ötTe°Ca£AndSe˘i⁄Hódî
() {

12297 
	`as£π
(!
m_£˘i⁄Sèck
.
	`em±y
());

12298 
	`¥ötO≥nHódî
(
cuºítTe°Ca£Info
->
«me
);

12300 i‡(
m_£˘i⁄Sèck
.
	`size
() > 1) {

12301 
Cﬁour
 
	`cﬁourGu¨d
(Cﬁour::
Hódîs
);

12304 
ô
 = 
m_£˘i⁄Sèck
.
	`begö
() + 1,

12305 
ôEnd
 = 
m_£˘i⁄Sèck
.
	`íd
();

12306 ; 
ô
 !
ôEnd
; ++it)

12307 
	`¥ötHódîSåög
(
ô
->
«me
, 2);

12310 
Sour˚LöeInfo
 
löeInfo
 = 
m_£˘i⁄Sèck
.
	`back
().lineInfo;

12312 i‡(!
löeInfo
.
	`em±y
()) {

12313 
°ªam
 << 
gëLöeOfCh¨s
<'-'>() << '\n';

12314 
Cﬁour
 
	`cﬁourGu¨d
(Cﬁour::
FûeName
);

12315 
°ªam
 << 
löeInfo
 << '\n';

12317 
°ªam
 << 
gëLöeOfCh¨s
<'.'>(Ë<< '\n' << 
°d
::
ídl
;

12318 
	}
}

12320 
	gC⁄sﬁeRï‹ãr
::
¥ötClo£dHódî
(
°d
::
°rög
 c⁄°& 
_«me
) {

12321 
¥ötO≥nHódî
(
_«me
);

12322 
	g°ªam
 << 
	ggëLöeOfCh¨s
<'.'>() << '\n';

12324 
	gC⁄sﬁeRï‹ãr
::
¥ötO≥nHódî
(
°d
::
°rög
 c⁄°& 
_«me
) {

12325 
°ªam
 << 
gëLöeOfCh¨s
<'-'>() << '\n';

12327 
Cﬁour
 
cﬁourGu¨d
(Cﬁour::
Hódîs
);

12328 
¥ötHódîSåög
(
_«me
);

12334 
	gC⁄sﬁeRï‹ãr
::
¥ötHódîSåög
(
°d
::
°rög
 c⁄°& 
_°rög
, std::
size_t
 
ödít
) {

12335 
°d
::
size_t
 
i
 = 
_°rög
.
föd
(": ");

12336 i‡(
	gi
 !
°d
::
°rög
::
≈os
)

12337 
i
 += 2;

12339 
	gi
 = 0;

12340 
	g°ªam
 << 
Cﬁumn
(
_°rög
).
ödít
(ödíà+ 
i
).
öôülIndít
(indent) << '\n';

12343 
	sSumm¨yCﬁumn
 {

12345 
Summ¨yCﬁumn
–
°d
::
°rög
 
_œbñ
, 
Cﬁour
::
Code
 
_cﬁour
 )

12346 : 
œbñ
–
°d
::
move
–
_œbñ
 ) ),

12347 
cﬁour
–
_cﬁour
 ) {}

12348 
Summ¨yCﬁumn
 
addRow
–
°d
::
size_t
 
cou¡
 ) {

12349 
ReußbÀSåögSåóm
 
rss
;

12350 
	grss
 << 
	gcou¡
;

12351 
	g°d
::
°rög
 
row
 = 
rss
.
°r
();

12352 auto& 
	gﬁdRow
 : 
rows
) {

12353 
ﬁdRow
.
size
(Ë< 
row
.size())

12354 
ﬁdRow
 = ' ' + oldRow;

12355 
	gﬁdRow
.
size
(Ë> 
	grow
.size())

12356 
	grow
 = ' ' + 
row
;

12358 
	grows
.
push_back
(
row
);

12359  *
	gthis
;

12362 
	g°d
::
°rög
 
œbñ
;

12363 
	gCﬁour
::
Code
 
cﬁour
;

12364 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
rows
;

12368 
	gC⁄sﬁeRï‹ãr
::
	$¥ötTŸÆs
–
TŸÆs
 c⁄°& 
tŸÆs
 ) {

12369 i‡(
tŸÆs
.
ã°Ca£s
.
	`tŸÆ
() == 0) {

12370 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
W¨nög
) << "NoÅestsÑan\n";

12371 } i‡(
tŸÆs
.
as£πi⁄s
.
	`tŸÆ
(Ë> 0 &&ÅŸÆs.
ã°Ca£s
.
	`ÆlPas£d
()) {

12372 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
Resu…Suc˚ss
) << "AllÅestsÖassed";

12373 
°ªam
 << " ("

12374 << 
	`∂uøli£
(
tŸÆs
.
as£πi⁄s
.
∑s£d
, "assertion") << " in "

12375 << 
	`∂uøli£
(
tŸÆs
.
ã°Ca£s
.
∑s£d
, "test case") << ')'

12379 
°d
::
ve˘‹
<
Summ¨yCﬁumn
> 
cﬁumns
;

12380 
cﬁumns
.
	`push_back
(
	`Summ¨yCﬁumn
("", 
Cﬁour
::
N⁄e
)

12381 .
	`addRow
(
tŸÆs
.
ã°Ca£s
.
	`tŸÆ
())

12382 .
	`addRow
(
tŸÆs
.
as£πi⁄s
.
	`tŸÆ
()));

12383 
cﬁumns
.
	`push_back
(
	`Summ¨yCﬁumn
("∑s£d", 
Cﬁour
::
Suc˚ss
)

12384 .
	`addRow
(
tŸÆs
.
ã°Ca£s
.
∑s£d
)

12385 .
	`addRow
(
tŸÆs
.
as£πi⁄s
.
∑s£d
));

12386 
cﬁumns
.
	`push_back
(
	`Summ¨yCﬁumn
("Áûed", 
Cﬁour
::
Resu…Eº‹
)

12387 .
	`addRow
(
tŸÆs
.
ã°Ca£s
.
Áûed
)

12388 .
	`addRow
(
tŸÆs
.
as£πi⁄s
.
Áûed
));

12389 
cﬁumns
.
	`push_back
(
	`Summ¨yCﬁumn
("Áûedá†ex≥˘ed", 
Cﬁour
::
Resu…Ex≥˘edFaûuª
)

12390 .
	`addRow
(
tŸÆs
.
ã°Ca£s
.
ÁûedButOk
)

12391 .
	`addRow
(
tŸÆs
.
as£πi⁄s
.
ÁûedButOk
));

12393 
	`¥ötSumm¨yRow
("ã° ca£s", 
cﬁumns
, 0);

12394 
	`¥ötSumm¨yRow
("as£πi⁄s", 
cﬁumns
, 1);

12396 
	}
}

12397 
	gC⁄sﬁeRï‹ãr
::
¥ötSumm¨yRow
(
°d
::
°rög
 c⁄°& 
œbñ
, std::
ve˘‹
<
Summ¨yCﬁumn
> c⁄°& 
cﬁs
, std::
size_t
 
row
) {

12398 autÿ
cﬁ
 : 
cﬁs
) {

12399 
°d
::
°rög
 
vÆue
 = 
cﬁ
.
rows
[
row
];

12400 i‡(
	gcﬁ
.
	gœbñ
.
em±y
()) {

12401 
	g°ªam
 << 
	gœbñ
 << ": ";

12402 i‡(
	gvÆue
 != "0")

12403 
°ªam
 << 
vÆue
;

12405 
	g°ªam
 << 
Cﬁour
(Cﬁour::
W¨nög
) << "-Çone -";

12406 } i‡(
	gvÆue
 != "0") {

12407 
°ªam
 << 
Cﬁour
(Cﬁour::
LightGªy
) << " | ";

12408 
	g°ªam
 << 
Cﬁour
(
cﬁ
.
cﬁour
)

12409 << 
	gvÆue
 << ' ' << 
	gcﬁ
.
	gœbñ
;

12412 
	g°ªam
 << '\n';

12415 
	gC⁄sﬁeRï‹ãr
::
	$¥ötTŸÆsDividî
(
TŸÆs
 c⁄°& 
tŸÆs
) {

12416 i‡(
tŸÆs
.
ã°Ca£s
.
	`tŸÆ
() > 0) {

12417 
°d
::
size_t
 
ÁûedR©io
 = 
	`makeR©io
(
tŸÆs
.
ã°Ca£s
.
Áûed
,ÅŸÆs.ã°Ca£s.
	`tŸÆ
());

12418 
°d
::
size_t
 
ÁûedButOkR©io
 = 
	`makeR©io
(
tŸÆs
.
ã°Ca£s
.
ÁûedButOk
,ÅŸÆs.ã°Ca£s.
	`tŸÆ
());

12419 
°d
::
size_t
 
∑s£dR©io
 = 
	`makeR©io
(
tŸÆs
.
ã°Ca£s
.
∑s£d
,ÅŸÆs.ã°Ca£s.
	`tŸÆ
());

12420 
ÁûedR©io
 + 
ÁûedButOkR©io
 + 
∑s£dR©io
 < 
CATCH_CONFIG_CONSOLE_WIDTH
 - 1)

12421 
	`födMax
(
ÁûedR©io
, 
ÁûedButOkR©io
, 
∑s£dR©io
)++;

12422 
ÁûedR©io
 + 
ÁûedButOkR©io
 + 
∑s£dR©io
 > 
CATCH_CONFIG_CONSOLE_WIDTH
 - 1)

12423 
	`födMax
(
ÁûedR©io
, 
ÁûedButOkR©io
, 
∑s£dR©io
)--;

12425 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
Eº‹
Ë<< 
°d
::
	`°rög
(
ÁûedR©io
, '=');

12426 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
Resu…Ex≥˘edFaûuª
Ë<< 
°d
::
	`°rög
(
ÁûedButOkR©io
, '=');

12427 i‡(
tŸÆs
.
ã°Ca£s
.
	`ÆlPas£d
())

12428 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
Resu…Suc˚ss
Ë<< 
°d
::
	`°rög
(
∑s£dR©io
, '=');

12430 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
Suc˚ss
Ë<< 
°d
::
	`°rög
(
∑s£dR©io
, '=');

12432 
°ªam
 << 
	`Cﬁour
(
Cﬁour
::
W¨nög
Ë<< 
°d
::
	`°rög
(
CATCH_CONFIG_CONSOLE_WIDTH
 - 1, '=');

12434 
°ªam
 << '\n';

12435 
	}
}

12436 
	gC⁄sﬁeRï‹ãr
::
	$¥ötSumm¨yDividî
() {

12437 
°ªam
 << 
gëLöeOfCh¨s
<'-'>() << '\n';

12438 
	}
}

12440 
CATCH_REGISTER_REPORTER
("c⁄sﬁe", 
C⁄sﬁeRï‹ãr
)

12444 #i‡
deföed
(
_MSC_VER
)

12445 #¥agm®
w¨nög
(
p›
)

12450 
	~<ˇs£π
>

12451 
	~<s°ªam
>

12452 
	~<˘ime
>

12453 
	~<Æg‹ôhm
>

12455 
«me•a˚
 
	gC©ch
 {

12457 
	g«me•a˚
 {

12458 
	g°d
::
°rög
 
gëCuºítTime°amp
() {

12461 
time_t
 
øwtime
;

12462 
	g°d
::
time
(&
øwtime
);

12463 autÿc⁄° 
	gtimeSèmpSize
 = ("2017-01-16T17:06:45Z");

12465 #ifde‡
_MSC_VER


12466 
	g°d
::
tm
 
timeInfo
 = {};

12467 
gmtime_s
(&
timeInfo
, &
øwtime
);

12469 
	g°d
::
tm
* 
timeInfo
;

12470 
	gtimeInfo
 = 
°d
::
gmtime
(&
øwtime
);

12473 
	gtimeSèmp
[
timeSèmpSize
];

12474 c⁄° * c⁄° 
	gfmt
 = "%Y-%m-%dT%H:%M:%SZ";

12476 #ifde‡
_MSC_VER


12477 
	g°d
::
°r·ime
(
timeSèmp
, 
timeSèmpSize
, 
fmt
, &
timeInfo
);

12479 
	g°d
::
°r·ime
(
timeSèmp
, 
timeSèmpSize
, 
fmt
, 
timeInfo
);

12481  
	g°d
::
°rög
(
timeSèmp
);

12484 
	g°d
::
°rög
 
fûeNameTag
(c⁄° 
°d
::
ve˘‹
<°d::°rög> &
ègs
) {

12485 autÿ
ô
 = 
°d
::
föd_if
(
begö
(
ègs
),

12486 
íd
(
ègs
),

12487 [] (
°d
::
°rög
 c⁄°& 
èg
Ë{Åag.
‰⁄t
() == '#'; });

12488 i‡(
	gô
 !
ègs
.
íd
())

12489  
ô
->
sub°r
(1);

12490  
	g°d
::
°rög
();

12494 
	gJunôRï‹ãr
::
JunôRï‹ãr
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

12495 : 
CumuœtiveRï‹ãrBa£
–
_c⁄fig
 ),

12496 
xml
–
_c⁄fig
.
°ªam
() )

12498 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
åue
;

12499 
	gm_ªp‹ãrPªfs
.
	gshouldRï‹tAŒAs£πi⁄s
 = 
åue
;

12502 
	gJunôRï‹ãr
::~
JunôRï‹ãr
() {}

12504 
°d
::
°rög
 
JunôRï‹ãr
::
gëDes¸ùti⁄
() {

12508 
	gJunôRï‹ãr
::
noM©chögTe°Ca£s
–
°d
::
°rög
 const& ) {}

12510 
JunôRï‹ãr
::
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
runInfo
 ) {

12511 
CumuœtiveRï‹ãrBa£
::
ã°RunSèπög
–
runInfo
 );

12512 
	gxml
.
°¨tEÀmít
( "testsuites" );

12515 
	gJunôRï‹ãr
::
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) {

12516 
suôeTimî
.
°¨t
();

12517 
	g°dOutF‹Suôe
.
˛ór
();

12518 
	g°dEºF‹Suôe
.
˛ór
();

12519 
	gu√x≥˘edEx˚±i⁄s
 = 0;

12520 
	gCumuœtiveRï‹ãrBa£
::
ã°GroupSèπög
–
groupInfo
 );

12523 
	gJunôRï‹ãr
::
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Ca£Info
 ) {

12524 
m_okToFaû
 = 
ã°Ca£Info
.
okToFaû
();

12527 
boﬁ
 
	gJunôRï‹ãr
::
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) {

12528 if–
as£πi⁄Sèts
.
as£πi⁄Resu…
.
gëResu…Ty≥
(Ë=
Resu…Was
::
ThªwEx˚±i⁄
 && !
m_okToFaû
 )

12529 
u√x≥˘edEx˚±i⁄s
++;

12530  
	gCumuœtiveRï‹ãrBa£
::
as£πi⁄Ended
–
as£πi⁄Sèts
 );

12533 
	gJunôRï‹ãr
::
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) {

12534 
°dOutF‹Suôe
 +
ã°Ca£Sèts
.
°dOut
;

12535 
	g°dEºF‹Suôe
 +
ã°Ca£Sèts
.
°dEº
;

12536 
	gCumuœtiveRï‹ãrBa£
::
ã°Ca£Ended
–
ã°Ca£Sèts
 );

12539 
	gJunôRï‹ãr
::
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) {

12540 
suôeTime
 = 
suôeTimî
.
gëEœp£dSec⁄ds
();

12541 
	gCumuœtiveRï‹ãrBa£
::
ã°GroupEnded
–
ã°GroupSèts
 );

12542 
wrôeGroup
–*
m_ã°Groups
.
back
(), 
suôeTime
 );

12545 
	gJunôRï‹ãr
::
ã°RunEndedCumuœtive
() {

12546 
xml
.
ídEÀmít
();

12549 
	gJunôRï‹ãr
::
wrôeGroup
–
Te°GroupNode
 c⁄°& 
groupNode
, 
suôeTime
 ) {

12550 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
xml
.
sc›edEÀmít
( "testsuite" );

12551 
Te°GroupSèts
 c⁄°& 
	g°©s
 = 
groupNode
.
vÆue
;

12552 
	gxml
.
wrôeAâribuã
–"«me", 
°©s
.
groupInfo
.
«me
 );

12553 
	gxml
.
wrôeAâribuã
–"îr‹s", 
u√x≥˘edEx˚±i⁄s
 );

12554 
	gxml
.
wrôeAâribuã
–"Áûuªs", 
°©s
.
tŸÆs
.
as£πi⁄s
.
Áûed
-
u√x≥˘edEx˚±i⁄s
 );

12555 
	gxml
.
wrôeAâribuã
–"ã°s", 
°©s
.
tŸÆs
.
as£πi⁄s
.
tŸÆ
() );

12556 
	gxml
.
wrôeAâribuã
( "hostname", "tbd" );

12557 if–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Nevî
 )

12558 
xml
.
wrôeAâribuã
( "time", "" );

12560 
	gxml
.
wrôeAâribuã
–"time", 
suôeTime
 );

12561 
	gxml
.
wrôeAâribuã
–"time°amp", 
gëCuºítTime°amp
() );

12564 áutÿc⁄°& 
	gchûd
 : 
groupNode
.
chûdªn
 )

12565 
wrôeTe°Ca£
–*
chûd
 );

12567 
	gxml
.
sc›edEÀmít
–"sy°em-out" ).
wrôeText
–
åim
–
°dOutF‹Suôe
 ), 
Ál£
 );

12568 
	gxml
.
sc›edEÀmít
–"sy°em-îr" ).
wrôeText
–
åim
–
°dEºF‹Suôe
 ), 
Ál£
 );

12571 
	gJunôRï‹ãr
::
wrôeTe°Ca£
–
Te°Ca£Node
 c⁄°& 
ã°Ca£Node
 ) {

12572 
Te°Ca£Sèts
 c⁄°& 
°©s
 = 
ã°Ca£Node
.
vÆue
;

12576 
as£π
–
ã°Ca£Node
.
chûdªn
.
size
() == 1 );

12577 
Se˘i⁄Node
 c⁄°& 
	groŸSe˘i⁄
 = *
ã°Ca£Node
.
chûdªn
.
‰⁄t
();

12579 
	g°d
::
°rög
 
˛assName
 = 
°©s
.
ã°Info
.className;

12581 if–
	g˛assName
.
em±y
() ) {

12582 
	g˛assName
 = 
fûeNameTag
(
°©s
.
ã°Info
.
ègs
);

12583 i‡–
	g˛assName
.
em±y
() )

12584 
	g˛assName
 = "global";

12587 i‡–!
	gm_c⁄fig
->
«me
().
em±y
() )

12588 
	g˛assName
 = 
m_c⁄fig
->
«me
(Ë+ "." + 
˛assName
;

12590 
wrôeSe˘i⁄
–
˛assName
, "", 
roŸSe˘i⁄
 );

12593 
	gJunôRï‹ãr
::
wrôeSe˘i⁄
–
°d
::
°rög
 c⁄°& 
˛assName
,

12594 
°d
::
°rög
 c⁄°& 
roŸName
,

12595 
Se˘i⁄Node
 c⁄°& 
£˘i⁄Node
 ) {

12596 
	g°d
::
°rög
 
«me
 = 
åim
–
£˘i⁄Node
.
°©s
.
£˘i⁄Info
.name );

12597 if–!
	groŸName
.
em±y
() )

12598 
	g«me
 = 
roŸName
 + '/' + 
«me
;

12600 if–!
	g£˘i⁄Node
.
	gas£πi⁄s
.
em±y
() ||

12601 !
	g£˘i⁄Node
.
	g°dOut
.
em±y
() ||

12602 !
	g£˘i⁄Node
.
	g°dEº
.
em±y
() ) {

12603 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
xml
.
sc›edEÀmít
( "testcase" );

12604 if–
	g˛assName
.
em±y
() ) {

12605 
	gxml
.
wrôeAâribuã
–"˛as¢ame", 
«me
 );

12606 
	gxml
.
wrôeAâribuã
( "name", "root" );

12609 
	gxml
.
wrôeAâribuã
–"˛as¢ame", 
˛assName
 );

12610 
	gxml
.
wrôeAâribuã
–"«me", 
«me
 );

12612 
	gxml
.
wrôeAâribuã
–"time", ::
C©ch
::
Dëaû
::
°rögify
–
£˘i⁄Node
.
°©s
.
duøti⁄InSec⁄ds
 ) );

12614 
wrôeAs£πi⁄s
–
£˘i⁄Node
 );

12616 if–!
	g£˘i⁄Node
.
	g°dOut
.
em±y
() )

12617 
	gxml
.
sc›edEÀmít
–"sy°em-out" ).
wrôeText
–
åim
–
£˘i⁄Node
.
°dOut
 ), 
Ál£
 );

12618 if–!
	g£˘i⁄Node
.
	g°dEº
.
em±y
() )

12619 
	gxml
.
sc›edEÀmít
–"sy°em-îr" ).
wrôeText
–
åim
–
£˘i⁄Node
.
°dEº
 ), 
Ál£
 );

12621 áutÿc⁄°& 
	gchûdNode
 : 
£˘i⁄Node
.
chûdSe˘i⁄s
 )

12622 if–
˛assName
.
em±y
() )

12623 
wrôeSe˘i⁄
–
«me
, "", *
chûdNode
 );

12625 
wrôeSe˘i⁄
–
˛assName
, 
«me
, *
chûdNode
 );

12628 
	gJunôRï‹ãr
::
wrôeAs£πi⁄s
–
Se˘i⁄Node
 c⁄°& 
£˘i⁄Node
 ) {

12629 áutÿc⁄°& 
as£πi⁄
 : 
£˘i⁄Node
.
as£πi⁄s
 )

12630 
wrôeAs£πi⁄
–
as£πi⁄
 );

12633 
	gJunôRï‹ãr
::
wrôeAs£πi⁄
–
As£πi⁄Sèts
 c⁄°& 
°©s
 ) {

12634 
As£πi⁄Resu…
 c⁄°& 
ªsu…
 = 
°©s
.
as£πi⁄Resu…
;

12635 if–!
	gªsu…
.
isOk
() ) {

12636 
	g°d
::
°rög
 
ñemítName
;

12637  
	gªsu…
.
gëResu…Ty≥
() ) {

12638 
	gResu…Was
::
ThªwEx˚±i⁄
:

12639 
Resu…Was
::
F©ÆEº‹C⁄dôi⁄
:

12640 
ñemítName
 = "error";

12642 
	gResu…Was
::
Ex∂icôFaûuª
:

12643 
ñemítName
 = "failure";

12645 
	gResu…Was
::
Ex¥essi⁄Faûed
:

12646 
ñemítName
 = "failure";

12648 
	gResu…Was
::
Did¡ThrowEx˚±i⁄
:

12649 
ñemítName
 = "failure";

12653 
	gResu…Was
::
Info
:

12654 
Resu…Was
::
W¨nög
:

12655 
Resu…Was
::
Ok
:

12656 
Resu…Was
::
Unknown
:

12657 
Resu…Was
::
FaûuªBô
:

12658 
Resu…Was
::
Ex˚±i⁄
:

12659 
ñemítName
 = "internalError";

12663 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
xml
.
sc›edEÀmít
–
ñemítName
 );

12665 
	gxml
.
wrôeAâribuã
–"mesßge", 
ªsu…
.
gëEx∑ndedEx¥essi⁄
() );

12666 
	gxml
.
wrôeAâribuã
–"ty≥", 
ªsu…
.
gëTe°Ma¸oName
() );

12668 
ReußbÀSåögSåóm
 
	grss
;

12669 if–!
	gªsu…
.
gëMesßge
().
em±y
() )

12670 
	grss
 << 
	gªsu…
.
gëMesßge
() << '\n';

12671 áutÿc⁄°& 
	gmsg
 : 
°©s
.
öfoMesßges
 )

12672 if–
msg
.
ty≥
 =
Resu…Was
::
Info
 )

12673 
rss
 << 
msg
.
mesßge
 << '\n';

12675 
	grss
 << "© " << 
	gªsu…
.
gëSour˚Info
();

12676 
	gxml
.
wrôeText
–
rss
.
°r
(), 
Ál£
 );

12680 
CATCH_REGISTER_REPORTER
–"junô", 
JunôRï‹ãr
 )

12686 
	~<ˇs£π
>

12688 
«me•a˚
 
	gC©ch
 {

12690 
	gLi°íögRï‹ãr
::
Li°íögRï‹ãr
() {

12692 
m_¥e„ªn˚s
.
shouldRï‹tAŒAs£πi⁄s
 = 
åue
;

12695 
	gLi°íögRï‹ãr
::
addLi°íî
–
ISåómögRï‹ãrPå
&& 
li°íî
 ) {

12696 
m_li°íîs
.
push_back
–
°d
::
move
–
li°íî
 ) );

12699 
	gLi°íögRï‹ãr
::
addRï‹ãr
(
ISåómögRï‹ãrPå
&& 
ªp‹ãr
) {

12700 
as£π
(!
m_ªp‹ãr
 && "ListeningÑeporter can wrap only 1ÑealÑeporter");

12701 
	gm_ªp‹ãr
 = 
°d
::
move
–
ªp‹ãr
 );

12702 
	gm_¥e„ªn˚s
.
	gshouldRedúe˘StdOut
 = 
m_ªp‹ãr
->
gëPª„ªn˚s
().
shouldRedúe˘StdOut
;

12705 
Rï‹ãrPª„ªn˚s
 
	gLi°íögRï‹ãr
::
gëPª„ªn˚s
() const {

12706  
m_¥e„ªn˚s
;

12709 
	g°d
::
£t
<
Vîbosôy
> 
Li°íögRï‹ãr
::
gëSuµ‹ãdVîbosôõs
() {

12710  
°d
::
£t
<
Vîbosôy
>{ };

12713 
	gLi°íögRï‹ãr
::
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
•ec
 ) {

12714 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12715 
li°íî
->
noM©chögTe°Ca£s
–
•ec
 );

12717 
	gm_ªp‹ãr
->
noM©chögTe°Ca£s
–
•ec
 );

12720 
	gLi°íögRï‹ãr
::
bíchm¨kSèπög
–
Bíchm¨kInfo
 c⁄°& 
bíchm¨kInfo
 ) {

12721 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12722 
li°íî
->
bíchm¨kSèπög
–
bíchm¨kInfo
 );

12724 
	gm_ªp‹ãr
->
bíchm¨kSèπög
–
bíchm¨kInfo
 );

12726 
	gLi°íögRï‹ãr
::
bíchm¨kEnded
–
Bíchm¨kSèts
 c⁄°& 
bíchm¨kSèts
 ) {

12727 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12728 
li°íî
->
bíchm¨kEnded
–
bíchm¨kSèts
 );

12730 
	gm_ªp‹ãr
->
bíchm¨kEnded
–
bíchm¨kSèts
 );

12733 
	gLi°íögRï‹ãr
::
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°RunInfo
 ) {

12734 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12735 
li°íî
->
ã°RunSèπög
–
ã°RunInfo
 );

12737 
	gm_ªp‹ãr
->
ã°RunSèπög
–
ã°RunInfo
 );

12740 
	gLi°íögRï‹ãr
::
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) {

12741 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12742 
li°íî
->
ã°GroupSèπög
–
groupInfo
 );

12744 
	gm_ªp‹ãr
->
ã°GroupSèπög
–
groupInfo
 );

12747 
	gLi°íögRï‹ãr
::
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) {

12748 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12749 
li°íî
->
ã°Ca£Sèπög
–
ã°Info
 );

12751 
	gm_ªp‹ãr
->
ã°Ca£Sèπög
–
ã°Info
 );

12754 
	gLi°íögRï‹ãr
::
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) {

12755 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12756 
li°íî
->
£˘i⁄Sèπög
–
£˘i⁄Info
 );

12758 
	gm_ªp‹ãr
->
£˘i⁄Sèπög
–
£˘i⁄Info
 );

12761 
	gLi°íögRï‹ãr
::
as£πi⁄Sèπög
–
As£πi⁄Info
 c⁄°& 
as£πi⁄Info
 ) {

12762 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12763 
li°íî
->
as£πi⁄Sèπög
–
as£πi⁄Info
 );

12765 
	gm_ªp‹ãr
->
as£πi⁄Sèπög
–
as£πi⁄Info
 );

12769 
boﬁ
 
	gLi°íögRï‹ãr
::
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) {

12770 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12771 
°©ic_ˇ°
<>–
li°íî
->
as£πi⁄Ended
–
as£πi⁄Sèts
 ) );

12773  
	gm_ªp‹ãr
->
as£πi⁄Ended
–
as£πi⁄Sèts
 );

12776 
	gLi°íögRï‹ãr
::
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) {

12777 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12778 
li°íî
->
£˘i⁄Ended
–
£˘i⁄Sèts
 );

12780 
	gm_ªp‹ãr
->
£˘i⁄Ended
–
£˘i⁄Sèts
 );

12783 
	gLi°íögRï‹ãr
::
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) {

12784 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12785 
li°íî
->
ã°Ca£Ended
–
ã°Ca£Sèts
 );

12787 
	gm_ªp‹ãr
->
ã°Ca£Ended
–
ã°Ca£Sèts
 );

12790 
	gLi°íögRï‹ãr
::
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) {

12791 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12792 
li°íî
->
ã°GroupEnded
–
ã°GroupSèts
 );

12794 
	gm_ªp‹ãr
->
ã°GroupEnded
–
ã°GroupSèts
 );

12797 
	gLi°íögRï‹ãr
::
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) {

12798 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12799 
li°íî
->
ã°RunEnded
–
ã°RunSèts
 );

12801 
	gm_ªp‹ãr
->
ã°RunEnded
–
ã°RunSèts
 );

12804 
	gLi°íögRï‹ãr
::
skùTe°
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) {

12805 áutÿc⁄°& 
li°íî
 : 
m_li°íîs
 ) {

12806 
li°íî
->
skùTe°
–
ã°Info
 );

12808 
	gm_ªp‹ãr
->
skùTe°
–
ã°Info
 );

12811 
boﬁ
 
	gLi°íögRï‹ãr
::
isMu…i
() const {

12812  
åue
;

12819 #i‡
deföed
(
_MSC_VER
)

12820 #¥agm®
w¨nög
(
push
)

12821 #¥agm®
w¨nög
(
dißbÀ
:4061)

12826 
«me•a˚
 
	gC©ch
 {

12827 
	gXmlRï‹ãr
::
XmlRï‹ãr
–
Rï‹ãrC⁄fig
 c⁄°& 
_c⁄fig
 )

12828 : 
SåómögRï‹ãrBa£
–
_c⁄fig
 ),

12829 
m_xml
(
_c⁄fig
.
°ªam
())

12831 
	gm_ªp‹ãrPªfs
.
	gshouldRedúe˘StdOut
 = 
åue
;

12832 
	gm_ªp‹ãrPªfs
.
	gshouldRï‹tAŒAs£πi⁄s
 = 
åue
;

12835 
	gXmlRï‹ãr
::~
XmlRï‹ãr
() = ;

12837 
	g°d
::
°rög
 
XmlRï‹ãr
::
gëDes¸ùti⁄
() {

12841 
	g°d
::
°rög
 
XmlRï‹ãr
::
gëStyÀshìtRef
() const {

12842  
°d
::
°rög
();

12845 
	gXmlRï‹ãr
::
wrôeSour˚Info
–
Sour˚LöeInfo
 c⁄°& 
sour˚Info
 ) {

12846 
m_xml


12847 .
wrôeAâribuã
–"fûíame", 
sour˚Info
.
fûe
 )

12848 .
wrôeAâribuã
–"löe", 
sour˚Info
.
löe
 );

12851 
	gXmlRï‹ãr
::
noM©chögTe°Ca£s
–
°d
::
°rög
 c⁄°& 
s
 ) {

12852 
SåómögRï‹ãrBa£
::
noM©chögTe°Ca£s
–
s
 );

12855 
	gXmlRï‹ãr
::
ã°RunSèπög
–
Te°RunInfo
 c⁄°& 
ã°Info
 ) {

12856 
SåómögRï‹ãrBa£
::
ã°RunSèπög
–
ã°Info
 );

12857 
	g°d
::
°rög
 
°yÀshìtRef
 = 
gëStyÀshìtRef
();

12858 if–!
	g°yÀshìtRef
.
em±y
() )

12859 
	gm_xml
.
wrôeStyÀshìtRef
–
°yÀshìtRef
 );

12860 
	gm_xml
.
°¨tEÀmít
( "Catch" );

12861 if–!
	gm_c⁄fig
->
«me
().
em±y
() )

12862 
	gm_xml
.
wrôeAâribuã
–"«me", 
m_c⁄fig
->
«me
() );

12865 
	gXmlRï‹ãr
::
ã°GroupSèπög
–
GroupInfo
 c⁄°& 
groupInfo
 ) {

12866 
SåómögRï‹ãrBa£
::
ã°GroupSèπög
–
groupInfo
 );

12867 
	gm_xml
.
°¨tEÀmít
( "Group" )

12868 .
wrôeAâribuã
–"«me", 
groupInfo
.
«me
 );

12871 
	gXmlRï‹ãr
::
ã°Ca£Sèπög
–
Te°Ca£Info
 c⁄°& 
ã°Info
 ) {

12872 
SåómögRï‹ãrBa£
::
ã°Ca£Sèπög
(
ã°Info
);

12873 
	gm_xml
.
°¨tEÀmít
( "TestCase" )

12874 .
wrôeAâribuã
–"«me", 
åim
–
ã°Info
.
«me
 ) )

12875 .
wrôeAâribuã
–"des¸ùti⁄", 
ã°Info
.
des¸ùti⁄
 )

12876 .
wrôeAâribuã
–"ègs", 
ã°Info
.
ègsAsSåög
() );

12878 
wrôeSour˚Info
–
ã°Info
.
löeInfo
 );

12880 i‡–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

12881 
m_ã°Ca£Timî
.
°¨t
();

12882 
	gm_xml
.
ísuªTagClo£d
();

12885 
	gXmlRï‹ãr
::
£˘i⁄Sèπög
–
Se˘i⁄Info
 c⁄°& 
£˘i⁄Info
 ) {

12886 
SåómögRï‹ãrBa£
::
£˘i⁄Sèπög
–
£˘i⁄Info
 );

12887 if–
	gm_£˘i⁄Dïth
++ > 0 ) {

12888 
	gm_xml
.
°¨tEÀmít
( "Section" )

12889 .
wrôeAâribuã
–"«me", 
åim
–
£˘i⁄Info
.
«me
 ) );

12890 
wrôeSour˚Info
–
£˘i⁄Info
.
löeInfo
 );

12891 
	gm_xml
.
ísuªTagClo£d
();

12895 
	gXmlRï‹ãr
::
as£πi⁄Sèπög
–
As£πi⁄Info
 const& ) { }

12897 
boﬁ
 
XmlRï‹ãr
::
as£πi⁄Ended
–
As£πi⁄Sèts
 c⁄°& 
as£πi⁄Sèts
 ) {

12899 
As£πi⁄Resu…
 c⁄°& 
ªsu…
 = 
as£πi⁄Sèts
.
as£πi⁄Resu…
;

12901 
boﬁ
 
	gö˛udeResu…s
 = 
m_c⁄fig
->
ö˛udeSuc˚ssfulResu…s
(Ë|| !
ªsu…
.
isOk
();

12903 if–
	gö˛udeResu…s
 || 
	gªsu…
.
gëResu…Ty≥
(Ë=
Resu…Was
::
W¨nög
 ) {

12905 áutÿc⁄°& 
msg
 : 
as£πi⁄Sèts
.
öfoMesßges
 ) {

12906 if–
msg
.
ty≥
 =
Resu…Was
::
Info
 && 
ö˛udeResu…s
 ) {

12907 
m_xml
.
sc›edEÀmít
( "Info" )

12908 .
wrôeText
–
msg
.
mesßge
 );

12909 } i‡–
	gmsg
.
	gty≥
 =
Resu…Was
::
W¨nög
 ) {

12910 
m_xml
.
sc›edEÀmít
( "Warning" )

12911 .
wrôeText
–
msg
.
mesßge
 );

12917 if–!
	gö˛udeResu…s
 && 
	gªsu…
.
gëResu…Ty≥
(Ë!
Resu…Was
::
W¨nög
 )

12918  
åue
;

12921 if–
	gªsu…
.
hasEx¥essi⁄
() ) {

12922 
	gm_xml
.
°¨tEÀmít
( "Expression" )

12923 .
wrôeAâribuã
–"suc˚ss", 
ªsu…
.
suc˚eded
() )

12924 .
wrôeAâribuã
–"ty≥", 
ªsu…
.
gëTe°Ma¸oName
() );

12926 
wrôeSour˚Info
–
ªsu…
.
gëSour˚Info
() );

12928 
	gm_xml
.
sc›edEÀmít
( "Original" )

12929 .
wrôeText
–
ªsu…
.
gëEx¥essi⁄
() );

12930 
	gm_xml
.
sc›edEÀmít
( "Expanded" )

12931 .
wrôeText
–
ªsu…
.
gëEx∑ndedEx¥essi⁄
() );

12935  
	gªsu…
.
gëResu…Ty≥
() ) {

12936 
	gResu…Was
::
ThªwEx˚±i⁄
:

12937 
m_xml
.
°¨tEÀmít
( "Exception" );

12938 
wrôeSour˚Info
–
ªsu…
.
gëSour˚Info
() );

12939 
	gm_xml
.
wrôeText
–
ªsu…
.
gëMesßge
() );

12940 
	gm_xml
.
ídEÀmít
();

12942 
	gResu…Was
::
F©ÆEº‹C⁄dôi⁄
:

12943 
m_xml
.
°¨tEÀmít
( "FatalErrorCondition" );

12944 
wrôeSour˚Info
–
ªsu…
.
gëSour˚Info
() );

12945 
	gm_xml
.
wrôeText
–
ªsu…
.
gëMesßge
() );

12946 
	gm_xml
.
ídEÀmít
();

12948 
	gResu…Was
::
Info
:

12949 
m_xml
.
sc›edEÀmít
( "Info" )

12950 .
wrôeText
–
ªsu…
.
gëMesßge
() );

12952 
	gResu…Was
::
W¨nög
:

12955 
	gResu…Was
::
Ex∂icôFaûuª
:

12956 
m_xml
.
°¨tEÀmít
( "Failure" );

12957 
wrôeSour˚Info
–
ªsu…
.
gëSour˚Info
() );

12958 
	gm_xml
.
wrôeText
–
ªsu…
.
gëMesßge
() );

12959 
	gm_xml
.
ídEÀmít
();

12965 if–
	gªsu…
.
hasEx¥essi⁄
() )

12966 
	gm_xml
.
ídEÀmít
();

12968  
	gåue
;

12971 
	gXmlRï‹ãr
::
£˘i⁄Ended
–
Se˘i⁄Sèts
 c⁄°& 
£˘i⁄Sèts
 ) {

12972 
SåómögRï‹ãrBa£
::
£˘i⁄Ended
–
£˘i⁄Sèts
 );

12973 if–--
	gm_£˘i⁄Dïth
 > 0 ) {

12974 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
m_xml
.
sc›edEÀmít
( "OverallResults" );

12975 
	ge
.
wrôeAâribuã
–"suc˚s£s", 
£˘i⁄Sèts
.
as£πi⁄s
.
∑s£d
 );

12976 
	ge
.
wrôeAâribuã
–"Áûuªs", 
£˘i⁄Sèts
.
as£πi⁄s
.
Áûed
 );

12977 
	ge
.
wrôeAâribuã
–"ex≥˘edFaûuªs", 
£˘i⁄Sèts
.
as£πi⁄s
.
ÁûedButOk
 );

12979 i‡–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

12980 
e
.
wrôeAâribuã
–"duøti⁄InSec⁄ds", 
£˘i⁄Sèts
.
duøti⁄InSec⁄ds
 );

12982 
	gm_xml
.
ídEÀmít
();

12986 
	gXmlRï‹ãr
::
ã°Ca£Ended
–
Te°Ca£Sèts
 c⁄°& 
ã°Ca£Sèts
 ) {

12987 
SåómögRï‹ãrBa£
::
ã°Ca£Ended
–
ã°Ca£Sèts
 );

12988 
	gXmlWrôî
::
Sc›edEÀmít
 
e
 = 
m_xml
.
sc›edEÀmít
( "OverallResult" );

12989 
	ge
.
wrôeAâribuã
–"suc˚ss", 
ã°Ca£Sèts
.
tŸÆs
.
as£πi⁄s
.
ÆlOk
() );

12991 i‡–
	gm_c⁄fig
->
showDuøti⁄s
(Ë=
ShowDuøti⁄s
::
Always
 )

12992 
e
.
wrôeAâribuã
–"duøti⁄InSec⁄ds", 
m_ã°Ca£Timî
.
gëEœp£dSec⁄ds
() );

12994 if–!
	gã°Ca£Sèts
.
	g°dOut
.
em±y
() )

12995 
	gm_xml
.
sc›edEÀmít
–"StdOut" ).
wrôeText
–
åim
–
ã°Ca£Sèts
.
°dOut
 ), 
Ál£
 );

12996 if–!
	gã°Ca£Sèts
.
	g°dEº
.
em±y
() )

12997 
	gm_xml
.
sc›edEÀmít
–"StdEº" ).
wrôeText
–
åim
–
ã°Ca£Sèts
.
°dEº
 ), 
Ál£
 );

12999 
	gm_xml
.
ídEÀmít
();

13002 
	gXmlRï‹ãr
::
ã°GroupEnded
–
Te°GroupSèts
 c⁄°& 
ã°GroupSèts
 ) {

13003 
SåómögRï‹ãrBa£
::
ã°GroupEnded
–
ã°GroupSèts
 );

13005 
	gm_xml
.
sc›edEÀmít
( "OverallResults" )

13006 .
wrôeAâribuã
–"suc˚s£s", 
ã°GroupSèts
.
tŸÆs
.
as£πi⁄s
.
∑s£d
 )

13007 .
wrôeAâribuã
–"Áûuªs", 
ã°GroupSèts
.
tŸÆs
.
as£πi⁄s
.
Áûed
 )

13008 .
wrôeAâribuã
–"ex≥˘edFaûuªs", 
ã°GroupSèts
.
tŸÆs
.
as£πi⁄s
.
ÁûedButOk
 );

13009 
	gm_xml
.
ídEÀmít
();

13012 
	gXmlRï‹ãr
::
ã°RunEnded
–
Te°RunSèts
 c⁄°& 
ã°RunSèts
 ) {

13013 
SåómögRï‹ãrBa£
::
ã°RunEnded
–
ã°RunSèts
 );

13014 
	gm_xml
.
sc›edEÀmít
( "OverallResults" )

13015 .
wrôeAâribuã
–"suc˚s£s", 
ã°RunSèts
.
tŸÆs
.
as£πi⁄s
.
∑s£d
 )

13016 .
wrôeAâribuã
–"Áûuªs", 
ã°RunSèts
.
tŸÆs
.
as£πi⁄s
.
Áûed
 )

13017 .
wrôeAâribuã
–"ex≥˘edFaûuªs", 
ã°RunSèts
.
tŸÆs
.
as£πi⁄s
.
ÁûedButOk
 );

13018 
	gm_xml
.
ídEÀmít
();

13021 
CATCH_REGISTER_REPORTER
–"xml", 
XmlRï‹ãr
 )

13025 #i‡
deföed
(
_MSC_VER
)

13026 #¥agm®
w¨nög
(
p›
)

13030 
«me•a˚
 
	gC©ch
 {

13031 
LókDëe˘‹
 
	gÀakDëe˘‹
;

13034 #ifde‡
__˛™g__


13035 #¥agm®
˛™g
 
dügno°ic
 
p›


13041 #ifde‡
CATCH_CONFIG_MAIN


13044 #i‚de‡
__OBJC__


13046 #i‡
deföed
(
CATCH_CONFIG_WCHAR
Ë&& deföed(
WIN32
Ë&& deföed(
_UNICODE
Ë&& !deföed(
DO_NOT_USE_WMAIN
)

13048 "C" 
	$wmaö
 (
¨gc
, 
wch¨_t
 * 
¨gv
[], wchar_t * []) {

13051 
	$maö
 (
¨gc
, * 
¨gv
[]) {

13054  
C©ch
::
	`Sessi⁄
().
	`run
–
¨gc
, 
¨gv
 );

13055 
	}
}

13060 
	$maö
 (
¨gc
, * c⁄° 
¨gv
[]) {

13061 #i‡!
CATCH_ARC_ENABLED


13062 
NSAut‹ñó£Poﬁ
 * 
poﬁ
 = [[NSAut‹ñó£Poﬁ 
Æloc
] 
öô
];

13065 
C©ch
::
	`ªgi°îTe°Mëhods
();

13066 
ªsu…
 = 
C©ch
::
	`Sessi⁄
().
	`run
–
¨gc
, (**)
¨gv
 );

13068 #i‡!
CATCH_ARC_ENABLED


13069 [
poﬁ
 
døö
];

13072  
ªsu…
;

13073 
	}
}

13080 #i‡!
deföed
(
CATCH_CONFIG_IMPL_ONLY
)

13082 #ifde‡
CLARA_CONFIG_MAIN_NOT_DEFINED


13083 #unde‡
CLARA_CONFIG_MAIN


13086 #i‡!
deföed
(
CATCH_CONFIG_DISABLE
)

13089 #ifde‡
CATCH_CONFIG_PREFIX_ALL


13091 
	#CATCH_REQUIRE
–... ) 
	`INTERNAL_CATCH_TEST
–"CATCH_REQUIRE", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13092 
	#CATCH_REQUIRE_FALSE
–... ) 
	`INTERNAL_CATCH_TEST
–"CATCH_REQUIRE_FALSE", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, 
__VA_ARGS__
 )

	)

13094 
	#CATCH_REQUIRE_THROWS
–... ) 
	`INTERNAL_CATCH_THROWS
–"CATCH_REQUIRE_THROWS", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, "", 
__VA_ARGS__
 )

	)

13095 
	#CATCH_REQUIRE_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–"CATCH_REQUIRE_THROWS_AS",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
,Éx¥ )

	)

13096 
	#CATCH_REQUIRE_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_STR_MATCHES
–"CATCH_REQUIRE_THROWS_WITH", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, m©chî,Éx¥ )

	)

13097 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13098 
	#CATCH_REQUIRE_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_MATCHES
–"CATCH_REQUIRE_THROWS_MATCHES",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, m©chî,Éx¥ )

	)

13100 
	#CATCH_REQUIRE_NOTHROW
–... ) 
	`INTERNAL_CATCH_NO_THROW
–"CATCH_REQUIRE_NOTHROW", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13102 
	#CATCH_CHECK
–... ) 
	`INTERNAL_CATCH_TEST
–"CATCH_CHECK", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13103 
	#CATCH_CHECK_FALSE
–... ) 
	`INTERNAL_CATCH_TEST
–"CATCH_CHECK_FALSE", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, 
__VA_ARGS__
 )

	)

13104 
	#CATCH_CHECKED_IF
–... ) 
	`INTERNAL_CATCH_IF
–"CATCH_CHECKED_IF", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13105 
	#CATCH_CHECKED_ELSE
–... ) 
	`INTERNAL_CATCH_ELSE
–"CATCH_CHECKED_ELSE", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13106 
	#CATCH_CHECK_NOFAIL
–... ) 
	`INTERNAL_CATCH_TEST
–"CATCH_CHECK_NOFAIL", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
SuµªssFaû
, 
__VA_ARGS__
 )

	)

13108 
	#CATCH_CHECK_THROWS
–... ) 
	`INTERNAL_CATCH_THROWS
–"CATCH_CHECK_THROWS", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, "", 
__VA_ARGS__
 )

	)

13109 
	#CATCH_CHECK_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–"CATCH_CHECK_THROWS_AS",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
,Éx¥ )

	)

13110 
	#CATCH_CHECK_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_STR_MATCHES
–"CATCH_CHECK_THROWS_WITH", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, m©chî,Éx¥ )

	)

13111 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13112 
	#CATCH_CHECK_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_MATCHES
–"CATCH_CHECK_THROWS_MATCHES",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, m©chî,Éx¥ )

	)

13114 
	#CATCH_CHECK_NOTHROW
–... ) 
	`INTERNAL_CATCH_NO_THROW
–"CATCH_CHECK_NOTHROW", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13116 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13117 
	#CATCH_CHECK_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–"CATCH_CHECK_THAT", m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
,árg )

	)

13119 
	#CATCH_REQUIRE_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–"CATCH_REQUIRE_THAT", m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
,árg )

	)

13122 
	#CATCH_INFO
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–"CATCH_INFO", msg )

	)

13123 
	#CATCH_WARN
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–"CATCH_WARN", 
C©ch
::
Resu…Was
::
W¨nög
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, msg )

	)

13124 
	#CATCH_CAPTURE
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–"CATCH_CAPTURE", #msg " :" << ::
C©ch
::
Dëaû
::
	`°rögify
(msgË)

	)

13126 
	#CATCH_TEST_CASE
–... ) 
	`INTERNAL_CATCH_TESTCASE
–
__VA_ARGS__
 )

	)

13127 
	#CATCH_TEST_CASE_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, 
__VA_ARGS__
 )

	)

13128 
	#CATCH_METHOD_AS_TEST_CASE
–
mëhod
, ... ) 
	`INTERNAL_CATCH_METHOD_AS_TEST_CASE
–mëhod, 
__VA_ARGS__
 )

	)

13129 
	#CATCH_REGISTER_TEST_CASE
–
Fun˘i⁄
, ... ) 
	`INTERNAL_CATCH_REGISTER_TESTCASE
–Fun˘i⁄, 
__VA_ARGS__
 )

	)

13130 
	#CATCH_SECTION
–... ) 
	`INTERNAL_CATCH_SECTION
–
__VA_ARGS__
 )

	)

13131 
	#CATCH_DYNAMIC_SECTION
–... ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–
__VA_ARGS__
 )

	)

13132 
	#CATCH_FAIL
–... ) 
	`INTERNAL_CATCH_MSG
–"CATCH_FAIL", 
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13133 
	#CATCH_FAIL_CHECK
–... ) 
	`INTERNAL_CATCH_MSG
–"CATCH_FAIL_CHECK", 
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13134 
	#CATCH_SUCCEED
–... ) 
	`INTERNAL_CATCH_MSG
–"CATCH_SUCCEED", 
C©ch
::
Resu…Was
::
Ok
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13136 
	#CATCH_ANON_TEST_CASE
(Ë
	`INTERNAL_CATCH_TESTCASE
()

	)

13139 
	#CATCH_SCENARIO
–... ) 
	`CATCH_TEST_CASE
–"S˚«rio: " 
__VA_ARGS__
 )

	)

13140 
	#CATCH_SCENARIO_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, "S˚«rio: " 
__VA_ARGS__
 )

	)

13141 
	#CATCH_GIVEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" Giví: " << des¯)

	)

13142 
	#CATCH_WHEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" Whí: " << des¯)

	)

13143 
	#CATCH_AND_WHEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–"And whí: " << des¯)

	)

13144 
	#CATCH_THEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" Thí: " << des¯)

	)

13145 
	#CATCH_AND_THEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" And: " << des¯)

	)

13150 
	#REQUIRE
–... ) 
	`INTERNAL_CATCH_TEST
–"REQUIRE", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13151 
	#REQUIRE_FALSE
–... ) 
	`INTERNAL_CATCH_TEST
–"REQUIRE_FALSE", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, 
__VA_ARGS__
 )

	)

13153 
	#REQUIRE_THROWS
–... ) 
	`INTERNAL_CATCH_THROWS
–"REQUIRE_THROWS", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13154 
	#REQUIRE_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–"REQUIRE_THROWS_AS",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
,Éx¥ )

	)

13155 
	#REQUIRE_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_STR_MATCHES
–"REQUIRE_THROWS_WITH", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, m©chî,Éx¥ )

	)

13156 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13157 
	#REQUIRE_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_MATCHES
–"REQUIRE_THROWS_MATCHES",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, m©chî,Éx¥ )

	)

13159 
	#REQUIRE_NOTHROW
–... ) 
	`INTERNAL_CATCH_NO_THROW
–"REQUIRE_NOTHROW", 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13161 
	#CHECK
–... ) 
	`INTERNAL_CATCH_TEST
–"CHECK", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13162 
	#CHECK_FALSE
–... ) 
	`INTERNAL_CATCH_TEST
–"CHECK_FALSE", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
FÆ£Te°
, 
__VA_ARGS__
 )

	)

13163 
	#CHECKED_IF
–... ) 
	`INTERNAL_CATCH_IF
–"CHECKED_IF", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13164 
	#CHECKED_ELSE
–... ) 
	`INTERNAL_CATCH_ELSE
–"CHECKED_ELSE", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13165 
	#CHECK_NOFAIL
–... ) 
	`INTERNAL_CATCH_TEST
–"CHECK_NOFAIL", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
 | C©ch::Resu…Di•osôi⁄::
SuµªssFaû
, 
__VA_ARGS__
 )

	)

13167 
	#CHECK_THROWS
–... ) 
	`INTERNAL_CATCH_THROWS
–"CHECK_THROWS", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13168 
	#CHECK_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) 
	`INTERNAL_CATCH_THROWS_AS
–"CHECK_THROWS_AS",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
,Éx¥ )

	)

13169 
	#CHECK_THROWS_WITH
–
ex¥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_STR_MATCHES
–"CHECK_THROWS_WITH", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, m©chî,Éx¥ )

	)

13170 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13171 
	#CHECK_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) 
	`INTERNAL_CATCH_THROWS_MATCHES
–"CHECK_THROWS_MATCHES",Éx˚±i⁄Ty≥, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, m©chî,Éx¥ )

	)

13173 
	#CHECK_NOTHROW
–... ) 
	`INTERNAL_CATCH_NO_THROW
–"CHECK_NOTHROW", 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13175 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13176 
	#CHECK_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–"CHECK_THAT", m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
,árg )

	)

13178 
	#REQUIRE_THAT
–
¨g
, 
m©chî
 ) 
	`INTERNAL_CHECK_THAT
–"REQUIRE_THAT", m©chî, 
C©ch
::
Resu…Di•osôi⁄
::
N‹mÆ
,árg )

	)

13181 
	#INFO
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–"INFO", msg )

	)

13182 
	#WARN
–
msg
 ) 
	`INTERNAL_CATCH_MSG
–"WARN", 
C©ch
::
Resu…Was
::
W¨nög
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, msg )

	)

13183 
	#CAPTURE
–
msg
 ) 
	`INTERNAL_CATCH_INFO
–"CAPTURE", #msg " :" << ::
C©ch
::
Dëaû
::
	`°rögify
(msgË)

	)

13185 
	#TEST_CASE
–... ) 
	`INTERNAL_CATCH_TESTCASE
–
__VA_ARGS__
 )

	)

13186 
	#TEST_CASE_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, 
__VA_ARGS__
 )

	)

13187 
	#METHOD_AS_TEST_CASE
–
mëhod
, ... ) 
	`INTERNAL_CATCH_METHOD_AS_TEST_CASE
–mëhod, 
__VA_ARGS__
 )

	)

13188 
	#REGISTER_TEST_CASE
–
Fun˘i⁄
, ... ) 
	`INTERNAL_CATCH_REGISTER_TESTCASE
–Fun˘i⁄, 
__VA_ARGS__
 )

	)

13189 
	#SECTION
–... ) 
	`INTERNAL_CATCH_SECTION
–
__VA_ARGS__
 )

	)

13190 
	#DYNAMIC_SECTION
–... ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–
__VA_ARGS__
 )

	)

13191 
	#FAIL
–... ) 
	`INTERNAL_CATCH_MSG
–"FAIL", 
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
N‹mÆ
, 
__VA_ARGS__
 )

	)

13192 
	#FAIL_CHECK
–... ) 
	`INTERNAL_CATCH_MSG
–"FAIL_CHECK", 
C©ch
::
Resu…Was
::
Ex∂icôFaûuª
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13193 
	#SUCCEED
–... ) 
	`INTERNAL_CATCH_MSG
–"SUCCEED", 
C©ch
::
Resu…Was
::
Ok
, C©ch::
Resu…Di•osôi⁄
::
C⁄töueOnFaûuª
, 
__VA_ARGS__
 )

	)

13194 
	#ANON_TEST_CASE
(Ë
	`INTERNAL_CATCH_TESTCASE
()

	)

13198 
	#CATCH_TRANSLATE_EXCEPTION
–
sig«tuª
 ) 
	`INTERNAL_CATCH_TRANSLATE_EXCEPTION
–sig«tuª )

	)

13201 
	#SCENARIO
–... ) 
	`TEST_CASE
–"S˚«rio: " 
__VA_ARGS__
 )

	)

13202 
	#SCENARIO_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TEST_CASE_METHOD
–˛assName, "S˚«rio: " 
__VA_ARGS__
 )

	)

13204 
	#GIVEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" Giví: " << des¯)

	)

13205 
	#WHEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" Whí: " << des¯)

	)

13206 
	#AND_WHEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–"And whí: " << des¯)

	)

13207 
	#THEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" Thí: " << des¯)

	)

13208 
	#AND_THEN
–
desc
 ) 
	`INTERNAL_CATCH_DYNAMIC_SECTION
–" And: " << des¯)

	)

13210 
usög
 
C©ch
::
Dëaû
::
Aµrox
;

13216 #ifde‡
CATCH_CONFIG_PREFIX_ALL


13218 
	#CATCH_REQUIRE
–... ) ()(0)

	)

13219 
	#CATCH_REQUIRE_FALSE
–... ) ()(0)

	)

13221 
	#CATCH_REQUIRE_THROWS
–... ) ()(0)

	)

13222 
	#CATCH_REQUIRE_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) ()(0)

	)

13223 
	#CATCH_REQUIRE_THROWS_WITH
–
ex¥
, 
m©chî
 ) ()(0)

	)

13224 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13225 
	#CATCH_REQUIRE_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) ()(0)

	)

13227 
	#CATCH_REQUIRE_NOTHROW
–... ) ()(0)

	)

13229 
	#CATCH_CHECK
–... ) ()(0)

	)

13230 
	#CATCH_CHECK_FALSE
–... ) ()(0)

	)

13231 
	#CATCH_CHECKED_IF
–... ) i‡(
__VA_ARGS__
)

	)

13232 
	#CATCH_CHECKED_ELSE
–... ) i‡(!(
__VA_ARGS__
))

	)

13233 
	#CATCH_CHECK_NOFAIL
–... ) ()(0)

	)

13235 
	#CATCH_CHECK_THROWS
–... ) ()(0)

	)

13236 
	#CATCH_CHECK_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) ()(0)

	)

13237 
	#CATCH_CHECK_THROWS_WITH
–
ex¥
, 
m©chî
 ) ()(0)

	)

13238 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13239 
	#CATCH_CHECK_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) ()(0)

	)

13241 
	#CATCH_CHECK_NOTHROW
–... ) ()(0)

	)

13243 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13244 
	#CATCH_CHECK_THAT
–
¨g
, 
m©chî
 ) ()(0)

	)

13246 
	#CATCH_REQUIRE_THAT
–
¨g
, 
m©chî
 ) ()(0)

	)

13249 
	#CATCH_INFO
–
msg
 ) ()(0)

	)

13250 
	#CATCH_WARN
–
msg
 ) ()(0)

	)

13251 
	#CATCH_CAPTURE
–
msg
 ) ()(0)

	)

13253 
	#CATCH_TEST_CASE
–... ) 
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13254 
	#CATCH_TEST_CASE_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13255 
	#CATCH_METHOD_AS_TEST_CASE
–
mëhod
, ... )

	)

13256 
	#CATCH_REGISTER_TEST_CASE
–
Fun˘i⁄
, ... ) ()(0)

	)

13257 
	#CATCH_SECTION
–... )

	)

13258 
	#CATCH_DYNAMIC_SECTION
–... )

	)

13259 
	#CATCH_FAIL
–... ) ()(0)

	)

13260 
	#CATCH_FAIL_CHECK
–... ) ()(0)

	)

13261 
	#CATCH_SUCCEED
–... ) ()(0)

	)

13263 
	#CATCH_ANON_TEST_CASE
(Ë
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13266 
	#CATCH_SCENARIO
–... ) 
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13267 
	#CATCH_SCENARIO_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), cœssNamê)

	)

13268 
	#CATCH_GIVEN
–
desc
 )

	)

13269 
	#CATCH_WHEN
–
desc
 )

	)

13270 
	#CATCH_AND_WHEN
–
desc
 )

	)

13271 
	#CATCH_THEN
–
desc
 )

	)

13272 
	#CATCH_AND_THEN
–
desc
 )

	)

13277 
	#REQUIRE
–... ) ()(0)

	)

13278 
	#REQUIRE_FALSE
–... ) ()(0)

	)

13280 
	#REQUIRE_THROWS
–... ) ()(0)

	)

13281 
	#REQUIRE_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) ()(0)

	)

13282 
	#REQUIRE_THROWS_WITH
–
ex¥
, 
m©chî
 ) ()(0)

	)

13283 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13284 
	#REQUIRE_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) ()(0)

	)

13286 
	#REQUIRE_NOTHROW
–... ) ()(0)

	)

13288 
	#CHECK
–... ) ()(0)

	)

13289 
	#CHECK_FALSE
–... ) ()(0)

	)

13290 
	#CHECKED_IF
–... ) i‡(
__VA_ARGS__
)

	)

13291 
	#CHECKED_ELSE
–... ) i‡(!(
__VA_ARGS__
))

	)

13292 
	#CHECK_NOFAIL
–... ) ()(0)

	)

13294 
	#CHECK_THROWS
–... ) ()(0)

	)

13295 
	#CHECK_THROWS_AS
–
ex¥
, 
ex˚±i⁄Ty≥
 ) ()(0)

	)

13296 
	#CHECK_THROWS_WITH
–
ex¥
, 
m©chî
 ) ()(0)

	)

13297 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13298 
	#CHECK_THROWS_MATCHES
–
ex¥
, 
ex˚±i⁄Ty≥
, 
m©chî
 ) ()(0)

	)

13300 
	#CHECK_NOTHROW
–... ) ()(0)

	)

13302 #i‡!
deföed
(
CATCH_CONFIG_DISABLE_MATCHERS
)

13303 
	#CHECK_THAT
–
¨g
, 
m©chî
 ) ()(0)

	)

13305 
	#REQUIRE_THAT
–
¨g
, 
m©chî
 ) ()(0)

	)

13308 
	#INFO
–
msg
 ) ()(0)

	)

13309 
	#WARN
–
msg
 ) ()(0)

	)

13310 
	#CAPTURE
–
msg
 ) ()(0)

	)

13312 
	#TEST_CASE
–... ) 
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13313 
	#TEST_CASE_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13314 
	#METHOD_AS_TEST_CASE
–
mëhod
, ... )

	)

13315 
	#REGISTER_TEST_CASE
–
Fun˘i⁄
, ... ) ()(0)

	)

13316 
	#SECTION
–... )

	)

13317 
	#DYNAMIC_SECTION
–... )

	)

13318 
	#FAIL
–... ) ()(0)

	)

13319 
	#FAIL_CHECK
–... ) ()(0)

	)

13320 
	#SUCCEED
–... ) ()(0)

	)

13321 
	#ANON_TEST_CASE
(Ë
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ))

	)

13325 
	#CATCH_TRANSLATE_EXCEPTION
–
sig«tuª
 ) 
	`INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG
–
	`INTERNAL_CATCH_UNIQUE_NAME
–
ˇtch_öã∫Æ_Ex˚±i⁄Tøn¶©‹
 ), sig«tuª )

	)

13328 
	#SCENARIO
–... ) 
	`INTERNAL_CATCH_TESTCASE_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ) )

	)

13329 
	#SCENARIO_METHOD
–
˛assName
, ... ) 
	`INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION
(
	`INTERNAL_CATCH_UNIQUE_NAME
–
____C_A_T_C_H____T_E_S_T____
 ), cœssNamê)

	)

13331 
	#GIVEN
–
desc
 )

	)

13332 
	#WHEN
–
desc
 )

	)

13333 
	#AND_WHEN
–
desc
 )

	)

13334 
	#THEN
–
desc
 )

	)

13335 
	#AND_THEN
–
desc
 )

	)

13337 
usög
 
	gC©ch
::
Dëaû
::
Aµrox
;

13346 #ifde‡
__˛™g__


13347 #ifde‡
__ICC


13348 #¥agm®
w¨nög
(
p›
)

13350 #¥agm®
˛™g
 
dügno°ic
 
p›


13352 #ñi‡
deföed
 
__GNUC__


13353 #¥agm®
GCC
 
dügno°ic
 
p›


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	#CTL_MAXNAME
 10

	)

34 
	s__sys˘l_¨gs
 {

35 *
	m«me
;

36 
	m∆í
;

37 *
	mﬁdvÆ
;

38 
size_t
 *
	mﬁdÀ≈
;

39 *
	m√wvÆ
;

40 
size_t
 
	m√wÀn
;

41 
	m__unu£d
[4];

50 
	mCTL_KERN
=1,

51 
	mCTL_VM
=2,

52 
	mCTL_NET
=3,

53 
	mCTL_PROC
=4,

54 
	mCTL_FS
=5,

55 
	mCTL_DEBUG
=6,

56 
	mCTL_DEV
=7,

57 
	mCTL_BUS
=8,

58 
	mCTL_ABI
=9,

59 
	mCTL_CPU
=10,

60 
	mCTL_ARLAN
=254,

61 
	mCTL_S390DBF
=5677,

62 
	mCTL_SUNRPC
=7249,

63 
	mCTL_PM
=9899,

64 
	mCTL_FRV
=9898,

70 
	mCTL_BUS_ISA
=1

76 
	mINOTIFY_MAX_USER_INSTANCES
=1,

77 
	mINOTIFY_MAX_USER_WATCHES
=2,

78 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

84 
	mKERN_OSTYPE
=1,

85 
	mKERN_OSRELEASE
=2,

86 
	mKERN_OSREV
=3,

87 
	mKERN_VERSION
=4,

88 
	mKERN_SECUREMASK
=5,

89 
	mKERN_PROF
=6,

90 
	mKERN_NODENAME
=7,

91 
	mKERN_DOMAINNAME
=8,

93 
	mKERN_PANIC
=15,

94 
	mKERN_REALROOTDEV
=16,

96 
	mKERN_SPARC_REBOOT
=21,

97 
	mKERN_CTLALTDEL
=22,

98 
	mKERN_PRINTK
=23,

99 
	mKERN_NAMETRANS
=24,

100 
	mKERN_PPC_HTABRECLAIM
=25,

101 
	mKERN_PPC_ZEROPAGED
=26,

102 
	mKERN_PPC_POWERSAVE_NAP
=27,

103 
	mKERN_MODPROBE
=28,

104 
	mKERN_SG_BIG_BUFF
=29,

105 
	mKERN_ACCT
=30,

106 
	mKERN_PPC_L2CR
=31,

108 
	mKERN_RTSIGNR
=32,

109 
	mKERN_RTSIGMAX
=33,

111 
	mKERN_SHMMAX
=34,

112 
	mKERN_MSGMAX
=35,

113 
	mKERN_MSGMNB
=36,

114 
	mKERN_MSGPOOL
=37,

115 
	mKERN_SYSRQ
=38,

116 
	mKERN_MAX_THREADS
=39,

117 
	mKERN_RANDOM
=40,

118 
	mKERN_SHMALL
=41,

119 
	mKERN_MSGMNI
=42,

120 
	mKERN_SEM
=43,

121 
	mKERN_SPARC_STOP_A
=44,

122 
	mKERN_SHMMNI
=45,

123 
	mKERN_OVERFLOWUID
=46,

124 
	mKERN_OVERFLOWGID
=47,

125 
	mKERN_SHMPATH
=48,

126 
	mKERN_HOTPLUG
=49,

127 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

128 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

129 
	mKERN_CORE_USES_PID
=52,

130 
	mKERN_TAINTED
=53,

131 
	mKERN_CADPID
=54,

132 
	mKERN_PIDMAX
=55,

133 
	mKERN_CORE_PATTERN
=56,

134 
	mKERN_PANIC_ON_OOPS
=57,

135 
	mKERN_HPPA_PWRSW
=58,

136 
	mKERN_HPPA_UNALIGNED
=59,

137 
	mKERN_PRINTK_RATELIMIT
=60,

138 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

139 
	mKERN_PTY
=62,

140 
	mKERN_NGROUPS_MAX
=63,

141 
	mKERN_SPARC_SCONS_PWROFF
=64,

142 
	mKERN_HZ_TIMER
=65,

143 
	mKERN_UNKNOWN_NMI_PANIC
=66,

144 
	mKERN_BOOTLOADER_TYPE
=67,

145 
	mKERN_RANDOMIZE
=68,

146 
	mKERN_SETUID_DUMPABLE
=69,

147 
	mKERN_SPIN_RETRY
=70,

148 
	mKERN_ACPI_VIDEO_FLAGS
=71,

149 
	mKERN_IA64_UNALIGNED
=72,

150 
	mKERN_COMPAT_LOG
=73,

151 
	mKERN_MAX_LOCK_DEPTH
=74,

152 
	mKERN_NMI_WATCHDOG
=75,

153 
	mKERN_PANIC_ON_NMI
=76,

154 
	mKERN_PANIC_ON_WARN
=77,

162 
	mVM_UNUSED1
=1,

163 
	mVM_UNUSED2
=2,

164 
	mVM_UNUSED3
=3,

165 
	mVM_UNUSED4
=4,

166 
	mVM_OVERCOMMIT_MEMORY
=5,

167 
	mVM_UNUSED5
=6,

168 
	mVM_UNUSED7
=7,

169 
	mVM_UNUSED8
=8,

170 
	mVM_UNUSED9
=9,

171 
	mVM_PAGE_CLUSTER
=10,

172 
	mVM_DIRTY_BACKGROUND
=11,

173 
	mVM_DIRTY_RATIO
=12,

174 
	mVM_DIRTY_WB_CS
=13,

175 
	mVM_DIRTY_EXPIRE_CS
=14,

176 
	mVM_NR_PDFLUSH_THREADS
=15,

177 
	mVM_OVERCOMMIT_RATIO
=16,

178 
	mVM_PAGEBUF
=17,

179 
	mVM_HUGETLB_PAGES
=18,

180 
	mVM_SWAPPINESS
=19,

181 
	mVM_LOWMEM_RESERVE_RATIO
=20,

182 
	mVM_MIN_FREE_KBYTES
=21,

183 
	mVM_MAX_MAP_COUNT
=22,

184 
	mVM_LAPTOP_MODE
=23,

185 
	mVM_BLOCK_DUMP
=24,

186 
	mVM_HUGETLB_GROUP
=25,

187 
	mVM_VFS_CACHE_PRESSURE
=26,

188 
	mVM_LEGACY_VA_LAYOUT
=27,

189 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

190 
	mVM_DROP_PAGECACHE
=29,

191 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

192 
	mVM_ZONE_RECLAIM_MODE
=31,

193 
	mVM_MIN_UNMAPPED
=32,

194 
	mVM_PANIC_ON_OOM
=33,

195 
	mVM_VDSO_ENABLED
=34,

196 
	mVM_MIN_SLAB
=35,

203 
	mNET_CORE
=1,

204 
	mNET_ETHER
=2,

205 
	mNET_802
=3,

206 
	mNET_UNIX
=4,

207 
	mNET_IPV4
=5,

208 
	mNET_IPX
=6,

209 
	mNET_ATALK
=7,

210 
	mNET_NETROM
=8,

211 
	mNET_AX25
=9,

212 
	mNET_BRIDGE
=10,

213 
	mNET_ROSE
=11,

214 
	mNET_IPV6
=12,

215 
	mNET_X25
=13,

216 
	mNET_TR
=14,

217 
	mNET_DECNET
=15,

218 
	mNET_ECONET
=16,

219 
	mNET_SCTP
=17,

220 
	mNET_LLC
=18,

221 
	mNET_NETFILTER
=19,

222 
	mNET_DCCP
=20,

223 
	mNET_IRDA
=412,

229 
	mRANDOM_POOLSIZE
=1,

230 
	mRANDOM_ENTROPY_COUNT
=2,

231 
	mRANDOM_READ_THRESH
=3,

232 
	mRANDOM_WRITE_THRESH
=4,

233 
	mRANDOM_BOOT_ID
=5,

234 
	mRANDOM_UUID
=6

240 
	mPTY_MAX
=1,

241 
	mPTY_NR
=2

247 
	mBUS_ISA_MEM_BASE
=1,

248 
	mBUS_ISA_PORT_BASE
=2,

249 
	mBUS_ISA_PORT_SHIFT
=3

255 
	mNET_CORE_WMEM_MAX
=1,

256 
	mNET_CORE_RMEM_MAX
=2,

257 
	mNET_CORE_WMEM_DEFAULT
=3,

258 
	mNET_CORE_RMEM_DEFAULT
=4,

260 
	mNET_CORE_MAX_BACKLOG
=6,

261 
	mNET_CORE_FASTROUTE
=7,

262 
	mNET_CORE_MSG_COST
=8,

263 
	mNET_CORE_MSG_BURST
=9,

264 
	mNET_CORE_OPTMEM_MAX
=10,

265 
	mNET_CORE_HOT_LIST_LENGTH
=11,

266 
	mNET_CORE_DIVERT_VERSION
=12,

267 
	mNET_CORE_NO_CONG_THRESH
=13,

268 
	mNET_CORE_NO_CONG
=14,

269 
	mNET_CORE_LO_CONG
=15,

270 
	mNET_CORE_MOD_CONG
=16,

271 
	mNET_CORE_DEV_WEIGHT
=17,

272 
	mNET_CORE_SOMAXCONN
=18,

273 
	mNET_CORE_BUDGET
=19,

274 
	mNET_CORE_AEVENT_ETIME
=20,

275 
	mNET_CORE_AEVENT_RSEQTH
=21,

276 
	mNET_CORE_WARNINGS
=22,

287 
	mNET_UNIX_DESTROY_DELAY
=1,

288 
	mNET_UNIX_DELETE_DELAY
=2,

289 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

295 
	mNET_NF_CONNTRACK_MAX
=1,

296 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

304 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

306 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

307 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

308 
	mNET_NF_CONNTRACK_BUCKETS
=14,

309 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

310 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

311 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

312 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

313 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

314 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

321 
	mNET_NF_CONNTRACK_COUNT
=27,

322 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

323 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

324 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

325 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

326 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

333 
	mNET_IPV4_FORWARD
=8,

334 
	mNET_IPV4_DYNADDR
=9,

336 
	mNET_IPV4_CONF
=16,

337 
	mNET_IPV4_NEIGH
=17,

338 
	mNET_IPV4_ROUTE
=18,

339 
	mNET_IPV4_FIB_HASH
=19,

340 
	mNET_IPV4_NETFILTER
=20,

342 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

343 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

344 
	mNET_IPV4_TCP_SACK
=35,

345 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

346 
	mNET_IPV4_DEFAULT_TTL
=37,

347 
	mNET_IPV4_AUTOCONFIG
=38,

348 
	mNET_IPV4_NO_PMTU_DISC
=39,

349 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

350 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

351 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

352 
	mNET_IPV4_IPFRAG_TIME
=43,

353 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

354 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

355 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

356 
	mNET_IPV4_TCP_RETRIES1
=47,

357 
	mNET_IPV4_TCP_RETRIES2
=48,

358 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

359 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

360 
	mNET_TCP_SYNCOOKIES
=51,

361 
	mNET_TCP_STDURG
=52,

362 
	mNET_TCP_RFC1337
=53,

363 
	mNET_TCP_SYN_TAILDROP
=54,

364 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

365 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

366 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

368 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

369 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

370 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

371 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

372 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

373 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

374 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

375 
	mNET_TCP_TW_RECYCLE
=66,

376 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

377 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

378 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

379 
	mNET_IPV4_INET_PEER_MINTTL
=70,

380 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

381 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

382 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

383 
	mNET_TCP_ORPHAN_RETRIES
=74,

384 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

385 
	mNET_TCP_SYNACK_RETRIES
=76,

386 
	mNET_TCP_MAX_ORPHANS
=77,

387 
	mNET_TCP_MAX_TW_BUCKETS
=78,

388 
	mNET_TCP_FACK
=79,

389 
	mNET_TCP_REORDERING
=80,

390 
	mNET_TCP_ECN
=81,

391 
	mNET_TCP_DSACK
=82,

392 
	mNET_TCP_MEM
=83,

393 
	mNET_TCP_WMEM
=84,

394 
	mNET_TCP_RMEM
=85,

395 
	mNET_TCP_APP_WIN
=86,

396 
	mNET_TCP_ADV_WIN_SCALE
=87,

397 
	mNET_IPV4_NONLOCAL_BIND
=88,

398 
	mNET_IPV4_ICMP_RATELIMIT
=89,

399 
	mNET_IPV4_ICMP_RATEMASK
=90,

400 
	mNET_TCP_TW_REUSE
=91,

401 
	mNET_TCP_FRTO
=92,

402 
	mNET_TCP_LOW_LATENCY
=93,

403 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

404 
	mNET_IPV4_IGMP_MAX_MSF
=96,

405 
	mNET_TCP_NO_METRICS_SAVE
=97,

406 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

407 
	mNET_TCP_MODERATE_RCVBUF
=106,

408 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

409 
	mNET_TCP_BIC_BETA
=108,

410 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

411 
	mNET_TCP_CONG_CONTROL
=110,

412 
	mNET_TCP_ABC
=111,

413 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

414 
	mNET_TCP_MTU_PROBING
=113,

415 
	mNET_TCP_BASE_MSS
=114,

416 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

417 
	mNET_TCP_DMA_COPYBREAK
=116,

418 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

419 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

420 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

421 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

422 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

423 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

424 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

425 
	mNET_TCP_MAX_SSTHRESH
=124,

426 
	mNET_TCP_FRTO_RESPONSE
=125,

430 
	mNET_IPV4_ROUTE_FLUSH
=1,

431 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

432 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

433 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

434 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

435 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

436 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

437 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

438 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

439 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

440 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

441 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

442 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

443 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

444 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

445 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

446 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

447 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

448 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

453 
	mNET_PROTO_CONF_ALL
=-2,

454 
	mNET_PROTO_CONF_DEFAULT
=-3

461 
	mNET_IPV4_CONF_FORWARDING
=1,

462 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

463 
	mNET_IPV4_CONF_PROXY_ARP
=3,

464 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

465 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

466 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

467 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

468 
	mNET_IPV4_CONF_RP_FILTER
=8,

469 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

470 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

471 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

472 
	mNET_IPV4_CONF_TAG
=12,

473 
	mNET_IPV4_CONF_ARPFILTER
=13,

474 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

475 
	mNET_IPV4_CONF_NOXFRM
=15,

476 
	mNET_IPV4_CONF_NOPOLICY
=16,

477 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

478 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

479 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

480 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

481 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

482 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

488 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

489 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

497 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

499 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

500 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

501 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

502 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

503 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

507 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

514 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

515 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

520 
	mNET_IPV6_CONF
=16,

521 
	mNET_IPV6_NEIGH
=17,

522 
	mNET_IPV6_ROUTE
=18,

523 
	mNET_IPV6_ICMP
=19,

524 
	mNET_IPV6_BINDV6ONLY
=20,

525 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

526 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

527 
	mNET_IPV6_IP6FRAG_TIME
=23,

528 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

529 
	mNET_IPV6_MLD_MAX_MSF
=25,

533 
	mNET_IPV6_ROUTE_FLUSH
=1,

534 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

535 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

536 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

537 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

538 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

539 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

540 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

541 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

542 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

546 
	mNET_IPV6_FORWARDING
=1,

547 
	mNET_IPV6_HOP_LIMIT
=2,

548 
	mNET_IPV6_MTU
=3,

549 
	mNET_IPV6_ACCEPT_RA
=4,

550 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

551 
	mNET_IPV6_AUTOCONF
=6,

552 
	mNET_IPV6_DAD_TRANSMITS
=7,

553 
	mNET_IPV6_RTR_SOLICITS
=8,

554 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

555 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

556 
	mNET_IPV6_USE_TEMPADDR
=11,

557 
	mNET_IPV6_TEMP_VALID_LFT
=12,

558 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

559 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

560 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

561 
	mNET_IPV6_MAX_ADDRESSES
=16,

562 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

563 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

564 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

565 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

566 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

567 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

568 
	mNET_IPV6_PROXY_NDP
=23,

569 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

570 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 #ifde‡
__USE_XOPEN2K


43 
	#__√ed_time•ec


	)

45 
	~<time.h
>

46 
	#__√ed_timevÆ


	)

47 
	~<bôs/time.h
>

49 #i‚de‡
__su£c⁄ds_t_deföed


50 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

51 
	#__su£c⁄ds_t_deföed


	)

56 
	t__fd_mask
;

59 #unde‡
__NFDBITS


61 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

62 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

63 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

70 #ifde‡
__USE_XOPEN


71 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

72 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

74 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

75 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

77 } 
	tfd_£t
;

80 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

82 #ifde‡
__USE_MISC


84 
__fd_mask
 
	tfd_mask
;

87 
	#NFDBITS
 
__NFDBITS


	)

92 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

93 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

94 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

95 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

98 
__BEGIN_DECLS


108 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

109 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

110 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

111 
timevÆ
 *
__ª°ri˘
 
__timeout
);

113 #ifde‡
__USE_XOPEN2K


120 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

121 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

122 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

123 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

124 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

129 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


130 
	~<bôs/£À˘2.h
>

133 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

310 #unde‡
__Æways_ölöe


311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡
__GNUC_PREREQ
 (4,3)

320 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

322 
	#__©åibuã_¨tificül__


	)

334 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

335 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

336 || 
deföed
 
__GNUC_GNU_INLINE__
)))

337 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


338 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_Æways_ölöe
 \

340 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_ölöe
 
__ölöe


	)

343 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

347 #ifde‡
__exã∫_Æways_ölöe


348 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

353 #i‡
__GNUC_PREREQ
 (4,3)

354 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

355 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

362 #i‡!
__GNUC_PREREQ
 (2,8)

363 
	#__exãnsi⁄__


	)

367 #i‡!
__GNUC_PREREQ
 (2,92)

368 
	#__ª°ri˘


	)

374 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


375 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

377 #ifde‡
__GNUC__


378 
	#__ª°ri˘_¨r


	)

380 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

381 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

384 
	#__ª°ri˘_¨r


	)

389 #i‡
__GNUC__
 >= 3

390 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

391 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

397 #i‡(!
deföed
 
_N‹ëu∫
 \

398 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

399 && !
	$__GNUC_PREREQ
 (4,7))

400 #i‡
	`__GNUC_PREREQ
 (2,8)

401 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

403 
	#_N‹ëu∫


	)

407 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

408 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

409 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

410 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

411 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

412 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

415 
	~<bôs/w‹dsize.h
>

417 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


418 
	#__LDBL_COMPAT
 1

	)

419 #ifde‡
__REDIRECT


420 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

422 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

423 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

424 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

425 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

426 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

427 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

428 
	#__LDBL_REDIR_DECL
(
«me
) \

429 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

431 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

432 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

433 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

436 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


437 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

438 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

439 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

440 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

441 
	#__LDBL_REDIR_DECL
(
«me
)

	)

442 #ifde‡
__REDIRECT


443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

444 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

445 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


81 
	#NL_NMAX
 
INT_MAX


	)

85 
	#NL_SETMAX
 
INT_MAX


	)

88 
	#NL_TEXTMAX
 
INT_MAX


	)

91 
	#NZERO
 20

	)

95 #ifde‡
INT_MAX


96 #i‡
INT_MAX
 == 32767

97 
	#WORD_BIT
 16

	)

99 #i‡
INT_MAX
 == 2147483647

100 
	#WORD_BIT
 32

	)

103 
	#WORD_BIT
 64

	)

106 #ñi‡
deföed
 
__INT_MAX__


107 #i‡
__INT_MAX__
 == 32767

108 
	#WORD_BIT
 16

	)

110 #i‡
__INT_MAX__
 == 2147483647

111 
	#WORD_BIT
 32

	)

114 
	#WORD_BIT
 64

	)

118 
	#WORD_BIT
 32

	)

122 #ifde‡
LONG_MAX


123 #i‡
LONG_MAX
 == 2147483647

124 
	#LONG_BIT
 32

	)

127 
	#LONG_BIT
 64

	)

129 #ñi‡
deföed
 
__LONG_MAX__


130 #i‡
__LONG_MAX__
 == 2147483647

131 
	#LONG_BIT
 32

	)

134 
	#LONG_BIT
 64

	)

137 
	~<bôs/w‹dsize.h
>

138 #i‡
__WORDSIZE
 == 64

139 
	#LONG_BIT
 64

	)

141 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@
1
.
1
/usr/include
69
1704
cache.cpp
cache.h
main.cpp
misc.h
prefetch.cpp
prefetch.h
system.cpp
system.h
tests/random.cpp
tests/unit.cpp
/aenao-99/karyofyl/zstr/src/zstr.hpp
tests/catch.hpp
/usr/include/assert.h
/usr/include/signal.h
/usr/include/sys/sysctl.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sysctl.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/linux/sysctl.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/zconf.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/limits.h
/usr/include/linux/kernel.h
/usr/include/linux/types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/xlocale.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/timex.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/bits/local_lim.h
/usr/include/bits/stdio_lim.h
/usr/include/linux/stddef.h
/usr/include/linux/limits.h
