!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AccessType	misc.h	/^enum class AccessType {Read, Write, Prefetch};$/;"	c
AdjPrefetch	prefetch.h	/^class AdjPrefetch : public Prefetch {$/;"	c
Cache	cache.cpp	/^Cache::Cache(unsigned int num_lines, unsigned int assoc) : maxSetSize(assoc)$/;"	f	class:Cache
Cache	cache.h	/^class Cache {$/;"	c
CacheLine	misc.h	/^   CacheLine(uint64_t tag = 0, CacheState state = CacheState::Invalid, int mapping = -1, std::array<int,64> data = {0}, std::array<int,64> datax = {0}) : $/;"	f	struct:CacheLine
CacheLine	misc.h	/^struct CacheLine{$/;"	s
CacheState	misc.h	/^enum class CacheState {Modified, Owned, Exclusive, Shared, Invalid};$/;"	c
Exclusive	misc.h	/^enum class CacheState {Modified, Owned, Exclusive, Shared, Invalid};$/;"	m	class:CacheState
Modified	misc.h	/^enum class CacheState {Modified, Owned, Exclusive, Shared, Invalid};$/;"	m	class:CacheState
MultiCacheSystem	system.cpp	/^MultiCacheSystem::MultiCacheSystem(std::vector<unsigned int>& tid_to_domain, $/;"	f	class:MultiCacheSystem
MultiCacheSystem	system.h	/^class MultiCacheSystem : public System {$/;"	c
Owned	misc.h	/^enum class CacheState {Modified, Owned, Exclusive, Shared, Invalid};$/;"	m	class:CacheState
PAGE_SIZE_4KB	misc.h	31;"	d
Prefetch	prefetch.h	/^class Prefetch {$/;"	c
Read	misc.h	/^enum class AccessType {Read, Write, Prefetch};$/;"	m	class:AccessType
SeqPrefetch	prefetch.h	/^class SeqPrefetch : public Prefetch {$/;"	c
Shared	misc.h	/^enum class CacheState {Modified, Owned, Exclusive, Shared, Invalid};$/;"	m	class:CacheState
SingleCacheSystem	system.cpp	/^SingleCacheSystem::SingleCacheSystem( $/;"	f	class:SingleCacheSystem
SingleCacheSystem	system.h	/^class SingleCacheSystem : public System {$/;"	c
System	system.cpp	/^System::System($/;"	f	class:System
System	system.h	/^class System {$/;"	c
SystemStats	system.h	/^struct SystemStats {$/;"	s
Write	misc.h	/^enum class AccessType {Read, Write, Prefetch};$/;"	m	class:AccessType
bdi	compression.cpp	/^int bdi(const std::array<int,64> cacheLine) {$/;"	f
bdi_debug	compression.cpp	/^bool bdi_debug = false;$/;"	v
cache	system.h	/^   std::unique_ptr<Cache> cache;$/;"	m	class:SingleCacheSystem
caches	system.h	/^   std::vector<std::unique_ptr<Cache>> caches;$/;"	m	class:MultiCacheSystem
changeState	cache.cpp	/^void Cache::changeState(uint64_t set, uint64_t tag, CacheState state)$/;"	f	class:Cache
checkCompulsory	system.cpp	/^void System::checkCompulsory(uint64_t line)$/;"	f	class:System
checkRemoteStates	system.cpp	/^unsigned int MultiCacheSystem::checkRemoteStates(uint64_t set, $/;"	f	class:MultiCacheSystem
checkWriteback	cache.cpp	/^bool Cache::checkWriteback(uint64_t set, uint64_t& tag) const$/;"	f	class:Cache
clusterData	cache.h	/^    std::vector<std::array<int,64>> clusterData;$/;"	m	class:Cache
compressStats	system.cpp	/^std::vector<std::tuple<int, int, double, double>> MultiCacheSystem::compressStats(int cache_line_num, int assoc, std::string comp_method)$/;"	f	class:MultiCacheSystem
compressStats	system.cpp	/^std::vector<std::tuple<int, int, double, double>> SingleCacheSystem::compressStats(int cache_line_num, int assoc, std::string comp_method)$/;"	f	class:SingleCacheSystem
compressionStats	cache.cpp	/^std::tuple<int, int, double, double> Cache::compressionStats(int cache_line_num, int assoc, int cache_num, std::string comp_method)$/;"	f	class:Cache
compression_debug	compression.cpp	/^bool compression_debug = false;$/;"	v
countCompulsory	system.h	/^   bool countCompulsory;$/;"	m	class:System
data	misc.h	/^   std::array<int,64> data;$/;"	m	struct:CacheLine
datax	misc.h	/^   std::array<int,64> datax;$/;"	m	struct:CacheLine
doAddrTrans	system.h	/^   bool doAddrTrans;$/;"	m	class:System
evictTraffic	system.cpp	/^void MultiCacheSystem::evictTraffic(uint64_t set, $/;"	f	class:MultiCacheSystem
findPrecompressionEntry	cache.cpp	/^int Cache::findPrecompressionEntry(std::array<int,64> data, std::string precomp_update_method, int data_type, int bytes_ignored, int sim_threshold)$/;"	f	class:Cache
findTag	cache.cpp	/^CacheState Cache::findTag(uint64_t set, uint64_t tag) const$/;"	f	class:Cache
frequentLines	cache.h	/^    std::deque<std::array<int,64>> frequentLines;$/;"	m	class:Cache
frequent_entries_outfile_generation	cache.cpp	/^std::string frequent_entries_outfile_generation(const std::string machine, const std::string suite, const std::string benchmark, const std::string size, const int entries, const int data_type, \\$/;"	f
getWay	cache.cpp	/^uint Cache::getWay(uint64_t set, uint64_t tag) const$/;"	f	class:Cache
help	main.cpp	/^void help(){$/;"	f
infiniteFrequentLines	cache.h	/^    std::vector<std::tuple<std::array<int,64>,int>> infiniteFrequentLines;$/;"	m	class:Cache
insertLine	cache.cpp	/^void Cache::insertLine(uint64_t set, uint64_t tag, CacheState state, std::array<int,64> data, std::string precomp_method, std::string precomp_update_method, std::string comp_method, int entries, \\$/;"	f	class:Cache
isLocal	system.cpp	/^bool MultiCacheSystem::isLocal(uint64_t address, unsigned int local)$/;"	f	class:MultiCacheSystem
lineMask	system.h	/^   uint64_t lineMask;$/;"	m	class:System
machine	main.cpp	/^std::string machine = "local";$/;"	v
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
maxSetSize	cache.h	/^    unsigned int maxSetSize;$/;"	m	class:Cache
memAccess	system.cpp	/^std::tuple<uint64_t, uint, uint64_t, std::string, std::array<int,64>> MultiCacheSystem::memAccess(uint64_t address, AccessType accessType, std::array<int,64> data, unsigned int tid, \\$/;"	f	class:MultiCacheSystem
memAccess	system.cpp	/^std::tuple<uint64_t, uint, uint64_t, std::string, std::array<int,64>> SingleCacheSystem::memAccess(uint64_t address, AccessType accessType, std::array<int,64> data, unsigned int tid, \\$/;"	f	class:SingleCacheSystem
operator <	misc.h	/^   bool operator<(const CacheLine& rhs) const$/;"	f	struct:CacheLine
operator ==	misc.h	/^   bool operator==(const CacheLine& rhs) const$/;"	f	struct:CacheLine
outfile_generation	main.cpp	/^std::string outfile_generation(const std::string machine, const std::string precomp_method, const std::string precomp_update_method, const std::string comp_method, const int entries, \\$/;"	f
override	prefetch.h	/^    int entries, std::string infinite_freq, std::string hit_update, std::string ignore_i_bytes, int data_type, int bytes_ignored, int sim_threshold, System& sys) override;$/;"	m	class:AdjPrefetch
override	prefetch.h	/^    int entries, std::string infinite_freq, std::string hit_update, std::string ignore_i_bytes, int data_type, int bytes_ignored, int sim_threshold, System& sys) override;$/;"	m	class:SeqPrefetch
override	system.h	/^        int data_type, int bytes_ignored, int sim_threshold) override;$/;"	m	class:MultiCacheSystem
override	system.h	/^        int data_type, int bytes_ignored, int sim_threshold) override;$/;"	m	class:SingleCacheSystem
override	system.h	/^        std::string infinite_freq, std::string ignore_i_bytes, int data_type, int bytes_ignored, int sim_threshold) override;$/;"	m	class:MultiCacheSystem
override	system.h	/^        std::string infinite_freq, std::string ignore_i_bytes, int data_type, int bytes_ignored, int sim_threshold) override;$/;"	m	class:SingleCacheSystem
override	system.h	/^   std::vector<std::tuple<int, int, double, double>> compressStats(int cache_line_num, int assoc, std::string comp_method) override;$/;"	m	class:MultiCacheSystem
override	system.h	/^   std::vector<std::tuple<int, int, double, double>> compressStats(int cache_line_num, int assoc, std::string comp_method) override;$/;"	m	class:SingleCacheSystem
override	system.h	/^   void snapshot() override;$/;"	m	class:MultiCacheSystem
override	system.h	/^   void snapshot() override;$/;"	m	class:SingleCacheSystem
pageMask	misc.h	/^constexpr uint64_t pageMask = 0xFFFFFFFFFFE00000;$/;"	v
pageMask	misc.h	/^constexpr uint64_t pageMask = 0xFFFFFFFFFFFFF000;$/;"	v
pageShift	misc.h	/^constexpr uint32_t pageShift = 12;$/;"	v
pageShift	misc.h	/^constexpr uint32_t pageShift = 21;$/;"	v
pageToDomain	system.h	/^   std::unordered_map<uint64_t, unsigned int> pageToDomain;$/;"	m	class:MultiCacheSystem
precompress	system.cpp	/^void MultiCacheSystem::precompress(std::string machine, std::string suite, std::string benchmark, std::string size, int entries, std::string precomp_method, std::string precomp_update_method, \\$/;"	f	class:MultiCacheSystem
precompress	system.cpp	/^void SingleCacheSystem::precompress(std::string machine, std::string suite, std::string benchmark, std::string size, int entries, std::string precomp_method, std::string precomp_update_method, std::string infinite_freq, \\$/;"	f	class:SingleCacheSystem
precompressCache	cache.cpp	/^void Cache::precompressCache(std::string precomp_method, int data_type, int bytes_ignored, std::string ignore_i_bytes)$/;"	f	class:Cache
precompressDatax	cache.cpp	/^void Cache::precompressDatax(std::string precomp_method, uint64_t set, uint64_t tag, int data_type, int bytes_ignored, std::string ignore_i_bytes)$/;"	f	class:Cache
prefetchHit	prefetch.cpp	/^int AdjPrefetch::prefetchHit(uint64_t address, unsigned int tid, std::array<int,64> data, std::string precomp_method, std::string precomp_update_method, std::string comp_method, \\$/;"	f	class:AdjPrefetch
prefetchHit	prefetch.cpp	/^int SeqPrefetch::prefetchHit(uint64_t address, unsigned int tid, std::array<int,64> data, std::string precomp_method, std::string precomp_update_method, std::string comp_method, \\$/;"	f	class:SeqPrefetch
prefetchMiss	prefetch.cpp	/^int AdjPrefetch::prefetchMiss(uint64_t address, unsigned int tid, std::array<int,64> data, std::string precomp_method, std::string precomp_update_method, std::string comp_method, \\$/;"	f	class:AdjPrefetch
prefetchMiss	prefetch.cpp	/^int SeqPrefetch::prefetchMiss(uint64_t address, unsigned int tid, std::array<int,64> data, std::string precomp_method, std::string precomp_update_method, std::string comp_method, \\$/;"	f	class:SeqPrefetch
prefetchNum	prefetch.h	/^   static constexpr unsigned int prefetchNum = 3;$/;"	m	class:SeqPrefetch
prefetcher	system.h	/^   std::unique_ptr<Prefetch> prefetcher;$/;"	m	class:System
processMOESI	system.cpp	/^CacheState MultiCacheSystem::processMOESI(uint64_t set,$/;"	f	class:MultiCacheSystem
seenLines	system.h	/^   std::unordered_set<uint64_t> seenLines;$/;"	m	class:System
setMask	system.h	/^   uint64_t setMask;$/;"	m	class:System
setRemoteStates	system.cpp	/^void MultiCacheSystem::setRemoteStates(uint64_t set, $/;"	f	class:MultiCacheSystem
setShift	system.h	/^   uint32_t setShift;$/;"	m	class:System
sets	cache.h	/^    std::vector<std::deque<CacheLine>> sets;$/;"	m	class:Cache
snapshot	cache.cpp	/^void Cache::snapshot(int cache_num)$/;"	f	class:Cache
snapshot	main.cpp	/^bool snapshot = false;$/;"	v
snapshot	system.cpp	/^void MultiCacheSystem::snapshot()$/;"	f	class:MultiCacheSystem
snapshot	system.cpp	/^void SingleCacheSystem::snapshot()$/;"	f	class:SingleCacheSystem
stats	system.h	/^   SystemStats stats;$/;"	m	class:System
tagMask	system.h	/^   uint64_t tagMask;$/;"	m	class:System
tidToDomain	system.h	/^   std::vector<unsigned int>& tidToDomain;$/;"	m	class:MultiCacheSystem
trace_accesses	main.cpp	/^bool trace_accesses = false;$/;"	v
trace_info	system.h	/^   std::tuple<uint64_t, uint, uint64_t, std::string, std::array<int,64>> trace_info;$/;"	m	class:System
tracefile_generation	main.cpp	/^std::string tracefile_generation(const std::string option, const std::string suite, const std::string benchmark, const std::string size, const std::string machine)$/;"	f
updateData	cache.cpp	/^void Cache::updateData(uint64_t set, uint64_t tag, std::array<int,64> data, std::string precomp_method, std::string precomp_update_method, std::string comp_method, int entries, \\$/;"	f	class:Cache
updateFrequencyTable	cache.cpp	/^void Cache::updateFrequencyTable(std::array<int,64> data, int entries, std::string infinite_freq, int data_type, int bytes_ignored)$/;"	f	class:Cache
updateLRU	cache.cpp	/^void Cache::updateLRU(uint64_t set, uint64_t tag)$/;"	f	class:Cache
updatePageToDomain	system.cpp	/^void MultiCacheSystem::updatePageToDomain(uint64_t address, $/;"	f	class:MultiCacheSystem
updatePrecompressTable	cache.cpp	/^void Cache::updatePrecompressTable(std::string machine, std::string suite, std::string benchmark, std::string size, int entries, std::string precomp_method, std::string precomp_update_method, \\$/;"	f	class:Cache
virtToPhys	system.cpp	/^uint64_t System::virtToPhys(uint64_t address)$/;"	f	class:System
virtToPhysMap	system.h	/^   std::unordered_map<uint64_t, uint64_t> virtToPhysMap;$/;"	m	class:System
